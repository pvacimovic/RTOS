
RTOS-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007254  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a8  080075a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080075a8  080075a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075a8  080075a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080075b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001a64  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ad8  20001ad8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018308  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eee  00000000  00000000  000383ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ccd  00000000  00000000  0003d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162bf  00000000  00000000  000404f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc0f2  00000000  00000000  000567b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001228a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000550c  00000000  00000000  001228f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073cc 	.word	0x080073cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080073cc 	.word	0x080073cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fbe8 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f85a 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f8ca 	bl	8000424 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f898 	bl	80003c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000294:	f002 ffbe 	bl	8003214 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <main+0x80>)
 800029a:	2101      	movs	r1, #1
 800029c:	2001      	movs	r0, #1
 800029e:	f003 f8f9 	bl	8003494 <osSemaphoreNew>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <main+0x84>)
 80002a6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ToGreen */
  ToGreenHandle = osMessageQueueNew (16, sizeof(uint16_t), &ToGreen_attributes);
 80002a8:	4a17      	ldr	r2, [pc, #92]	; (8000308 <main+0x88>)
 80002aa:	2102      	movs	r1, #2
 80002ac:	2010      	movs	r0, #16
 80002ae:	f003 fa4b 	bl	8003748 <osMessageQueueNew>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a15      	ldr	r2, [pc, #84]	; (800030c <main+0x8c>)
 80002b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DefaultTask */
  DefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &DefaultTask_attributes);
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <main+0x90>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4815      	ldr	r0, [pc, #84]	; (8000314 <main+0x94>)
 80002be:	f003 f811 	bl	80032e4 <osThreadNew>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a14      	ldr	r2, [pc, #80]	; (8000318 <main+0x98>)
 80002c6:	6013      	str	r3, [r2, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(StartGreenTask, NULL, &GreenTask_attributes);
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <main+0x9c>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	4814      	ldr	r0, [pc, #80]	; (8000320 <main+0xa0>)
 80002ce:	f003 f809 	bl	80032e4 <osThreadNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a13      	ldr	r2, [pc, #76]	; (8000324 <main+0xa4>)
 80002d6:	6013      	str	r3, [r2, #0]

  /* creation of YellowTask */
  YellowTaskHandle = osThreadNew(StartYellowTask, NULL, &YellowTask_attributes);
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <main+0xa8>)
 80002da:	2100      	movs	r1, #0
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <main+0xac>)
 80002de:	f003 f801 	bl	80032e4 <osThreadNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <main+0xb0>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* creation of Blue */
  BlueHandle = osThreadNew(StartBlue, NULL, &Blue_attributes);
 80002e8:	4a12      	ldr	r2, [pc, #72]	; (8000334 <main+0xb4>)
 80002ea:	2100      	movs	r1, #0
 80002ec:	4812      	ldr	r0, [pc, #72]	; (8000338 <main+0xb8>)
 80002ee:	f002 fff9 	bl	80032e4 <osThreadNew>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a11      	ldr	r2, [pc, #68]	; (800033c <main+0xbc>)
 80002f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002f8:	f002 ffc0 	bl	800327c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <main+0x7c>
 80002fe:	bf00      	nop
 8000300:	0800752c 	.word	0x0800752c
 8000304:	20000128 	.word	0x20000128
 8000308:	08007514 	.word	0x08007514
 800030c:	20000124 	.word	0x20000124
 8000310:	08007484 	.word	0x08007484
 8000314:	08000609 	.word	0x08000609
 8000318:	20000114 	.word	0x20000114
 800031c:	080074a8 	.word	0x080074a8
 8000320:	08000665 	.word	0x08000665
 8000324:	20000118 	.word	0x20000118
 8000328:	080074cc 	.word	0x080074cc
 800032c:	080006b1 	.word	0x080006b1
 8000330:	2000011c 	.word	0x2000011c
 8000334:	080074f0 	.word	0x080074f0
 8000338:	080006ed 	.word	0x080006ed
 800033c:	20000120 	.word	0x20000120

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b090      	sub	sp, #64	; 0x40
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	2228      	movs	r2, #40	; 0x28
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f006 fbd4 	bl	8006afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000362:	2302      	movs	r3, #2
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	2301      	movs	r3, #1
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036a:	2310      	movs	r3, #16
 800036c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036e:	2302      	movs	r3, #2
 8000370:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000372:	2300      	movs	r3, #0
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000376:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fe3d 	bl	8001000 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800038c:	f000 f9dc 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fe66 	bl	800207c <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003b6:	f000 f9c7 	bl	8000748 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <MX_USART2_UART_Init+0x5c>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000408:	f002 fb3c 	bl	8002a84 <HAL_UART_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000412:	f000 f999 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000090 	.word	0x20000090
 8000420:	40004400 	.word	0x40004400

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	; 0x28
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b41      	ldr	r3, [pc, #260]	; (8000540 <MX_GPIO_Init+0x11c>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a40      	ldr	r2, [pc, #256]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000452:	4b3b      	ldr	r3, [pc, #236]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a3a      	ldr	r2, [pc, #232]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b38      	ldr	r3, [pc, #224]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b35      	ldr	r3, [pc, #212]	; (8000540 <MX_GPIO_Init+0x11c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a34      	ldr	r2, [pc, #208]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b32      	ldr	r3, [pc, #200]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7148 	mov.w	r1, #800	; 0x320
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 fd62 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2120      	movs	r1, #32
 80004ac:	4825      	ldr	r0, [pc, #148]	; (8000544 <MX_GPIO_Init+0x120>)
 80004ae:	f000 fd5d 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	481f      	ldr	r0, [pc, #124]	; (8000548 <MX_GPIO_Init+0x124>)
 80004ca:	f000 fbdd 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80004ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80004d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2300      	movs	r3, #0
 80004de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4619      	mov	r1, r3
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ea:	f000 fbcd 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f000 fbbe 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800050c:	2320      	movs	r3, #32
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	4808      	ldr	r0, [pc, #32]	; (8000544 <MX_GPIO_Init+0x120>)
 8000524:	f000 fbb0 	bl	8000c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2105      	movs	r1, #5
 800052c:	2028      	movs	r0, #40	; 0x28
 800052e:	f000 fb81 	bl	8000c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000532:	2028      	movs	r0, #40	; 0x28
 8000534:	f000 fb9a 	bl	8000c6c <HAL_NVIC_EnableIRQ>

}
 8000538:	bf00      	nop
 800053a:	3728      	adds	r7, #40	; 0x28
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	48000400 	.word	0x48000400
 8000548:	48000800 	.word	0x48000800

0800054c <display>:

/* USER CODE BEGIN 4 */

// function that will send messages through UART and can be seen on USB
void display(char *message)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe3b 	bl	80001d0 <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	b29a      	uxth	r2, r3
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <display+0x28>)
 8000566:	f002 fadb 	bl	8002b20 <HAL_UART_Transmit>
	//38400
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000090 	.word	0x20000090

08000578 <display_num>:
void display_num(uint8_t num)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	char buf[10];
	sprintf(buf, "%li \r\n", num);
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	490a      	ldr	r1, [pc, #40]	; (80005b4 <display_num+0x3c>)
 800058a:	4618      	mov	r0, r3
 800058c:	f006 fabe 	bl	8006b0c <siprintf>
	HAL_UART_Transmit(&huart2, &buf, strlen(buf), HAL_MAX_DELAY);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fe1b 	bl	80001d0 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	f107 010c 	add.w	r1, r7, #12
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <display_num+0x40>)
 80005a8:	f002 faba 	bl	8002b20 <HAL_UART_Transmit>
	//38400
}
 80005ac:	bf00      	nop
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08007428 	.word	0x08007428
 80005b8:	20000090 	.word	0x20000090

080005bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005cc:	d104      	bne.n	80005d8 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		char *m = "Brown\r\n";
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_GPIO_EXTI_Callback+0x40>)
 80005d0:	60fb      	str	r3, [r7, #12]
		display(m);
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f7ff ffba 	bl	800054c <display>
	}

	if(GPIO_Pin == B1_Pin)
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005de:	d109      	bne.n	80005f4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		char *m = "Button\r\n";
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <HAL_GPIO_EXTI_Callback+0x44>)
 80005e2:	60bb      	str	r3, [r7, #8]
		display(m);
 80005e4:	68b8      	ldr	r0, [r7, #8]
 80005e6:	f7ff ffb1 	bl	800054c <display>
		osSemaphoreRelease(myBinarySem01Handle);
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_GPIO_EXTI_Callback+0x48>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f852 	bl	8003698 <osSemaphoreRelease>
	}
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08007430 	.word	0x08007430
 8000600:	08007438 	.word	0x08007438
 8000604:	20000128 	.word	0x20000128

08000608 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	char *m = "Default\r\n";
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <StartDefaultTask+0x54>)
 8000612:	60fb      	str	r3, [r7, #12]
	uint8_t x = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	72fb      	strb	r3, [r7, #11]
	// char m[5] = {'H', 'i', '\r', '\n', '\0'};

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f7ff ff97 	bl	800054c <display>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800061e:	2120      	movs	r1, #32
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 fcba 	bl	8000f9c <HAL_GPIO_TogglePin>

	  display_num(x);
 8000628:	7afb      	ldrb	r3, [r7, #11]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffa4 	bl	8000578 <display_num>

	  osMessageQueuePut(ToGreenHandle, &x, 0, 200);
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <StartDefaultTask+0x58>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	f107 010b 	add.w	r1, r7, #11
 8000638:	23c8      	movs	r3, #200	; 0xc8
 800063a:	2200      	movs	r2, #0
 800063c:	f003 f90a 	bl	8003854 <osMessageQueuePut>

	  if(++x>9)
 8000640:	7afb      	ldrb	r3, [r7, #11]
 8000642:	3301      	adds	r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	72fb      	strb	r3, [r7, #11]
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	2b09      	cmp	r3, #9
 800064c:	d901      	bls.n	8000652 <StartDefaultTask+0x4a>
	  {
		  x = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	72fb      	strb	r3, [r7, #11]
	  }

	  osDelay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f002 feef 	bl	8003438 <osDelay>
	  display(m);
 800065a:	e7dd      	b.n	8000618 <StartDefaultTask+0x10>
 800065c:	08007444 	.word	0x08007444
 8000660:	20000124 	.word	0x20000124

08000664 <StartGreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenTask */
void StartGreenTask(void *argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGreenTask */

	char *m = "Green\r\n";
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <StartGreenTask+0x44>)
 800066e:	60fb      	str	r3, [r7, #12]
	uint8_t res = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	72fb      	strb	r3, [r7, #11]

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f7ff ff69 	bl	800054c <display>

	  osMessageQueueGet(ToGreenHandle, &res, NULL, 1000);
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <StartGreenTask+0x48>)
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	f107 010b 	add.w	r1, r7, #11
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	2200      	movs	r2, #0
 8000688:	f003 f958 	bl	800393c <osMessageQueueGet>
	  // wait forever if you want to block the task when there is no data in the queue

	  if(res % 2 == 0)
 800068c:	7afb      	ldrb	r3, [r7, #11]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1ed      	bne.n	8000674 <StartGreenTask+0x10>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f000 fc7c 	bl	8000f9c <HAL_GPIO_TogglePin>
	  display(m);
 80006a4:	e7e6      	b.n	8000674 <StartGreenTask+0x10>
 80006a6:	bf00      	nop
 80006a8:	08007450 	.word	0x08007450
 80006ac:	20000124 	.word	0x20000124

080006b0 <StartYellowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYellowTask */
void StartYellowTask(void *argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYellowTask */

	char *m = "Yellow\r\n";
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <StartYellowTask+0x30>)
 80006ba:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreRelease(myBinarySem01Handle);
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <StartYellowTask+0x34>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 ffe9 	bl	8003698 <osSemaphoreRelease>
	  display(m);
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f7ff ff40 	bl	800054c <display>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80006cc:	2120      	movs	r1, #32
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <StartYellowTask+0x38>)
 80006d0:	f000 fc64 	bl	8000f9c <HAL_GPIO_TogglePin>

	  osDelay(4000);
 80006d4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80006d8:	f002 feae 	bl	8003438 <osDelay>
	  osSemaphoreRelease(myBinarySem01Handle);
 80006dc:	e7ee      	b.n	80006bc <StartYellowTask+0xc>
 80006de:	bf00      	nop
 80006e0:	08007458 	.word	0x08007458
 80006e4:	20000128 	.word	0x20000128
 80006e8:	48000400 	.word	0x48000400

080006ec <StartBlue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlue */
void StartBlue(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlue */

	char *m = "Blue\r\n";
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <StartBlue+0x30>)
 80006f6:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {

	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <StartBlue+0x34>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	4618      	mov	r0, r3
 8000702:	f002 ff63 	bl	80035cc <osSemaphoreAcquire>

	display(m);
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ff20 	bl	800054c <display>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800070c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f000 fc42 	bl	8000f9c <HAL_GPIO_TogglePin>
	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8000718:	e7ee      	b.n	80006f8 <StartBlue+0xc>
 800071a:	bf00      	nop
 800071c:	08007464 	.word	0x08007464
 8000720:	20000128 	.word	0x20000128

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000736:	f000 f9a5 	bl	8000a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40001000 	.word	0x40001000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_MspInit+0x4c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_MspInit+0x4c>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_MspInit+0x4c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_MspInit+0x4c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	f06f 0001 	mvn.w	r0, #1
 8000792:	f000 fa4f 	bl	8000c34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <HAL_UART_MspInit+0x7c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d128      	bne.n	8000818 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f6:	230c      	movs	r3, #12
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000806:	2307      	movs	r3, #7
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fa38 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40004400 	.word	0x40004400
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	; 0x38
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000838:	4b33      	ldr	r3, [pc, #204]	; (8000908 <HAL_InitTick+0xe0>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	4a32      	ldr	r2, [pc, #200]	; (8000908 <HAL_InitTick+0xe0>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	61d3      	str	r3, [r2, #28]
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <HAL_InitTick+0xe0>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000850:	f107 0210 	add.w	r2, r7, #16
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fe44 	bl	80024e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	2b00      	cmp	r3, #0
 8000868:	d103      	bne.n	8000872 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800086a:	f001 fdf9 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 800086e:	6378      	str	r0, [r7, #52]	; 0x34
 8000870:	e004      	b.n	800087c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000872:	f001 fdf5 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8000876:	4603      	mov	r3, r0
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <HAL_InitTick+0xe4>)
 8000880:	fba2 2303 	umull	r2, r3, r2, r3
 8000884:	0c9b      	lsrs	r3, r3, #18
 8000886:	3b01      	subs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_InitTick+0xe8>)
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <HAL_InitTick+0xec>)
 800088e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_InitTick+0xe8>)
 8000892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000896:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000898:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <HAL_InitTick+0xe8>)
 800089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0xe8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_InitTick+0xe8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_InitTick+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008b0:	4817      	ldr	r0, [pc, #92]	; (8000910 <HAL_InitTick+0xe8>)
 80008b2:	f001 fe4b 	bl	800254c <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d11b      	bne.n	80008fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008c4:	4812      	ldr	r0, [pc, #72]	; (8000910 <HAL_InitTick+0xe8>)
 80008c6:	f001 fea3 	bl	8002610 <HAL_TIM_Base_Start_IT>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d111      	bne.n	80008fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80008d8:	2036      	movs	r0, #54	; 0x36
 80008da:	f000 f9c7 	bl	8000c6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d808      	bhi.n	80008f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	2036      	movs	r0, #54	; 0x36
 80008ea:	f000 f9a3 	bl	8000c34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_InitTick+0xf0>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	e002      	b.n	80008fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000900:	4618      	mov	r0, r3
 8000902:	3738      	adds	r7, #56	; 0x38
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	431bde83 	.word	0x431bde83
 8000910:	2000012c 	.word	0x2000012c
 8000914:	40001000 	.word	0x40001000
 8000918:	20000004 	.word	0x20000004

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800094c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000950:	f000 fb3e 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000954:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000958:	f000 fb3a 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM6_DAC1_IRQHandler+0x10>)
 8000966:	f001 feaf 	bl	80026c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000012c 	.word	0x2000012c

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f006 f872 	bl	8006a8c <__errno>
 80009a8:	4603      	mov	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20003000 	.word	0x20003000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	20000178 	.word	0x20000178
 80009dc:	20001ad8 	.word	0x20001ad8

080009e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f006 f831 	bl	8006a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fc23 	bl	8000280 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a3c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a48:	080075b0 	.word	0x080075b0
  ldr r2, =_sbss
 8000a4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a50:	20001ad8 	.word	0x20001ad8

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_Init+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_Init+0x28>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f8d8 	bl	8000c1e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f7ff feda 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff fe6e 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	2000017c 	.word	0x2000017c

08000aac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	2000017c 	.word	0x2000017c

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff4c 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c46:	f7ff ff61 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff ffb1 	bl	8000bb8 <NVIC_EncodePriority>
 8000c56:	4602      	mov	r2, r0
 8000c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff80 	bl	8000b64 <__NVIC_SetPriority>
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff54 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e14e      	b.n	8000f36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8140 	beq.w	8000f30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	6939      	ldr	r1, [r7, #16]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 809a 	beq.w	8000f30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1dc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1d8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1d4>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e004      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4093      	lsls	r3, r2
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7a:	4937      	ldr	r1, [pc, #220]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f aea9 	bne.w	8000c98 <HAL_GPIO_Init+0x10>
  }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	48000800 	.word	0x48000800
 8000f64:	48000c00 	.word	0x48000c00
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43d9      	mvns	r1, r3
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fae4 	bl	80005bc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001006:	af00      	add	r7, sp, #0
 8001008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	f001 b823 	b.w	800206c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 817d 	beq.w	8001336 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800103c:	4bbc      	ldr	r3, [pc, #752]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b04      	cmp	r3, #4
 8001046:	d00c      	beq.n	8001062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001048:	4bb9      	ldr	r3, [pc, #740]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d15c      	bne.n	800110e <HAL_RCC_OscConfig+0x10e>
 8001054:	4bb6      	ldr	r3, [pc, #728]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d155      	bne.n	800110e <HAL_RCC_OscConfig+0x10e>
 8001062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001066:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x94>
 800108e:	4ba8      	ldr	r3, [pc, #672]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e015      	b.n	80010c0 <HAL_RCC_OscConfig+0xc0>
 8001094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010bc:	4b9c      	ldr	r3, [pc, #624]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010cc:	fa92 f2a2 	rbit	r2, r2
 80010d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010d8:	fab2 f282 	clz	r2, r2
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f002 021f 	and.w	r2, r2, #31
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 811f 	beq.w	8001334 <HAL_RCC_OscConfig+0x334>
 80010f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 8116 	bne.w	8001334 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	f000 bfaf 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x12e>
 8001120:	4b83      	ldr	r3, [pc, #524]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a82      	ldr	r2, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e036      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 800112e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x158>
 800113e:	4b7c      	ldr	r3, [pc, #496]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a7b      	ldr	r2, [pc, #492]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b79      	ldr	r3, [pc, #484]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a78      	ldr	r2, [pc, #480]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e021      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 8001158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x184>
 800116a:	4b71      	ldr	r3, [pc, #452]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a70      	ldr	r2, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6e      	ldr	r3, [pc, #440]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6d      	ldr	r2, [pc, #436]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 8001184:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a69      	ldr	r2, [pc, #420]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b67      	ldr	r3, [pc, #412]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a66      	ldr	r2, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	f023 020f 	bic.w	r2, r3, #15
 80011a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	495f      	ldr	r1, [pc, #380]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d059      	beq.n	800127a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fc71 	bl	8000aac <HAL_GetTick>
 80011ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fc6c 	bl	8000aac <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d902      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f000 bf43 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80011e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x218>
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	e015      	b.n	8001244 <HAL_RCC_OscConfig+0x244>
 8001218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800122c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001230:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001234:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001240:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001248:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800124c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001250:	fa92 f2a2 	rbit	r2, r2
 8001254:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001258:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f002 021f 	and.w	r2, r2, #31
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ab      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1d0>
 8001278:	e05d      	b.n	8001336 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fc17 	bl	8000aac <HAL_GetTick>
 800127e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	e00a      	b.n	800129a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fc12 	bl	8000aac <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d902      	bls.n	800129a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	f000 bee9 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 800129a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80012ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_OscConfig+0x2cc>
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	e015      	b.n	80012f8 <HAL_RCC_OscConfig+0x2f8>
 80012cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001300:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001304:	fa92 f2a2 	rbit	r2, r2
 8001308:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800130c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001310:	fab2 f282 	clz	r2, r2
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	f042 0220 	orr.w	r2, r2, #32
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	f002 021f 	and.w	r2, r2, #31
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1ab      	bne.n	8001284 <HAL_RCC_OscConfig+0x284>
 800132c:	e003      	b.n	8001336 <HAL_RCC_OscConfig+0x336>
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 817d 	beq.w	8001646 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800134c:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001358:	4ba3      	ldr	r3, [pc, #652]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d172      	bne.n	800144a <HAL_RCC_OscConfig+0x44a>
 8001364:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d16c      	bne.n	800144a <HAL_RCC_OscConfig+0x44a>
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001382:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d102      	bne.n	80013a0 <HAL_RCC_OscConfig+0x3a0>
 800139a:	4b93      	ldr	r3, [pc, #588]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	e013      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c8>
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013c4:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2202      	movs	r2, #2
 80013ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80013ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013d2:	fa92 f2a2 	rbit	r2, r2
 80013d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013de:	fab2 f282 	clz	r2, r2
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	f042 0220 	orr.w	r2, r2, #32
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f002 021f 	and.w	r2, r2, #31
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <HAL_RCC_OscConfig+0x410>
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d002      	beq.n	8001410 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	f000 be2e 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b75      	ldr	r3, [pc, #468]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	21f8      	movs	r1, #248	; 0xf8
 8001426:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800142e:	fa91 f1a1 	rbit	r1, r1
 8001432:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001436:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800143a:	fab1 f181 	clz	r1, r1
 800143e:	b2c9      	uxtb	r1, r1
 8001440:	408b      	lsls	r3, r1
 8001442:	4969      	ldr	r1, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001448:	e0fd      	b.n	8001646 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8088 	beq.w	800156c <HAL_RCC_OscConfig+0x56c>
 800145c:	2301      	movs	r3, #1
 800145e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800146e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800147c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	461a      	mov	r2, r3
 8001484:	2301      	movs	r3, #1
 8001486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fb10 	bl	8000aac <HAL_GetTick>
 800148c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fb0b 	bl	8000aac <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d902      	bls.n	80014a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f000 bde2 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80014ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4d8>
 80014d2:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	e013      	b.n	8001500 <HAL_RCC_OscConfig+0x500>
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	2202      	movs	r2, #2
 8001502:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001506:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800150a:	fa92 f2a2 	rbit	r2, r2
 800150e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001512:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f002 021f 	and.w	r2, r2, #31
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0af      	beq.n	8001492 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	21f8      	movs	r1, #248	; 0xf8
 8001548:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001550:	fa91 f1a1 	rbit	r1, r1
 8001554:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001558:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800155c:	fab1 f181 	clz	r1, r1
 8001560:	b2c9      	uxtb	r1, r1
 8001562:	408b      	lsls	r3, r1
 8001564:	4920      	ldr	r1, [pc, #128]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
 800156a:	e06c      	b.n	8001646 <HAL_RCC_OscConfig+0x646>
 800156c:	2301      	movs	r3, #1
 800156e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800157e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800158c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	461a      	mov	r2, r3
 8001594:	2300      	movs	r3, #0
 8001596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fa88 	bl	8000aac <HAL_GetTick>
 800159c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa83 	bl	8000aac <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d902      	bls.n	80015b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	f000 bd5a 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80015ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	095b      	lsrs	r3, r3, #5
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d104      	bne.n	80015ec <HAL_RCC_OscConfig+0x5ec>
 80015e2:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	e015      	b.n	8001614 <HAL_RCC_OscConfig+0x614>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001610:	4bc8      	ldr	r3, [pc, #800]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2202      	movs	r2, #2
 8001616:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800161a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800161e:	fa92 f2a2 	rbit	r2, r2
 8001622:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001626:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800162a:	fab2 f282 	clz	r2, r2
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	f002 021f 	and.w	r2, r2, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ad      	bne.n	80015a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8110 	beq.w	800187c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d079      	beq.n	8001760 <HAL_RCC_OscConfig+0x760>
 800166c:	2301      	movs	r3, #1
 800166e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800167e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	4bab      	ldr	r3, [pc, #684]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	461a      	mov	r2, r3
 8001692:	2301      	movs	r3, #1
 8001694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fa09 	bl	8000aac <HAL_GetTick>
 800169a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fa04 	bl	8000aac <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d902      	bls.n	80016b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f000 bcdb 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016d0:	2202      	movs	r2, #2
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016f4:	2202      	movs	r2, #2
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f2a3 	rbit	r2, r3
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800170e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001710:	4b88      	ldr	r3, [pc, #544]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800171c:	2102      	movs	r1, #2
 800171e:	6019      	str	r1, [r3, #0]
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f1a3 	rbit	r1, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001736:	6019      	str	r1, [r3, #0]
  return result;
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0a0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x6a0>
 800175e:	e08d      	b.n	800187c <HAL_RCC_OscConfig+0x87c>
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800178c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	461a      	mov	r2, r3
 800179e:	2300      	movs	r3, #0
 80017a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f983 	bl	8000aac <HAL_GetTick>
 80017a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff f97e 	bl	8000aac <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d902      	bls.n	80017c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	f000 bc55 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f2a3 	rbit	r2, r3
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800182c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800183a:	2102      	movs	r1, #2
 800183c:	6019      	str	r1, [r3, #0]
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f1a3 	rbit	r1, r3
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001854:	6019      	str	r1, [r3, #0]
  return result;
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d197      	bne.n	80017ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 81a1 	beq.w	8001bd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ae:	61d3      	str	r3, [r2, #28]
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11a      	bne.n	8001914 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7ff f8df 	bl	8000aac <HAL_GetTick>
 80018ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	e009      	b.n	8001908 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff f8da 	bl	8000aac <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e3b1      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ef      	beq.n	80018f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x940>
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a02      	ldr	r2, [pc, #8]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e03c      	b.n	80019ac <HAL_RCC_OscConfig+0x9ac>
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	10908120 	.word	0x10908120
 800193c:	40007000 	.word	0x40007000
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10c      	bne.n	800196a <HAL_RCC_OscConfig+0x96a>
 8001950:	4bc1      	ldr	r3, [pc, #772]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4ac0      	ldr	r2, [pc, #768]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	4bbe      	ldr	r3, [pc, #760]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4abd      	ldr	r2, [pc, #756]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	e020      	b.n	80019ac <HAL_RCC_OscConfig+0x9ac>
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x994>
 800197a:	4bb7      	ldr	r3, [pc, #732]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4ab6      	ldr	r2, [pc, #728]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	4bb4      	ldr	r3, [pc, #720]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4ab3      	ldr	r2, [pc, #716]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x9ac>
 8001994:	4bb0      	ldr	r3, [pc, #704]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4aaf      	ldr	r2, [pc, #700]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	4bad      	ldr	r3, [pc, #692]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4aac      	ldr	r2, [pc, #688]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8081 	beq.w	8001ac0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff f875 	bl	8000aac <HAL_GetTick>
 80019c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff f870 	bl	8000aac <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e345      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019e8:	2202      	movs	r2, #2
 80019ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a26:	601a      	str	r2, [r3, #0]
  return result;
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0xa4c>
 8001a46:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0xa74>
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a54:	2202      	movs	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	6011      	str	r1, [r2, #0]
 8001a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	fa92 f1a2 	rbit	r1, r2
 8001a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a96:	6011      	str	r1, [r2, #0]
  return result;
 8001a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	fab2 f282 	clz	r2, r2
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f002 021f 	and.w	r2, r2, #31
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d084      	beq.n	80019c8 <HAL_RCC_OscConfig+0x9c8>
 8001abe:	e07f      	b.n	8001bc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7fe fff4 	bl	8000aac <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7fe ffef 	bl	8000aac <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e2c4      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b0e:	2202      	movs	r2, #2
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b28:	601a      	str	r2, [r3, #0]
  return result;
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0xb4e>
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	e013      	b.n	8001b76 <HAL_RCC_OscConfig+0xb76>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b56:	2202      	movs	r2, #2
 8001b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b7e:	2102      	movs	r1, #2
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	fa92 f1a2 	rbit	r1, r2
 8001b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b98:	6011      	str	r1, [r2, #0]
  return result;
 8001b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d184      	bne.n	8001aca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8242 	beq.w	800206a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	f000 8213 	beq.w	800201a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f040 8162 	bne.w	8001eca <HAL_RCC_OscConfig+0xeca>
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ff2e 	bl	8000aac <HAL_GetTick>
 8001c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	e00c      	b.n	8001c70 <HAL_RCC_OscConfig+0xc70>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe ff26 	bl	8000aac <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1fd      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c94:	601a      	str	r2, [r3, #0]
  return result;
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_OscConfig+0xcba>
 8001cb4:	4bb0      	ldr	r3, [pc, #704]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	e027      	b.n	8001d0a <HAL_RCC_OscConfig+0xd0a>
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	4b9c      	ldr	r3, [pc, #624]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d16:	6011      	str	r1, [r2, #0]
 8001d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	fa92 f1a2 	rbit	r1, r2
 8001d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d2e:	6011      	str	r1, [r2, #0]
  return result;
 8001d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	fab2 f282 	clz	r2, r2
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f002 021f 	and.w	r2, r2, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d182      	bne.n	8001c5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	497f      	ldr	r1, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001da2:	601a      	str	r2, [r3, #0]
  return result;
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fe72 	bl	8000aac <HAL_GetTick>
 8001dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe fe6d 	bl	8000aac <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e144      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e06:	601a      	str	r2, [r3, #0]
  return result;
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_RCC_OscConfig+0xe2c>
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	e027      	b.n	8001e7c <HAL_RCC_OscConfig+0xe7c>
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e88:	6011      	str	r1, [r2, #0]
 8001e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	fa92 f1a2 	rbit	r1, r2
 8001e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ea0:	6011      	str	r1, [r2, #0]
  return result;
 8001ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d082      	beq.n	8001dce <HAL_RCC_OscConfig+0xdce>
 8001ec8:	e0cf      	b.n	800206a <HAL_RCC_OscConfig+0x106a>
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001eee:	601a      	str	r2, [r3, #0]
  return result;
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ef8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fdcc 	bl	8000aac <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fdc7 	bl	8000aac <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e09e      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f52:	601a      	str	r2, [r3, #0]
  return result;
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d104      	bne.n	8001f7c <HAL_RCC_OscConfig+0xf7c>
 8001f72:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e029      	b.n	8001fcc <HAL_RCC_OscConfig+0xfcc>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_OscConfig+0x1078>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd8:	6011      	str	r1, [r2, #0]
 8001fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	fa92 f1a2 	rbit	r1, r2
 8001fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ff0:	6011      	str	r1, [r2, #0]
  return result;
 8001ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d180      	bne.n	8001f1a <HAL_RCC_OscConfig+0xf1a>
 8002018:	e027      	b.n	800206a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e01e      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_OscConfig+0x1078>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800203a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	429a      	cmp	r2, r3
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800204e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b09e      	sub	sp, #120	; 0x78
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e162      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	498b      	ldr	r1, [pc, #556]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e14a      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	497f      	ldr	r1, [pc, #508]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80dc 	beq.w	80022a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d13c      	bne.n	8002172 <HAL_RCC_ClockConfig+0xf6>
 80020f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <HAL_RCC_ClockConfig+0xa6>
 800211c:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e00f      	b.n	8002142 <HAL_RCC_ClockConfig+0xc6>
 8002122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	667b      	str	r3, [r7, #100]	; 0x64
 8002130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002134:	663b      	str	r3, [r7, #96]	; 0x60
 8002136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800213e:	4b67      	ldr	r3, [pc, #412]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002146:	65ba      	str	r2, [r7, #88]	; 0x58
 8002148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800214a:	fa92 f2a2 	rbit	r2, r2
 800214e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f042 0220 	orr.w	r2, r2, #32
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f002 021f 	and.w	r2, r2, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d17b      	bne.n	8002266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0f3      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d13c      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x178>
 800217a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x128>
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	e00f      	b.n	80021c4 <HAL_RCC_ClockConfig+0x148>
 80021a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
 80021b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40
 80021b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80021ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d13a      	bne.n	8002266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b2      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
 80021f4:	2302      	movs	r3, #2
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d102      	bne.n	800221c <HAL_RCC_ClockConfig+0x1a0>
 8002216:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	e00d      	b.n	8002238 <HAL_RCC_ClockConfig+0x1bc>
 800221c:	2302      	movs	r3, #2
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2202      	movs	r2, #2
 800223a:	61ba      	str	r2, [r7, #24]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	fa92 f2a2 	rbit	r2, r2
 8002242:	617a      	str	r2, [r7, #20]
  return result;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	fab2 f282 	clz	r2, r2
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f042 0220 	orr.w	r2, r2, #32
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	f002 021f 	and.w	r2, r2, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f202 	lsl.w	r2, r1, r2
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e079      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	491a      	ldr	r1, [pc, #104]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7fe fc18 	bl	8000aac <HAL_GetTick>
 800227c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7fe fc14 	bl	8000aac <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e061      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d214      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4906      	ldr	r1, [pc, #24]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e040      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4912      	ldr	r1, [pc, #72]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800231e:	f000 f829 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002322:	4601      	mov	r1, r0
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232c:	22f0      	movs	r2, #240	; 0xf0
 800232e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	fa92 f2a2 	rbit	r2, r2
 8002336:	60fa      	str	r2, [r7, #12]
  return result;
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	40d3      	lsrs	r3, r2
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x2ec>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	fa21 f303 	lsr.w	r3, r1, r3
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_RCC_ClockConfig+0x2f0>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_ClockConfig+0x2f4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fa68 	bl	8000828 <HAL_InitTick>
  
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3778      	adds	r7, #120	; 0x78
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	0800753c 	.word	0x0800753c
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b08b      	sub	sp, #44	; 0x2c
 8002378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x30>
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x36>
 80023a2:	e03c      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023a6:	623b      	str	r3, [r7, #32]
      break;
 80023a8:	e03c      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	fa92 f2a2 	rbit	r2, r2
 80023bc:	607a      	str	r2, [r7, #4]
  return result;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	40d3      	lsrs	r3, r2
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	220f      	movs	r2, #15
 80023d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	60fa      	str	r2, [r7, #12]
  return result;
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	40d3      	lsrs	r3, r2
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	fbb2 f2f3 	udiv	r2, r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	e004      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	623b      	str	r3, [r7, #32]
      break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002420:	623b      	str	r3, [r7, #32]
      break;
 8002422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002424:	6a3b      	ldr	r3, [r7, #32]
}
 8002426:	4618      	mov	r0, r3
 8002428:	372c      	adds	r7, #44	; 0x2c
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	007a1200 	.word	0x007a1200
 800243c:	08007554 	.word	0x08007554
 8002440:	08007564 	.word	0x08007564
 8002444:	003d0900 	.word	0x003d0900

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_GetHCLKFreq+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000000 	.word	0x20000000

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002466:	f7ff ffef 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 800246a:	4601      	mov	r1, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002474:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	fa92 f2a2 	rbit	r2, r2
 8002480:	603a      	str	r2, [r7, #0]
  return result;
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	40d3      	lsrs	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800248e:	5cd3      	ldrb	r3, [r2, r3]
 8002490:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	0800754c 	.word	0x0800754c

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024aa:	f7ff ffcd 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 80024ae:	4601      	mov	r1, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	fa92 f2a2 	rbit	r2, r2
 80024c4:	603a      	str	r2, [r7, #0]
  return result;
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	40d3      	lsrs	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	0800754c 	.word	0x0800754c

080024e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	220f      	movs	r2, #15
 80024f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_RCC_GetClockConfig+0x60>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0207 	and.w	r2, r3, #7
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	601a      	str	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40022000 	.word	0x40022000

0800254c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e049      	b.n	80025f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f841 	bl	80025fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f000 f9e4 	bl	8002958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d001      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e040      	b.n	80026aa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00e      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x58>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d009      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x58>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_TIM_Base_Start_IT+0xac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x58>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d115      	bne.n	8002694 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d015      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x96>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d011      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002692:	e008      	b.n	80026a6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e000      	b.n	80026a8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	00010007 	.word	0x00010007

080026c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d122      	bne.n	8002724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0202 	mvn.w	r2, #2
 80026f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f905 	bl	800291a <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8f7 	bl	8002906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f908 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0204 	mvn.w	r2, #4
 8002748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8db 	bl	800291a <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8cd 	bl	8002906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f8de 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b08      	cmp	r3, #8
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0208 	mvn.w	r2, #8
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2204      	movs	r2, #4
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8b1 	bl	800291a <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8a3 	bl	8002906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8b4 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0210 	mvn.w	r2, #16
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2208      	movs	r2, #8
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f887 	bl	800291a <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f879 	bl	8002906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f88a 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10e      	bne.n	800284c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0201 	mvn.w	r2, #1
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fd ff6c 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d10e      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d107      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8f2 	bl	8002a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002886:	d10e      	bne.n	80028a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b80      	cmp	r3, #128	; 0x80
 8002894:	d107      	bne.n	80028a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800289e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8e5 	bl	8002a70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d10e      	bne.n	80028d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d107      	bne.n	80028d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f838 	bl	8002942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d10e      	bne.n	80028fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d107      	bne.n	80028fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f06f 0220 	mvn.w	r2, #32
 80028f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8a5 	bl	8002a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a32      	ldr	r2, [pc, #200]	; (8002a34 <TIM_Base_SetConfig+0xdc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_Base_SetConfig+0x28>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d003      	beq.n	8002980 <TIM_Base_SetConfig+0x28>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a2f      	ldr	r2, [pc, #188]	; (8002a38 <TIM_Base_SetConfig+0xe0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d108      	bne.n	8002992 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <TIM_Base_SetConfig+0xdc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <TIM_Base_SetConfig+0x6a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d00f      	beq.n	80029c2 <TIM_Base_SetConfig+0x6a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <TIM_Base_SetConfig+0xe0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <TIM_Base_SetConfig+0x6a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <TIM_Base_SetConfig+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <TIM_Base_SetConfig+0x6a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <TIM_Base_SetConfig+0xe8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <TIM_Base_SetConfig+0x6a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <TIM_Base_SetConfig+0xec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d108      	bne.n	80029d4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <TIM_Base_SetConfig+0xdc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_Base_SetConfig+0xc0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <TIM_Base_SetConfig+0xe4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_Base_SetConfig+0xc0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <TIM_Base_SetConfig+0xe8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0xc0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <TIM_Base_SetConfig+0xec>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40014400 	.word	0x40014400
 8002a44:	40014800 	.word	0x40014800

08002a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e040      	b.n	8002b18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd fe7c 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8c0 	bl	8002c48 <UART_SetConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e022      	b.n	8002b18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f9ea 	bl	8002eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa71 	bl	8002ff8 <UART_CheckIdleState>
 8002b16:	4603      	mov	r3, r0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	f040 8082 	bne.w	8002c3e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_UART_Transmit+0x26>
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07a      	b.n	8002c40 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_UART_Transmit+0x38>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e073      	b.n	8002c40 <HAL_UART_Transmit+0x120>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2221      	movs	r2, #33	; 0x21
 8002b6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6e:	f7fd ff9d 	bl	8000aac <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x80>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002bb0:	e02d      	b.n	8002c0e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fa64 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e039      	b.n	8002c40 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bde:	b292      	uxth	r2, r2
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3302      	adds	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e008      	b.n	8002bfc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1cb      	bne.n	8002bb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2140      	movs	r1, #64	; 0x40
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fa30 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e005      	b.n	8002c40 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b8a      	ldr	r3, [pc, #552]	; (8002e9c <UART_SetConfig+0x254>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a78      	ldr	r2, [pc, #480]	; (8002ea0 <UART_SetConfig+0x258>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d120      	bne.n	8002d06 <UART_SetConfig+0xbe>
 8002cc4:	4b77      	ldr	r3, [pc, #476]	; (8002ea4 <UART_SetConfig+0x25c>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d817      	bhi.n	8002d00 <UART_SetConfig+0xb8>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <UART_SetConfig+0x90>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cf5 	.word	0x08002cf5
 8002ce0:	08002cfb 	.word	0x08002cfb
 8002ce4:	08002cef 	.word	0x08002cef
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e01d      	b.n	8002d2a <UART_SetConfig+0xe2>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e01a      	b.n	8002d2a <UART_SetConfig+0xe2>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e017      	b.n	8002d2a <UART_SetConfig+0xe2>
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e014      	b.n	8002d2a <UART_SetConfig+0xe2>
 8002d00:	2310      	movs	r3, #16
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	e011      	b.n	8002d2a <UART_SetConfig+0xe2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a67      	ldr	r2, [pc, #412]	; (8002ea8 <UART_SetConfig+0x260>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <UART_SetConfig+0xce>
 8002d10:	2300      	movs	r3, #0
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	e009      	b.n	8002d2a <UART_SetConfig+0xe2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a64      	ldr	r2, [pc, #400]	; (8002eac <UART_SetConfig+0x264>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d102      	bne.n	8002d26 <UART_SetConfig+0xde>
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e001      	b.n	8002d2a <UART_SetConfig+0xe2>
 8002d26:	2310      	movs	r3, #16
 8002d28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d32:	d15b      	bne.n	8002dec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002d34:	7ffb      	ldrb	r3, [r7, #31]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d827      	bhi.n	8002d8a <UART_SetConfig+0x142>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <UART_SetConfig+0xf8>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08002d6d 	.word	0x08002d6d
 8002d48:	08002d75 	.word	0x08002d75
 8002d4c:	08002d8b 	.word	0x08002d8b
 8002d50:	08002d7b 	.word	0x08002d7b
 8002d54:	08002d8b 	.word	0x08002d8b
 8002d58:	08002d8b 	.word	0x08002d8b
 8002d5c:	08002d8b 	.word	0x08002d8b
 8002d60:	08002d83 	.word	0x08002d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d64:	f7ff fb7c 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8002d68:	61b8      	str	r0, [r7, #24]
        break;
 8002d6a:	e013      	b.n	8002d94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d6c:	f7ff fb9a 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8002d70:	61b8      	str	r0, [r7, #24]
        break;
 8002d72:	e00f      	b.n	8002d94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d74:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <UART_SetConfig+0x268>)
 8002d76:	61bb      	str	r3, [r7, #24]
        break;
 8002d78:	e00c      	b.n	8002d94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7a:	f7ff fafb 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002d7e:	61b8      	str	r0, [r7, #24]
        break;
 8002d80:	e008      	b.n	8002d94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d86:	61bb      	str	r3, [r7, #24]
        break;
 8002d88:	e004      	b.n	8002d94 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	77bb      	strb	r3, [r7, #30]
        break;
 8002d92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d074      	beq.n	8002e84 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	005a      	lsls	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d916      	bls.n	8002de6 <UART_SetConfig+0x19e>
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbe:	d212      	bcs.n	8002de6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f023 030f 	bic.w	r3, r3, #15
 8002dc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	89fb      	ldrh	r3, [r7, #14]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	89fa      	ldrh	r2, [r7, #14]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	e04e      	b.n	8002e84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	77bb      	strb	r3, [r7, #30]
 8002dea:	e04b      	b.n	8002e84 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dec:	7ffb      	ldrb	r3, [r7, #31]
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d827      	bhi.n	8002e42 <UART_SetConfig+0x1fa>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <UART_SetConfig+0x1b0>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e1d 	.word	0x08002e1d
 8002dfc:	08002e25 	.word	0x08002e25
 8002e00:	08002e2d 	.word	0x08002e2d
 8002e04:	08002e43 	.word	0x08002e43
 8002e08:	08002e33 	.word	0x08002e33
 8002e0c:	08002e43 	.word	0x08002e43
 8002e10:	08002e43 	.word	0x08002e43
 8002e14:	08002e43 	.word	0x08002e43
 8002e18:	08002e3b 	.word	0x08002e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f7ff fb20 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8002e20:	61b8      	str	r0, [r7, #24]
        break;
 8002e22:	e013      	b.n	8002e4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e24:	f7ff fb3e 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8002e28:	61b8      	str	r0, [r7, #24]
        break;
 8002e2a:	e00f      	b.n	8002e4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e2c:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <UART_SetConfig+0x268>)
 8002e2e:	61bb      	str	r3, [r7, #24]
        break;
 8002e30:	e00c      	b.n	8002e4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e32:	f7ff fa9f 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002e36:	61b8      	str	r0, [r7, #24]
        break;
 8002e38:	e008      	b.n	8002e4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3e:	61bb      	str	r3, [r7, #24]
        break;
 8002e40:	e004      	b.n	8002e4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	77bb      	strb	r3, [r7, #30]
        break;
 8002e4a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d018      	beq.n	8002e84 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	085a      	lsrs	r2, r3, #1
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d908      	bls.n	8002e80 <UART_SetConfig+0x238>
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d204      	bcs.n	8002e80 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e001      	b.n	8002e84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e90:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	efff69f3 	.word	0xefff69f3
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40004400 	.word	0x40004400
 8002eac:	40004800 	.word	0x40004800
 8002eb0:	007a1200 	.word	0x007a1200

08002eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01a      	beq.n	8002fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb2:	d10a      	bne.n	8002fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003008:	f7fd fd50 	bl	8000aac <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b08      	cmp	r3, #8
 800301a:	d10e      	bne.n	800303a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f82d 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e023      	b.n	8003082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d10e      	bne.n	8003066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f817 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e00d      	b.n	8003082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b09c      	sub	sp, #112	; 0x70
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309a:	e0a5      	b.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	f000 80a1 	beq.w	80031e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7fd fd01 	bl	8000aac <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <UART_WaitOnFlagUntilTimeout+0x32>
 80030b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d13e      	bne.n	800313a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80030ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030d0:	667b      	str	r3, [r7, #100]	; 0x64
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e6      	bne.n	80030bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3308      	adds	r3, #8
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	663b      	str	r3, [r7, #96]	; 0x60
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3308      	adds	r3, #8
 800310c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800310e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800311c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e067      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d04f      	beq.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003156:	d147      	bne.n	80031e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003160:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
 8003182:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e6      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3308      	adds	r3, #8
 800319a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	613b      	str	r3, [r7, #16]
   return(result);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3308      	adds	r3, #8
 80031b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031b4:	623a      	str	r2, [r7, #32]
 80031b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	69f9      	ldr	r1, [r7, #28]
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e010      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4013      	ands	r3, r2
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	429a      	cmp	r2, r3
 8003204:	f43f af4a 	beq.w	800309c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3770      	adds	r7, #112	; 0x70
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321a:	f3ef 8305 	mrs	r3, IPSR
 800321e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003220:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003226:	f3ef 8310 	mrs	r3, PRIMASK
 800322a:	607b      	str	r3, [r7, #4]
  return(result);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <osKernelInitialize+0x32>
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <osKernelInitialize+0x64>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d109      	bne.n	800324e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800323a:	f3ef 8311 	mrs	r3, BASEPRI
 800323e:	603b      	str	r3, [r7, #0]
  return(result);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003246:	f06f 0305 	mvn.w	r3, #5
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e00c      	b.n	8003268 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <osKernelInitialize+0x64>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d105      	bne.n	8003262 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003256:	4b08      	ldr	r3, [pc, #32]	; (8003278 <osKernelInitialize+0x64>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e002      	b.n	8003268 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
 8003266:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000180 	.word	0x20000180

0800327c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003282:	f3ef 8305 	mrs	r3, IPSR
 8003286:	60bb      	str	r3, [r7, #8]
  return(result);
 8003288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328e:	f3ef 8310 	mrs	r3, PRIMASK
 8003292:	607b      	str	r3, [r7, #4]
  return(result);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <osKernelStart+0x32>
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <osKernelStart+0x64>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d109      	bne.n	80032b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032a2:	f3ef 8311 	mrs	r3, BASEPRI
 80032a6:	603b      	str	r3, [r7, #0]
  return(result);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80032ae:	f06f 0305 	mvn.w	r3, #5
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e00e      	b.n	80032d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <osKernelStart+0x64>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <osKernelStart+0x64>)
 80032c0:	2202      	movs	r2, #2
 80032c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032c4:	f001 fe6e 	bl	8004fa4 <vTaskStartScheduler>
      stat = osOK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032d4:	68fb      	ldr	r3, [r7, #12]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000180 	.word	0x20000180

080032e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b092      	sub	sp, #72	; 0x48
 80032e8:	af04      	add	r7, sp, #16
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032f4:	f3ef 8305 	mrs	r3, IPSR
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 8094 	bne.w	800342a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003302:	f3ef 8310 	mrs	r3, PRIMASK
 8003306:	623b      	str	r3, [r7, #32]
  return(result);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 808d 	bne.w	800342a <osThreadNew+0x146>
 8003310:	4b48      	ldr	r3, [pc, #288]	; (8003434 <osThreadNew+0x150>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d106      	bne.n	8003326 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003318:	f3ef 8311 	mrs	r3, BASEPRI
 800331c:	61fb      	str	r3, [r7, #28]
  return(result);
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f040 8082 	bne.w	800342a <osThreadNew+0x146>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d07e      	beq.n	800342a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003330:	2318      	movs	r3, #24
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003334:	2300      	movs	r3, #0
 8003336:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003338:	f107 031b 	add.w	r3, r7, #27
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d045      	beq.n	80033d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <osThreadNew+0x74>
        name = attr->name;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <osThreadNew+0x9a>
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b38      	cmp	r3, #56	; 0x38
 8003370:	d805      	bhi.n	800337e <osThreadNew+0x9a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <osThreadNew+0x9e>
        return (NULL);
 800337e:	2300      	movs	r3, #0
 8003380:	e054      	b.n	800342c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <osThreadNew+0xd4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b5b      	cmp	r3, #91	; 0x5b
 80033a0:	d90a      	bls.n	80033b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <osThreadNew+0xd4>
        mem = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b6:	e010      	b.n	80033da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10c      	bne.n	80033da <osThreadNew+0xf6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <osThreadNew+0xf6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d104      	bne.n	80033da <osThreadNew+0xf6>
          mem = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d4:	e001      	b.n	80033da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d110      	bne.n	8003402 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033e8:	9202      	str	r2, [sp, #8]
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f001 fc08 	bl	8004c0c <xTaskCreateStatic>
 80033fc:	4603      	mov	r3, r0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e013      	b.n	800342a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d110      	bne.n	800342a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	b29a      	uxth	r2, r3
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f001 fc52 	bl	8004cc4 <xTaskCreate>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	d001      	beq.n	800342a <osThreadNew+0x146>
          hTask = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800342a:	697b      	ldr	r3, [r7, #20]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3738      	adds	r7, #56	; 0x38
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000180 	.word	0x20000180

08003438 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003440:	f3ef 8305 	mrs	r3, IPSR
 8003444:	613b      	str	r3, [r7, #16]
  return(result);
 8003446:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10f      	bne.n	800346c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344c:	f3ef 8310 	mrs	r3, PRIMASK
 8003450:	60fb      	str	r3, [r7, #12]
  return(result);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <osDelay+0x34>
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <osDelay+0x58>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d109      	bne.n	8003474 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003460:	f3ef 8311 	mrs	r3, BASEPRI
 8003464:	60bb      	str	r3, [r7, #8]
  return(result);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <osDelay+0x3c>
    stat = osErrorISR;
 800346c:	f06f 0305 	mvn.w	r3, #5
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e007      	b.n	8003484 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <osDelay+0x4c>
      vTaskDelay(ticks);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f001 fd5c 	bl	8004f3c <vTaskDelay>
    }
  }

  return (stat);
 8003484:	697b      	ldr	r3, [r7, #20]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000180 	.word	0x20000180

08003494 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	; 0x30
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a4:	f3ef 8305 	mrs	r3, IPSR
 80034a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80034aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8086 	bne.w	80035be <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b2:	f3ef 8310 	mrs	r3, PRIMASK
 80034b6:	617b      	str	r3, [r7, #20]
  return(result);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d17f      	bne.n	80035be <osSemaphoreNew+0x12a>
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <osSemaphoreNew+0x134>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d105      	bne.n	80034d2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034c6:	f3ef 8311 	mrs	r3, BASEPRI
 80034ca:	613b      	str	r3, [r7, #16]
  return(result);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d175      	bne.n	80035be <osSemaphoreNew+0x12a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d072      	beq.n	80035be <osSemaphoreNew+0x12a>
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d86e      	bhi.n	80035be <osSemaphoreNew+0x12a>
    mem = -1;
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
 80034e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <osSemaphoreNew+0x6e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b4f      	cmp	r3, #79	; 0x4f
 80034fa:	d902      	bls.n	8003502 <osSemaphoreNew+0x6e>
        mem = 1;
 80034fc:	2301      	movs	r3, #1
 80034fe:	623b      	str	r3, [r7, #32]
 8003500:	e00c      	b.n	800351c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <osSemaphoreNew+0x88>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <osSemaphoreNew+0x88>
          mem = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	e001      	b.n	800351c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d04c      	beq.n	80035be <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d128      	bne.n	800357c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10a      	bne.n	8003546 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2203      	movs	r2, #3
 8003536:	9200      	str	r2, [sp, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	2100      	movs	r1, #0
 800353c:	2001      	movs	r0, #1
 800353e:	f000 fbbf 	bl	8003cc0 <xQueueGenericCreateStatic>
 8003542:	6278      	str	r0, [r7, #36]	; 0x24
 8003544:	e005      	b.n	8003552 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003546:	2203      	movs	r2, #3
 8003548:	2100      	movs	r1, #0
 800354a:	2001      	movs	r0, #1
 800354c:	f000 fc2f 	bl	8003dae <xQueueGenericCreate>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d022      	beq.n	800359e <osSemaphoreNew+0x10a>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01f      	beq.n	800359e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800355e:	2300      	movs	r3, #0
 8003560:	2200      	movs	r2, #0
 8003562:	2100      	movs	r1, #0
 8003564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003566:	f000 fced 	bl	8003f44 <xQueueGenericSend>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d016      	beq.n	800359e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003572:	f001 f977 	bl	8004864 <vQueueDelete>
            hSemaphore = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e010      	b.n	800359e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d108      	bne.n	8003594 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	461a      	mov	r2, r3
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fc70 	bl	8003e70 <xQueueCreateCountingSemaphoreStatic>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24
 8003592:	e004      	b.n	800359e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fca1 	bl	8003ede <xQueueCreateCountingSemaphore>
 800359c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e001      	b.n	80035b6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80035b6:	69f9      	ldr	r1, [r7, #28]
 80035b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035ba:	f001 fa9f 	bl	8004afc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3728      	adds	r7, #40	; 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000180 	.word	0x20000180

080035cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80035e4:	f06f 0303 	mvn.w	r3, #3
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	e04b      	b.n	8003684 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ec:	f3ef 8305 	mrs	r3, IPSR
 80035f0:	617b      	str	r3, [r7, #20]
  return(result);
 80035f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f8:	f3ef 8310 	mrs	r3, PRIMASK
 80035fc:	613b      	str	r3, [r7, #16]
  return(result);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <osSemaphoreAcquire+0x4c>
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <osSemaphoreAcquire+0xc4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d128      	bne.n	800365e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800360c:	f3ef 8311 	mrs	r3, BASEPRI
 8003610:	60fb      	str	r3, [r7, #12]
  return(result);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d022      	beq.n	800365e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800361e:	f06f 0303 	mvn.w	r3, #3
 8003622:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003624:	e02d      	b.n	8003682 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800362a:	f107 0308 	add.w	r3, r7, #8
 800362e:	461a      	mov	r2, r3
 8003630:	2100      	movs	r1, #0
 8003632:	69b8      	ldr	r0, [r7, #24]
 8003634:	f001 f896 	bl	8004764 <xQueueReceiveFromISR>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d003      	beq.n	8003646 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800363e:	f06f 0302 	mvn.w	r3, #2
 8003642:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003644:	e01d      	b.n	8003682 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01a      	beq.n	8003682 <osSemaphoreAcquire+0xb6>
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <osSemaphoreAcquire+0xc8>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800365c:	e011      	b.n	8003682 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	69b8      	ldr	r0, [r7, #24]
 8003662:	f000 ff73 	bl	800454c <xQueueSemaphoreTake>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d00b      	beq.n	8003684 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003672:	f06f 0301 	mvn.w	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e004      	b.n	8003684 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800367a:	f06f 0302 	mvn.w	r3, #2
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	e000      	b.n	8003684 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003682:	bf00      	nop
      }
    }
  }

  return (stat);
 8003684:	69fb      	ldr	r3, [r7, #28]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000180 	.word	0x20000180
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80036ae:	f06f 0303 	mvn.w	r3, #3
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	e03e      	b.n	8003734 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b6:	f3ef 8305 	mrs	r3, IPSR
 80036ba:	617b      	str	r3, [r7, #20]
  return(result);
 80036bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	613b      	str	r3, [r7, #16]
  return(result);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <osSemaphoreRelease+0x4a>
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <osSemaphoreRelease+0xa8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d120      	bne.n	8003718 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036d6:	f3ef 8311 	mrs	r3, BASEPRI
 80036da:	60fb      	str	r3, [r7, #12]
  return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01a      	beq.n	8003718 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	4619      	mov	r1, r3
 80036ec:	69b8      	ldr	r0, [r7, #24]
 80036ee:	f000 fdbf 	bl	8004270 <xQueueGiveFromISR>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d003      	beq.n	8003700 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80036f8:	f06f 0302 	mvn.w	r3, #2
 80036fc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80036fe:	e018      	b.n	8003732 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d015      	beq.n	8003732 <osSemaphoreRelease+0x9a>
 8003706:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <osSemaphoreRelease+0xac>)
 8003708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003716:	e00c      	b.n	8003732 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003718:	2300      	movs	r3, #0
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	69b8      	ldr	r0, [r7, #24]
 8003720:	f000 fc10 	bl	8003f44 <xQueueGenericSend>
 8003724:	4603      	mov	r3, r0
 8003726:	2b01      	cmp	r3, #1
 8003728:	d004      	beq.n	8003734 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800372a:	f06f 0302 	mvn.w	r3, #2
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	e000      	b.n	8003734 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003732:	bf00      	nop
    }
  }

  return (stat);
 8003734:	69fb      	ldr	r3, [r7, #28]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000180 	.word	0x20000180
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b08c      	sub	sp, #48	; 0x30
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	61bb      	str	r3, [r7, #24]
  return(result);
 800375e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003760:	2b00      	cmp	r3, #0
 8003762:	d16f      	bne.n	8003844 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8310 	mrs	r3, PRIMASK
 8003768:	617b      	str	r3, [r7, #20]
  return(result);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d169      	bne.n	8003844 <osMessageQueueNew+0xfc>
 8003770:	4b37      	ldr	r3, [pc, #220]	; (8003850 <osMessageQueueNew+0x108>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d105      	bne.n	8003784 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003778:	f3ef 8311 	mrs	r3, BASEPRI
 800377c:	613b      	str	r3, [r7, #16]
  return(result);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d15f      	bne.n	8003844 <osMessageQueueNew+0xfc>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d05c      	beq.n	8003844 <osMessageQueueNew+0xfc>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d059      	beq.n	8003844 <osMessageQueueNew+0xfc>
    mem = -1;
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d029      	beq.n	80037f0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d012      	beq.n	80037ca <osMessageQueueNew+0x82>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b4f      	cmp	r3, #79	; 0x4f
 80037aa:	d90e      	bls.n	80037ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <osMessageQueueNew+0x82>
        mem = 1;
 80037c4:	2301      	movs	r3, #1
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	e014      	b.n	80037f4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d110      	bne.n	80037f4 <osMessageQueueNew+0xac>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10c      	bne.n	80037f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d104      	bne.n	80037f4 <osMessageQueueNew+0xac>
          mem = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	e001      	b.n	80037f4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10b      	bne.n	8003812 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2100      	movs	r1, #0
 8003804:	9100      	str	r1, [sp, #0]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fa59 	bl	8003cc0 <xQueueGenericCreateStatic>
 800380e:	6278      	str	r0, [r7, #36]	; 0x24
 8003810:	e008      	b.n	8003824 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003818:	2200      	movs	r2, #0
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fac6 	bl	8003dae <xQueueGenericCreate>
 8003822:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e001      	b.n	800383c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800383c:	69f9      	ldr	r1, [r7, #28]
 800383e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003840:	f001 f95c 	bl	8004afc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003846:	4618      	mov	r0, r3
 8003848:	3728      	adds	r7, #40	; 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000180 	.word	0x20000180

08003854 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003868:	2300      	movs	r3, #0
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800386c:	f3ef 8305 	mrs	r3, IPSR
 8003870:	61fb      	str	r3, [r7, #28]
  return(result);
 8003872:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10f      	bne.n	8003898 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	61bb      	str	r3, [r7, #24]
  return(result);
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <osMessageQueuePut+0x44>
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <osMessageQueuePut+0xe0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d12e      	bne.n	80038ea <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800388c:	f3ef 8311 	mrs	r3, BASEPRI
 8003890:	617b      	str	r3, [r7, #20]
  return(result);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d028      	beq.n	80038ea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <osMessageQueuePut+0x56>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <osMessageQueuePut+0x56>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80038aa:	f06f 0303 	mvn.w	r3, #3
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038b0:	e039      	b.n	8003926 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80038b6:	f107 0210 	add.w	r2, r7, #16
 80038ba:	2300      	movs	r3, #0
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6a38      	ldr	r0, [r7, #32]
 80038c0:	f000 fc3e 	bl	8004140 <xQueueGenericSendFromISR>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d003      	beq.n	80038d2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80038ca:	f06f 0302 	mvn.w	r3, #2
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038d0:	e029      	b.n	8003926 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d026      	beq.n	8003926 <osMessageQueuePut+0xd2>
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <osMessageQueuePut+0xe4>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038e8:	e01d      	b.n	8003926 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <osMessageQueuePut+0xa2>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80038f6:	f06f 0303 	mvn.w	r3, #3
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	e014      	b.n	8003928 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80038fe:	2300      	movs	r3, #0
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	6a38      	ldr	r0, [r7, #32]
 8003906:	f000 fb1d 	bl	8003f44 <xQueueGenericSend>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d00b      	beq.n	8003928 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003916:	f06f 0301 	mvn.w	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	e004      	b.n	8003928 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800391e:	f06f 0302 	mvn.w	r3, #2
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	e000      	b.n	8003928 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003926:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800392a:	4618      	mov	r0, r3
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000180 	.word	0x20000180
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003952:	f3ef 8305 	mrs	r3, IPSR
 8003956:	61fb      	str	r3, [r7, #28]
  return(result);
 8003958:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395e:	f3ef 8310 	mrs	r3, PRIMASK
 8003962:	61bb      	str	r3, [r7, #24]
  return(result);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <osMessageQueueGet+0x42>
 800396a:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <osMessageQueueGet+0xdc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d12e      	bne.n	80039d0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003972:	f3ef 8311 	mrs	r3, BASEPRI
 8003976:	617b      	str	r3, [r7, #20]
  return(result);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d028      	beq.n	80039d0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <osMessageQueueGet+0x54>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <osMessageQueueGet+0x54>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003990:	f06f 0303 	mvn.w	r3, #3
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003996:	e038      	b.n	8003a0a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	461a      	mov	r2, r3
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	6a38      	ldr	r0, [r7, #32]
 80039a6:	f000 fedd 	bl	8004764 <xQueueReceiveFromISR>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d003      	beq.n	80039b8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80039b0:	f06f 0302 	mvn.w	r3, #2
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039b6:	e028      	b.n	8003a0a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d025      	beq.n	8003a0a <osMessageQueueGet+0xce>
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <osMessageQueueGet+0xe0>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039ce:	e01c      	b.n	8003a0a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <osMessageQueueGet+0xa0>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80039dc:	f06f 0303 	mvn.w	r3, #3
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	e013      	b.n	8003a0c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	6a38      	ldr	r0, [r7, #32]
 80039ea:	f000 fccf 	bl	800438c <xQueueReceive>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d00b      	beq.n	8003a0c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80039fa:	f06f 0301 	mvn.w	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	e004      	b.n	8003a0c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003a02:	f06f 0302 	mvn.w	r3, #2
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
 8003a08:	e000      	b.n	8003a0c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000180 	.word	0x20000180
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <vApplicationGetIdleTaskMemory+0x30>)
 8003a36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000184 	.word	0x20000184
 8003a50:	200001e0 	.word	0x200001e0

08003a54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4a06      	ldr	r2, [pc, #24]	; (8003a84 <vApplicationGetTimerTaskMemory+0x30>)
 8003a6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	200003e0 	.word	0x200003e0
 8003a84:	2000043c 	.word	0x2000043c

08003a88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f103 0208 	add.w	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f103 0208 	add.w	r2, r3, #8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0208 	add.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d103      	bne.n	8003b4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e00c      	b.n	8003b64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e002      	b.n	8003b58 <vListInsert+0x2e>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d2f6      	bcs.n	8003b52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6852      	ldr	r2, [r2, #4]
 8003bbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d103      	bne.n	8003bd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1e5a      	subs	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c1a:	f002 fc3b 	bl	8006494 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	441a      	add	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	68f9      	ldr	r1, [r7, #12]
 8003c4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	441a      	add	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	22ff      	movs	r2, #255	; 0xff
 8003c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d114      	bne.n	8003c9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01a      	beq.n	8003cae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3310      	adds	r3, #16
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fc1f 	bl	80054c0 <xTaskRemoveFromEventList>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d012      	beq.n	8003cae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <xQueueGenericReset+0xcc>)
 8003c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	e009      	b.n	8003cae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fef2 	bl	8003a88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff feed 	bl	8003a88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cae:	f002 fc21 	bl	80064f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08e      	sub	sp, #56	; 0x38
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ce6:	bf00      	nop
 8003ce8:	e7fe      	b.n	8003ce8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <xQueueGenericCreateStatic+0x52>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <xQueueGenericCreateStatic+0x56>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <xQueueGenericCreateStatic+0x58>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	623b      	str	r3, [r7, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <xQueueGenericCreateStatic+0x7e>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <xQueueGenericCreateStatic+0x82>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <xQueueGenericCreateStatic+0x84>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	61fb      	str	r3, [r7, #28]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d5e:	2350      	movs	r3, #80	; 0x50
 8003d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b50      	cmp	r3, #80	; 0x50
 8003d66:	d00a      	beq.n	8003d7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	61bb      	str	r3, [r7, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f843 	bl	8003e2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3730      	adds	r7, #48	; 0x30
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b08a      	sub	sp, #40	; 0x28
 8003db2:	af02      	add	r7, sp, #8
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	613b      	str	r3, [r7, #16]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e004      	b.n	8003dee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3350      	adds	r3, #80	; 0x50
 8003df2:	4618      	mov	r0, r3
 8003df4:	f002 fc70 	bl	80066d8 <pvPortMalloc>
 8003df8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00f      	beq.n	8003e20 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	3350      	adds	r3, #80	; 0x50
 8003e04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e0e:	79fa      	ldrb	r2, [r7, #7]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f805 	bl	8003e2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e20:	69bb      	ldr	r3, [r7, #24]
	}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e002      	b.n	8003e4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e58:	2101      	movs	r1, #1
 8003e5a:	69b8      	ldr	r0, [r7, #24]
 8003e5c:	f7ff fec8 	bl	8003bf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	61bb      	str	r3, [r7, #24]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d90a      	bls.n	8003eb6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	617b      	str	r3, [r7, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fefd 	bl	8003cc0 <xQueueGenericCreateStatic>
 8003ec6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
	}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	613b      	str	r3, [r7, #16]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d90a      	bls.n	8003f22 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	60fb      	str	r3, [r7, #12]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003f22:	2202      	movs	r2, #2
 8003f24:	2100      	movs	r1, #0
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ff41 	bl	8003dae <xQueueGenericCreate>
 8003f2c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003f3a:	697b      	ldr	r3, [r7, #20]
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08e      	sub	sp, #56	; 0x38
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f52:	2300      	movs	r3, #0
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <xQueueGenericSend+0x32>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f72:	bf00      	nop
 8003f74:	e7fe      	b.n	8003f74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <xQueueGenericSend+0x40>
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <xQueueGenericSend+0x44>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <xQueueGenericSend+0x46>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <xQueueGenericSend+0x60>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d103      	bne.n	8003fb2 <xQueueGenericSend+0x6e>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <xQueueGenericSend+0x72>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <xQueueGenericSend+0x74>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	623b      	str	r3, [r7, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fd2:	f001 fc39 	bl	8005848 <xTaskGetSchedulerState>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <xQueueGenericSend+0x9e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSend+0xa2>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSend+0xa4>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xQueueGenericSend+0xbe>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	61fb      	str	r3, [r7, #28]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004002:	f002 fa47 	bl	8006494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	429a      	cmp	r2, r3
 8004010:	d302      	bcc.n	8004018 <xQueueGenericSend+0xd4>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d129      	bne.n	800406c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800401e:	f000 fc5c 	bl	80048da <prvCopyDataToQueue>
 8004022:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d010      	beq.n	800404e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	4618      	mov	r0, r3
 8004032:	f001 fa45 	bl	80054c0 <xTaskRemoveFromEventList>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800403c:	4b3f      	ldr	r3, [pc, #252]	; (800413c <xQueueGenericSend+0x1f8>)
 800403e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	e00a      	b.n	8004064 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004054:	4b39      	ldr	r3, [pc, #228]	; (800413c <xQueueGenericSend+0x1f8>)
 8004056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004064:	f002 fa46 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004068:	2301      	movs	r3, #1
 800406a:	e063      	b.n	8004134 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004072:	f002 fa3f 	bl	80064f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004076:	2300      	movs	r3, #0
 8004078:	e05c      	b.n	8004134 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4618      	mov	r0, r3
 8004086:	f001 fa7f 	bl	8005588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800408e:	f002 fa31 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004092:	f000 ffed 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004096:	f002 f9fd 	bl	8006494 <vPortEnterCritical>
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d103      	bne.n	80040b0 <xQueueGenericSend+0x16c>
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b6:	b25b      	sxtb	r3, r3
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d103      	bne.n	80040c6 <xQueueGenericSend+0x182>
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c6:	f002 fa15 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ca:	1d3a      	adds	r2, r7, #4
 80040cc:	f107 0314 	add.w	r3, r7, #20
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fa6e 	bl	80055b4 <xTaskCheckForTimeOut>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d124      	bne.n	8004128 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e0:	f000 fcf3 	bl	8004aca <prvIsQueueFull>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d018      	beq.n	800411c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	3310      	adds	r3, #16
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 f994 	bl	8005420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040fa:	f000 fc7e 	bl	80049fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040fe:	f000 ffc5 	bl	800508c <xTaskResumeAll>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	f47f af7c 	bne.w	8004002 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <xQueueGenericSend+0x1f8>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	e772      	b.n	8004002 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800411c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800411e:	f000 fc6c 	bl	80049fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004122:	f000 ffb3 	bl	800508c <xTaskResumeAll>
 8004126:	e76c      	b.n	8004002 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800412a:	f000 fc66 	bl	80049fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800412e:	f000 ffad 	bl	800508c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004132:	2300      	movs	r3, #0
		}
	}
}
 8004134:	4618      	mov	r0, r3
 8004136:	3738      	adds	r7, #56	; 0x38
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08e      	sub	sp, #56	; 0x38
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <xQueueGenericSendFromISR+0x3c>
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <xQueueGenericSendFromISR+0x40>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <xQueueGenericSendFromISR+0x42>
 8004180:	2300      	movs	r3, #0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	623b      	str	r3, [r7, #32]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d103      	bne.n	80041aa <xQueueGenericSendFromISR+0x6a>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <xQueueGenericSendFromISR+0x6e>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <xQueueGenericSendFromISR+0x70>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	61fb      	str	r3, [r7, #28]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041ca:	f002 fa45 	bl	8006658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041ce:	f3ef 8211 	mrs	r2, BASEPRI
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61ba      	str	r2, [r7, #24]
 80041e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <xQueueGenericSendFromISR+0xbc>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d12c      	bne.n	8004256 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420c:	f000 fb65 	bl	80048da <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004210:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d112      	bne.n	8004240 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	3324      	adds	r3, #36	; 0x24
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f94a 	bl	80054c0 <xTaskRemoveFromEventList>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00e      	beq.n	8004250 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e007      	b.n	8004250 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004244:	3301      	adds	r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	b25a      	sxtb	r2, r3
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004250:	2301      	movs	r3, #1
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004254:	e001      	b.n	800425a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004256:	2300      	movs	r3, #0
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004264:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004268:	4618      	mov	r0, r3
 800426a:	3738      	adds	r7, #56	; 0x38
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08e      	sub	sp, #56	; 0x38
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	623b      	str	r3, [r7, #32]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	61fb      	str	r3, [r7, #28]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d103      	bne.n	80042c8 <xQueueGiveFromISR+0x58>
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <xQueueGiveFromISR+0x5c>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <xQueueGiveFromISR+0x5e>
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <xQueueGiveFromISR+0x78>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	61bb      	str	r3, [r7, #24]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042e8:	f002 f9b6 	bl	8006658 <vPortValidateInterruptPriority>
	__asm volatile
 80042ec:	f3ef 8211 	mrs	r2, BASEPRI
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	617a      	str	r2, [r7, #20]
 8004302:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004304:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004314:	429a      	cmp	r2, r3
 8004316:	d22b      	bcs.n	8004370 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800432a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d112      	bne.n	800435a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	3324      	adds	r3, #36	; 0x24
 8004340:	4618      	mov	r0, r3
 8004342:	f001 f8bd 	bl	80054c0 <xTaskRemoveFromEventList>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e007      	b.n	800436a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800435a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800435e:	3301      	adds	r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	b25a      	sxtb	r2, r3
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800436a:	2301      	movs	r3, #1
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
 800436e:	e001      	b.n	8004374 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004370:	2300      	movs	r3, #0
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004382:	4618      	mov	r0, r3
 8004384:	3738      	adds	r7, #56	; 0x38
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	; 0x30
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <xQueueReceive+0x30>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	623b      	str	r3, [r7, #32]
}
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <xQueueReceive+0x3e>
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <xQueueReceive+0x42>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueReceive+0x44>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xQueueReceive+0x5e>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	61fb      	str	r3, [r7, #28]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ea:	f001 fa2d 	bl	8005848 <xTaskGetSchedulerState>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <xQueueReceive+0x6e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <xQueueReceive+0x72>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <xQueueReceive+0x74>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xQueueReceive+0x8e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	61bb      	str	r3, [r7, #24]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800441a:	f002 f83b 	bl	8006494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01f      	beq.n	800446a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442e:	f000 fabe 	bl	80049ae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00f      	beq.n	8004462 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	3310      	adds	r3, #16
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f83a 	bl	80054c0 <xTaskRemoveFromEventList>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004452:	4b3d      	ldr	r3, [pc, #244]	; (8004548 <xQueueReceive+0x1bc>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004462:	f002 f847 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004466:	2301      	movs	r3, #1
 8004468:	e069      	b.n	800453e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004470:	f002 f840 	bl	80064f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004474:	2300      	movs	r3, #0
 8004476:	e062      	b.n	800453e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800447e:	f107 0310 	add.w	r3, r7, #16
 8004482:	4618      	mov	r0, r3
 8004484:	f001 f880 	bl	8005588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800448c:	f002 f832 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004490:	f000 fdee 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004494:	f001 fffe 	bl	8006494 <vPortEnterCritical>
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800449e:	b25b      	sxtb	r3, r3
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d103      	bne.n	80044ae <xQueueReceive+0x122>
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d103      	bne.n	80044c4 <xQueueReceive+0x138>
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044c4:	f002 f816 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044c8:	1d3a      	adds	r2, r7, #4
 80044ca:	f107 0310 	add.w	r3, r7, #16
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f86f 	bl	80055b4 <xTaskCheckForTimeOut>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d123      	bne.n	8004524 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044de:	f000 fade 	bl	8004a9e <prvIsQueueEmpty>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d017      	beq.n	8004518 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	3324      	adds	r3, #36	; 0x24
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 ff95 	bl	8005420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f8:	f000 fa7f 	bl	80049fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044fc:	f000 fdc6 	bl	800508c <xTaskResumeAll>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d189      	bne.n	800441a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <xQueueReceive+0x1bc>)
 8004508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	e780      	b.n	800441a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451a:	f000 fa6e 	bl	80049fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800451e:	f000 fdb5 	bl	800508c <xTaskResumeAll>
 8004522:	e77a      	b.n	800441a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004526:	f000 fa68 	bl	80049fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800452a:	f000 fdaf 	bl	800508c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800452e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004530:	f000 fab5 	bl	8004a9e <prvIsQueueEmpty>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	f43f af6f 	beq.w	800441a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800453c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800453e:	4618      	mov	r0, r3
 8004540:	3730      	adds	r7, #48	; 0x30
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	623b      	str	r3, [r7, #32]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	61fb      	str	r3, [r7, #28]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800459c:	f001 f954 	bl	8005848 <xTaskGetSchedulerState>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <xQueueSemaphoreTake+0x60>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueSemaphoreTake+0x64>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueSemaphoreTake+0x66>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61bb      	str	r3, [r7, #24]
}
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80045cc:	f001 ff62 	bl	8006494 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d024      	beq.n	8004626 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	1e5a      	subs	r2, r3, #1
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80045ec:	f001 faac 	bl	8005b48 <pvTaskIncrementMutexHeldCount>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00f      	beq.n	800461e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	3310      	adds	r3, #16
 8004602:	4618      	mov	r0, r3
 8004604:	f000 ff5c 	bl	80054c0 <xTaskRemoveFromEventList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800460e:	4b54      	ldr	r3, [pc, #336]	; (8004760 <xQueueSemaphoreTake+0x214>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800461e:	f001 ff69 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004622:	2301      	movs	r3, #1
 8004624:	e097      	b.n	8004756 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d111      	bne.n	8004650 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	617b      	str	r3, [r7, #20]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004648:	f001 ff54 	bl	80064f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800464c:	2300      	movs	r3, #0
 800464e:	e082      	b.n	8004756 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ff94 	bl	8005588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004664:	f001 ff46 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004668:	f000 fd02 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800466c:	f001 ff12 	bl	8006494 <vPortEnterCritical>
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004676:	b25b      	sxtb	r3, r3
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d103      	bne.n	8004686 <xQueueSemaphoreTake+0x13a>
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800468c:	b25b      	sxtb	r3, r3
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d103      	bne.n	800469c <xQueueSemaphoreTake+0x150>
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800469c:	f001 ff2a 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046a0:	463a      	mov	r2, r7
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 ff83 	bl	80055b4 <xTaskCheckForTimeOut>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d132      	bne.n	800471a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046b6:	f000 f9f2 	bl	8004a9e <prvIsQueueEmpty>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d026      	beq.n	800470e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80046c8:	f001 fee4 	bl	8006494 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 f8d7 	bl	8005884 <xTaskPriorityInherit>
 80046d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80046d8:	f001 ff0c 	bl	80064f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	3324      	adds	r3, #36	; 0x24
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fe9b 	bl	8005420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046ec:	f000 f985 	bl	80049fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046f0:	f000 fccc 	bl	800508c <xTaskResumeAll>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f47f af68 	bne.w	80045cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <xQueueSemaphoreTake+0x214>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	e75e      	b.n	80045cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800470e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004710:	f000 f973 	bl	80049fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004714:	f000 fcba 	bl	800508c <xTaskResumeAll>
 8004718:	e758      	b.n	80045cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800471a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800471c:	f000 f96d 	bl	80049fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004720:	f000 fcb4 	bl	800508c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004726:	f000 f9ba 	bl	8004a9e <prvIsQueueEmpty>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	f43f af4d 	beq.w	80045cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004738:	f001 feac 	bl	8006494 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800473c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800473e:	f000 f8b4 	bl	80048aa <prvGetDisinheritPriorityAfterTimeout>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f976 	bl	8005a3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004750:	f001 fed0 	bl	80064f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004756:	4618      	mov	r0, r3
 8004758:	3738      	adds	r7, #56	; 0x38
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	; 0x38
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	623b      	str	r3, [r7, #32]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <xQueueReceiveFromISR+0x3a>
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <xQueueReceiveFromISR+0x3e>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <xQueueReceiveFromISR+0x40>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	61fb      	str	r3, [r7, #28]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047be:	f001 ff4b 	bl	8006658 <vPortValidateInterruptPriority>
	__asm volatile
 80047c2:	f3ef 8211 	mrs	r2, BASEPRI
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	61ba      	str	r2, [r7, #24]
 80047d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80047da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d02f      	beq.n	800484a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f8:	f000 f8d9 	bl	80049ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d112      	bne.n	8004834 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	3310      	adds	r3, #16
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fe50 	bl	80054c0 <xTaskRemoveFromEventList>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e007      	b.n	8004844 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004838:	3301      	adds	r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	b25a      	sxtb	r2, r3
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004844:	2301      	movs	r3, #1
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
 8004848:	e001      	b.n	800484e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f383 8811 	msr	BASEPRI, r3
}
 8004858:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800485c:	4618      	mov	r0, r3
 800485e:	3738      	adds	r7, #56	; 0x38
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <vQueueDelete+0x28>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f95f 	bl	8004b50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f001 ffdf 	bl	8006860 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e001      	b.n	80048cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048cc:	68fb      	ldr	r3, [r7, #12]
	}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d14d      	bne.n	800499c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f82b 	bl	8005960 <xTaskPriorityDisinherit>
 800490a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	e043      	b.n	800499c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d119      	bne.n	800494e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6898      	ldr	r0, [r3, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	461a      	mov	r2, r3
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	f002 f8db 	bl	8006ae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	441a      	add	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d32b      	bcc.n	800499c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	e026      	b.n	800499c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68d8      	ldr	r0, [r3, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	461a      	mov	r2, r3
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	f002 f8c1 	bl	8006ae0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	425b      	negs	r3, r3
 8004968:	441a      	add	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d207      	bcs.n	800498a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	425b      	negs	r3, r3
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d105      	bne.n	800499c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3b01      	subs	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049a4:	697b      	ldr	r3, [r7, #20]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d018      	beq.n	80049f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	441a      	add	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d303      	bcc.n	80049e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68d9      	ldr	r1, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	461a      	mov	r2, r3
 80049ec:	6838      	ldr	r0, [r7, #0]
 80049ee:	f002 f877 	bl	8006ae0 <memcpy>
	}
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a02:	f001 fd47 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a0e:	e011      	b.n	8004a34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fd4f 	bl	80054c0 <xTaskRemoveFromEventList>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a28:	f000 fe26 	bl	8005678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dce9      	bgt.n	8004a10 <prvUnlockQueue+0x16>
 8004a3c:	e000      	b.n	8004a40 <prvUnlockQueue+0x46>
					break;
 8004a3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a48:	f001 fd54 	bl	80064f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a4c:	f001 fd22 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a58:	e011      	b.n	8004a7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d012      	beq.n	8004a88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3310      	adds	r3, #16
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fd2a 	bl	80054c0 <xTaskRemoveFromEventList>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a72:	f000 fe01 	bl	8005678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a76:	7bbb      	ldrb	r3, [r7, #14]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	dce9      	bgt.n	8004a5a <prvUnlockQueue+0x60>
 8004a86:	e000      	b.n	8004a8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	22ff      	movs	r2, #255	; 0xff
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a92:	f001 fd2f 	bl	80064f4 <vPortExitCritical>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aa6:	f001 fcf5 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e001      	b.n	8004abc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004abc:	f001 fd1a 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ad2:	f001 fcdf 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d102      	bne.n	8004ae8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e001      	b.n	8004aec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aec:	f001 fd02 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004af0:	68fb      	ldr	r3, [r7, #12]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e014      	b.n	8004b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b0c:	4a0f      	ldr	r2, [pc, #60]	; (8004b4c <vQueueAddToRegistry+0x50>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10b      	bne.n	8004b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b18:	490c      	ldr	r1, [pc, #48]	; (8004b4c <vQueueAddToRegistry+0x50>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <vQueueAddToRegistry+0x50>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b2e:	e006      	b.n	8004b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b07      	cmp	r3, #7
 8004b3a:	d9e7      	bls.n	8004b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	2000083c 	.word	0x2000083c

08004b50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e016      	b.n	8004b8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <vQueueUnregisterQueue+0x50>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10b      	bne.n	8004b86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <vQueueUnregisterQueue+0x50>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2100      	movs	r1, #0
 8004b74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004b78:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <vQueueUnregisterQueue+0x50>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4413      	add	r3, r2
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
				break;
 8004b84:	e006      	b.n	8004b94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	d9e5      	bls.n	8004b5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	2000083c 	.word	0x2000083c

08004ba4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bb4:	f001 fc6e 	bl	8006494 <vPortEnterCritical>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bbe:	b25b      	sxtb	r3, r3
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d103      	bne.n	8004bce <vQueueWaitForMessageRestricted+0x2a>
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d103      	bne.n	8004be4 <vQueueWaitForMessageRestricted+0x40>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be4:	f001 fc86 	bl	80064f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3324      	adds	r3, #36	; 0x24
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fc35 	bl	8005468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bfe:	6978      	ldr	r0, [r7, #20]
 8004c00:	f7ff fefb 	bl	80049fa <prvUnlockQueue>
	}
 8004c04:	bf00      	nop
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08e      	sub	sp, #56	; 0x38
 8004c10:	af04      	add	r7, sp, #16
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	623b      	str	r3, [r7, #32]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <xTaskCreateStatic+0x46>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	61fb      	str	r3, [r7, #28]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c52:	235c      	movs	r3, #92	; 0x5c
 8004c54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b5c      	cmp	r3, #92	; 0x5c
 8004c5a:	d00a      	beq.n	8004c72 <xTaskCreateStatic+0x66>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	61bb      	str	r3, [r7, #24]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01e      	beq.n	8004cb6 <xTaskCreateStatic+0xaa>
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01b      	beq.n	8004cb6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c90:	2300      	movs	r3, #0
 8004c92:	9303      	str	r3, [sp, #12]
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f850 	bl	8004d4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cb0:	f000 f8d4 	bl	8004e5c <prvAddNewTaskToReadyList>
 8004cb4:	e001      	b.n	8004cba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cba:	697b      	ldr	r3, [r7, #20]
	}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3728      	adds	r7, #40	; 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08c      	sub	sp, #48	; 0x30
 8004cc8:	af04      	add	r7, sp, #16
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fcfd 	bl	80066d8 <pvPortMalloc>
 8004cde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ce6:	205c      	movs	r0, #92	; 0x5c
 8004ce8:	f001 fcf6 	bl	80066d8 <pvPortMalloc>
 8004cec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cfa:	e005      	b.n	8004d08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cfc:	6978      	ldr	r0, [r7, #20]
 8004cfe:	f001 fdaf 	bl	8006860 <vPortFree>
 8004d02:	e001      	b.n	8004d08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d017      	beq.n	8004d3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9303      	str	r3, [sp, #12]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f80e 	bl	8004d4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d32:	69f8      	ldr	r0, [r7, #28]
 8004d34:	f000 f892 	bl	8004e5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e002      	b.n	8004d44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d44:	69bb      	ldr	r3, [r7, #24]
	}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b088      	sub	sp, #32
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	461a      	mov	r2, r3
 8004d66:	21a5      	movs	r1, #165	; 0xa5
 8004d68:	f001 fec8 	bl	8006afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d76:	3b01      	subs	r3, #1
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	617b      	str	r3, [r7, #20]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e012      	b.n	8004dd2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	7819      	ldrb	r1, [r3, #0]
 8004db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	3334      	adds	r3, #52	; 0x34
 8004dbc:	460a      	mov	r2, r1
 8004dbe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d006      	beq.n	8004dda <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b0f      	cmp	r3, #15
 8004dd6:	d9e9      	bls.n	8004dac <prvInitialiseNewTask+0x5e>
 8004dd8:	e000      	b.n	8004ddc <prvInitialiseNewTask+0x8e>
		{
			break;
 8004dda:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b37      	cmp	r3, #55	; 0x37
 8004de8:	d901      	bls.n	8004dee <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dea:	2337      	movs	r3, #55	; 0x37
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	3304      	adds	r3, #4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe fe5f 	bl	8003ac8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	3318      	adds	r3, #24
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fe5a 	bl	8003ac8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	69b8      	ldr	r0, [r7, #24]
 8004e3e:	f001 f9fd 	bl	800623c <pxPortInitialiseStack>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e64:	f001 fb16 	bl	8006494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e68:	4b2d      	ldr	r3, [pc, #180]	; (8004f20 <prvAddNewTaskToReadyList+0xc4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <prvAddNewTaskToReadyList+0xc4>)
 8004e70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e72:	4b2c      	ldr	r3, [pc, #176]	; (8004f24 <prvAddNewTaskToReadyList+0xc8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e7a:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <prvAddNewTaskToReadyList+0xc8>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <prvAddNewTaskToReadyList+0xc4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d110      	bne.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e88:	f000 fc1a 	bl	80056c0 <prvInitialiseTaskLists>
 8004e8c:	e00d      	b.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <prvAddNewTaskToReadyList+0xcc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e96:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <prvAddNewTaskToReadyList+0xc8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d802      	bhi.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <prvAddNewTaskToReadyList+0xc8>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eaa:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <prvAddNewTaskToReadyList+0xd0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <prvAddNewTaskToReadyList+0xd0>)
 8004eb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <prvAddNewTaskToReadyList+0xd0>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <prvAddNewTaskToReadyList+0xd4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d903      	bls.n	8004ed0 <prvAddNewTaskToReadyList+0x74>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <prvAddNewTaskToReadyList+0xd4>)
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <prvAddNewTaskToReadyList+0xd8>)
 8004ede:	441a      	add	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe fdfb 	bl	8003ae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004eec:	f001 fb02 	bl	80064f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <prvAddNewTaskToReadyList+0xcc>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <prvAddNewTaskToReadyList+0xc8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d207      	bcs.n	8004f16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <prvAddNewTaskToReadyList+0xdc>)
 8004f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000d50 	.word	0x20000d50
 8004f24:	2000087c 	.word	0x2000087c
 8004f28:	20000d5c 	.word	0x20000d5c
 8004f2c:	20000d6c 	.word	0x20000d6c
 8004f30:	20000d58 	.word	0x20000d58
 8004f34:	20000880 	.word	0x20000880
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d017      	beq.n	8004f7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <vTaskDelay+0x60>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <vTaskDelay+0x30>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60bb      	str	r3, [r7, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f6c:	f000 f880 	bl	8005070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f70:	2100      	movs	r1, #0
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fdfc 	bl	8005b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f78:	f000 f888 	bl	800508c <xTaskResumeAll>
 8004f7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <vTaskDelay+0x64>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000d78 	.word	0x20000d78
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fb2:	463a      	mov	r2, r7
 8004fb4:	1d39      	adds	r1, r7, #4
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe fd30 	bl	8003a20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	9202      	str	r2, [sp, #8]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	460a      	mov	r2, r1
 8004fd2:	4921      	ldr	r1, [pc, #132]	; (8005058 <vTaskStartScheduler+0xb4>)
 8004fd4:	4821      	ldr	r0, [pc, #132]	; (800505c <vTaskStartScheduler+0xb8>)
 8004fd6:	f7ff fe19 	bl	8004c0c <xTaskCreateStatic>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4a20      	ldr	r2, [pc, #128]	; (8005060 <vTaskStartScheduler+0xbc>)
 8004fde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <vTaskStartScheduler+0xbc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e001      	b.n	8004ff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d102      	bne.n	8004ffe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ff8:	f000 fe0e 	bl	8005c18 <xTimerCreateTimerTask>
 8004ffc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d116      	bne.n	8005032 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	613b      	str	r3, [r7, #16]
}
 8005016:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <vTaskStartScheduler+0xc0>)
 800501a:	f04f 32ff 	mov.w	r2, #4294967295
 800501e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <vTaskStartScheduler+0xc4>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005026:	4b11      	ldr	r3, [pc, #68]	; (800506c <vTaskStartScheduler+0xc8>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800502c:	f001 f990 	bl	8006350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005030:	e00e      	b.n	8005050 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d10a      	bne.n	8005050 <vTaskStartScheduler+0xac>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60fb      	str	r3, [r7, #12]
}
 800504c:	bf00      	nop
 800504e:	e7fe      	b.n	800504e <vTaskStartScheduler+0xaa>
}
 8005050:	bf00      	nop
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	0800746c 	.word	0x0800746c
 800505c:	08005691 	.word	0x08005691
 8005060:	20000d74 	.word	0x20000d74
 8005064:	20000d70 	.word	0x20000d70
 8005068:	20000d5c 	.word	0x20000d5c
 800506c:	20000d54 	.word	0x20000d54

08005070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <vTaskSuspendAll+0x18>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	4a03      	ldr	r2, [pc, #12]	; (8005088 <vTaskSuspendAll+0x18>)
 800507c:	6013      	str	r3, [r2, #0]
}
 800507e:	bf00      	nop
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000d78 	.word	0x20000d78

0800508c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800509a:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <xTaskResumeAll+0x118>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	603b      	str	r3, [r7, #0]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050b8:	f001 f9ec 	bl	8006494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050bc:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <xTaskResumeAll+0x118>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	4a38      	ldr	r2, [pc, #224]	; (80051a4 <xTaskResumeAll+0x118>)
 80050c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c6:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <xTaskResumeAll+0x118>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d162      	bne.n	8005194 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050ce:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <xTaskResumeAll+0x11c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d05e      	beq.n	8005194 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050d6:	e02f      	b.n	8005138 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80050d8:	4b34      	ldr	r3, [pc, #208]	; (80051ac <xTaskResumeAll+0x120>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3318      	adds	r3, #24
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe fd59 	bl	8003b9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fd54 	bl	8003b9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <xTaskResumeAll+0x124>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d903      	bls.n	8005108 <xTaskResumeAll+0x7c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <xTaskResumeAll+0x124>)
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <xTaskResumeAll+0x128>)
 8005116:	441a      	add	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f7fe fcdf 	bl	8003ae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <xTaskResumeAll+0x12c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005132:	4b22      	ldr	r3, [pc, #136]	; (80051bc <xTaskResumeAll+0x130>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <xTaskResumeAll+0x120>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1cb      	bne.n	80050d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005146:	f000 fb59 	bl	80057fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <xTaskResumeAll+0x134>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005156:	f000 f847 	bl	80051e8 <xTaskIncrementTick>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005160:	4b16      	ldr	r3, [pc, #88]	; (80051bc <xTaskResumeAll+0x130>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3b01      	subs	r3, #1
 800516a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f1      	bne.n	8005156 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <xTaskResumeAll+0x134>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005178:	4b10      	ldr	r3, [pc, #64]	; (80051bc <xTaskResumeAll+0x130>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <xTaskResumeAll+0x138>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005194:	f001 f9ae 	bl	80064f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005198:	68bb      	ldr	r3, [r7, #8]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000d78 	.word	0x20000d78
 80051a8:	20000d50 	.word	0x20000d50
 80051ac:	20000d10 	.word	0x20000d10
 80051b0:	20000d58 	.word	0x20000d58
 80051b4:	20000880 	.word	0x20000880
 80051b8:	2000087c 	.word	0x2000087c
 80051bc:	20000d64 	.word	0x20000d64
 80051c0:	20000d60 	.word	0x20000d60
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <xTaskGetTickCount+0x1c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000d54 	.word	0x20000d54

080051e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b51      	ldr	r3, [pc, #324]	; (8005338 <xTaskIncrementTick+0x150>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 808e 	bne.w	8005318 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051fc:	4b4f      	ldr	r3, [pc, #316]	; (800533c <xTaskIncrementTick+0x154>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005204:	4a4d      	ldr	r2, [pc, #308]	; (800533c <xTaskIncrementTick+0x154>)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d120      	bne.n	8005252 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005210:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <xTaskIncrementTick+0x158>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <xTaskIncrementTick+0x48>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xTaskIncrementTick+0x46>
 8005230:	4b43      	ldr	r3, [pc, #268]	; (8005340 <xTaskIncrementTick+0x158>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4b43      	ldr	r3, [pc, #268]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a41      	ldr	r2, [pc, #260]	; (8005340 <xTaskIncrementTick+0x158>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4a41      	ldr	r2, [pc, #260]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	4b40      	ldr	r3, [pc, #256]	; (8005348 <xTaskIncrementTick+0x160>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	4a3f      	ldr	r2, [pc, #252]	; (8005348 <xTaskIncrementTick+0x160>)
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	f000 fad5 	bl	80057fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005252:	4b3e      	ldr	r3, [pc, #248]	; (800534c <xTaskIncrementTick+0x164>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d34e      	bcc.n	80052fa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525c:	4b38      	ldr	r3, [pc, #224]	; (8005340 <xTaskIncrementTick+0x158>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xTaskIncrementTick+0x82>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xTaskIncrementTick+0x84>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005270:	4b36      	ldr	r3, [pc, #216]	; (800534c <xTaskIncrementTick+0x164>)
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	601a      	str	r2, [r3, #0]
					break;
 8005278:	e03f      	b.n	80052fa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800527a:	4b31      	ldr	r3, [pc, #196]	; (8005340 <xTaskIncrementTick+0x158>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d203      	bcs.n	800529a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005292:	4a2e      	ldr	r2, [pc, #184]	; (800534c <xTaskIncrementTick+0x164>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6013      	str	r3, [r2, #0]
						break;
 8005298:	e02f      	b.n	80052fa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	3304      	adds	r3, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fc7c 	bl	8003b9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	3318      	adds	r3, #24
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fe fc73 	bl	8003b9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ba:	4b25      	ldr	r3, [pc, #148]	; (8005350 <xTaskIncrementTick+0x168>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d903      	bls.n	80052ca <xTaskIncrementTick+0xe2>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	4a22      	ldr	r2, [pc, #136]	; (8005350 <xTaskIncrementTick+0x168>)
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <xTaskIncrementTick+0x16c>)
 80052d8:	441a      	add	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	3304      	adds	r3, #4
 80052de:	4619      	mov	r1, r3
 80052e0:	4610      	mov	r0, r2
 80052e2:	f7fe fbfe 	bl	8003ae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <xTaskIncrementTick+0x170>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d3b3      	bcc.n	800525c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f8:	e7b0      	b.n	800525c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052fa:	4b17      	ldr	r3, [pc, #92]	; (8005358 <xTaskIncrementTick+0x170>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	4914      	ldr	r1, [pc, #80]	; (8005354 <xTaskIncrementTick+0x16c>)
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d907      	bls.n	8005322 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005312:	2301      	movs	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e004      	b.n	8005322 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005318:	4b10      	ldr	r3, [pc, #64]	; (800535c <xTaskIncrementTick+0x174>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a0f      	ldr	r2, [pc, #60]	; (800535c <xTaskIncrementTick+0x174>)
 8005320:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <xTaskIncrementTick+0x178>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800532a:	2301      	movs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800532e:	697b      	ldr	r3, [r7, #20]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000d78 	.word	0x20000d78
 800533c:	20000d54 	.word	0x20000d54
 8005340:	20000d08 	.word	0x20000d08
 8005344:	20000d0c 	.word	0x20000d0c
 8005348:	20000d68 	.word	0x20000d68
 800534c:	20000d70 	.word	0x20000d70
 8005350:	20000d58 	.word	0x20000d58
 8005354:	20000880 	.word	0x20000880
 8005358:	2000087c 	.word	0x2000087c
 800535c:	20000d60 	.word	0x20000d60
 8005360:	20000d64 	.word	0x20000d64

08005364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800536a:	4b28      	ldr	r3, [pc, #160]	; (800540c <vTaskSwitchContext+0xa8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005372:	4b27      	ldr	r3, [pc, #156]	; (8005410 <vTaskSwitchContext+0xac>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005378:	e041      	b.n	80053fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800537a:	4b25      	ldr	r3, [pc, #148]	; (8005410 <vTaskSwitchContext+0xac>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005380:	4b24      	ldr	r3, [pc, #144]	; (8005414 <vTaskSwitchContext+0xb0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e010      	b.n	80053aa <vTaskSwitchContext+0x46>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <vTaskSwitchContext+0x3e>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	491b      	ldr	r1, [pc, #108]	; (8005418 <vTaskSwitchContext+0xb4>)
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0e4      	beq.n	8005388 <vTaskSwitchContext+0x24>
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a13      	ldr	r2, [pc, #76]	; (8005418 <vTaskSwitchContext+0xb4>)
 80053ca:	4413      	add	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	605a      	str	r2, [r3, #4]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	3308      	adds	r3, #8
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d104      	bne.n	80053ee <vTaskSwitchContext+0x8a>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4a09      	ldr	r2, [pc, #36]	; (800541c <vTaskSwitchContext+0xb8>)
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4a06      	ldr	r2, [pc, #24]	; (8005414 <vTaskSwitchContext+0xb0>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6013      	str	r3, [r2, #0]
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000d78 	.word	0x20000d78
 8005410:	20000d64 	.word	0x20000d64
 8005414:	20000d58 	.word	0x20000d58
 8005418:	20000880 	.word	0x20000880
 800541c:	2000087c 	.word	0x2000087c

08005420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <vTaskPlaceOnEventList+0x44>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3318      	adds	r3, #24
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fe fb6b 	bl	8003b2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005454:	2101      	movs	r1, #1
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f000 fb8a 	bl	8005b70 <prvAddCurrentTaskToDelayedList>
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	2000087c 	.word	0x2000087c

08005468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	617b      	str	r3, [r7, #20]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3318      	adds	r3, #24
 8005496:	4619      	mov	r1, r3
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7fe fb22 	bl	8003ae2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	68b8      	ldr	r0, [r7, #8]
 80054ae:	f000 fb5f 	bl	8005b70 <prvAddCurrentTaskToDelayedList>
	}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	2000087c 	.word	0x2000087c

080054c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	60fb      	str	r3, [r7, #12]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3318      	adds	r3, #24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe fb53 	bl	8003b9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f6:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <xTaskRemoveFromEventList+0xb0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11d      	bne.n	800553a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3304      	adds	r3, #4
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fb4a 	bl	8003b9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <xTaskRemoveFromEventList+0xb4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d903      	bls.n	800551c <xTaskRemoveFromEventList+0x5c>
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a16      	ldr	r2, [pc, #88]	; (8005574 <xTaskRemoveFromEventList+0xb4>)
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4a13      	ldr	r2, [pc, #76]	; (8005578 <xTaskRemoveFromEventList+0xb8>)
 800552a:	441a      	add	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f7fe fad5 	bl	8003ae2 <vListInsertEnd>
 8005538:	e005      	b.n	8005546 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3318      	adds	r3, #24
 800553e:	4619      	mov	r1, r3
 8005540:	480e      	ldr	r0, [pc, #56]	; (800557c <xTaskRemoveFromEventList+0xbc>)
 8005542:	f7fe face 	bl	8003ae2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554a:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <xTaskRemoveFromEventList+0xc0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	429a      	cmp	r2, r3
 8005552:	d905      	bls.n	8005560 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <xTaskRemoveFromEventList+0xc4>)
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e001      	b.n	8005564 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005564:	697b      	ldr	r3, [r7, #20]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000d78 	.word	0x20000d78
 8005574:	20000d58 	.word	0x20000d58
 8005578:	20000880 	.word	0x20000880
 800557c:	20000d10 	.word	0x20000d10
 8005580:	2000087c 	.word	0x2000087c
 8005584:	20000d64 	.word	0x20000d64

08005588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <vTaskInternalSetTimeOutState+0x24>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <vTaskInternalSetTimeOutState+0x28>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	605a      	str	r2, [r3, #4]
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	20000d68 	.word	0x20000d68
 80055b0:	20000d54 	.word	0x20000d54

080055b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	613b      	str	r3, [r7, #16]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055f6:	f000 ff4d 	bl	8006494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055fa:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <xTaskCheckForTimeOut+0xbc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d102      	bne.n	800561a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	e023      	b.n	8005662 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <xTaskCheckForTimeOut+0xc0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d007      	beq.n	8005636 <xTaskCheckForTimeOut+0x82>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005630:	2301      	movs	r3, #1
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e015      	b.n	8005662 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	429a      	cmp	r2, r3
 800563e:	d20b      	bcs.n	8005658 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad2      	subs	r2, r2, r3
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ff9b 	bl	8005588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	e004      	b.n	8005662 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005662:	f000 ff47 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8005666:	69fb      	ldr	r3, [r7, #28]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3720      	adds	r7, #32
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000d54 	.word	0x20000d54
 8005674:	20000d68 	.word	0x20000d68

08005678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <vTaskMissedYield+0x14>)
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000d64 	.word	0x20000d64

08005690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005698:	f000 f852 	bl	8005740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <prvIdleTask+0x28>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d9f9      	bls.n	8005698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <prvIdleTask+0x2c>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056b4:	e7f0      	b.n	8005698 <prvIdleTask+0x8>
 80056b6:	bf00      	nop
 80056b8:	20000880 	.word	0x20000880
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	e00c      	b.n	80056e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <prvInitialiseTaskLists+0x60>)
 80056d8:	4413      	add	r3, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe f9d4 	bl	8003a88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3301      	adds	r3, #1
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b37      	cmp	r3, #55	; 0x37
 80056ea:	d9ef      	bls.n	80056cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056ec:	480d      	ldr	r0, [pc, #52]	; (8005724 <prvInitialiseTaskLists+0x64>)
 80056ee:	f7fe f9cb 	bl	8003a88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056f2:	480d      	ldr	r0, [pc, #52]	; (8005728 <prvInitialiseTaskLists+0x68>)
 80056f4:	f7fe f9c8 	bl	8003a88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056f8:	480c      	ldr	r0, [pc, #48]	; (800572c <prvInitialiseTaskLists+0x6c>)
 80056fa:	f7fe f9c5 	bl	8003a88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056fe:	480c      	ldr	r0, [pc, #48]	; (8005730 <prvInitialiseTaskLists+0x70>)
 8005700:	f7fe f9c2 	bl	8003a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005704:	480b      	ldr	r0, [pc, #44]	; (8005734 <prvInitialiseTaskLists+0x74>)
 8005706:	f7fe f9bf 	bl	8003a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <prvInitialiseTaskLists+0x78>)
 800570c:	4a05      	ldr	r2, [pc, #20]	; (8005724 <prvInitialiseTaskLists+0x64>)
 800570e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <prvInitialiseTaskLists+0x7c>)
 8005712:	4a05      	ldr	r2, [pc, #20]	; (8005728 <prvInitialiseTaskLists+0x68>)
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000880 	.word	0x20000880
 8005724:	20000ce0 	.word	0x20000ce0
 8005728:	20000cf4 	.word	0x20000cf4
 800572c:	20000d10 	.word	0x20000d10
 8005730:	20000d24 	.word	0x20000d24
 8005734:	20000d3c 	.word	0x20000d3c
 8005738:	20000d08 	.word	0x20000d08
 800573c:	20000d0c 	.word	0x20000d0c

08005740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005746:	e019      	b.n	800577c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005748:	f000 fea4 	bl	8006494 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <prvCheckTasksWaitingTermination+0x50>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe fa1f 	bl	8003b9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <prvCheckTasksWaitingTermination+0x54>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3b01      	subs	r3, #1
 8005764:	4a0b      	ldr	r2, [pc, #44]	; (8005794 <prvCheckTasksWaitingTermination+0x54>)
 8005766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <prvCheckTasksWaitingTermination+0x58>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <prvCheckTasksWaitingTermination+0x58>)
 8005770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005772:	f000 febf 	bl	80064f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f810 	bl	800579c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <prvCheckTasksWaitingTermination+0x58>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e1      	bne.n	8005748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000d24 	.word	0x20000d24
 8005794:	20000d50 	.word	0x20000d50
 8005798:	20000d38 	.word	0x20000d38

0800579c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d108      	bne.n	80057c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 f854 	bl	8006860 <vPortFree>
				vPortFree( pxTCB );
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 f851 	bl	8006860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057be:	e018      	b.n	80057f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d103      	bne.n	80057d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 f848 	bl	8006860 <vPortFree>
	}
 80057d0:	e00f      	b.n	80057f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d00a      	beq.n	80057f2 <prvDeleteTCB+0x56>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <prvDeleteTCB+0x54>
	}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005802:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <prvResetNextTaskUnblockTime+0x44>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <prvResetNextTaskUnblockTime+0x14>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <prvResetNextTaskUnblockTime+0x16>
 8005810:	2300      	movs	r3, #0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <prvResetNextTaskUnblockTime+0x48>)
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800581e:	e008      	b.n	8005832 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <prvResetNextTaskUnblockTime+0x44>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4a05      	ldr	r2, [pc, #20]	; (8005844 <prvResetNextTaskUnblockTime+0x48>)
 8005830:	6013      	str	r3, [r2, #0]
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20000d08 	.word	0x20000d08
 8005844:	20000d70 	.word	0x20000d70

08005848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <xTaskGetSchedulerState+0x34>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005856:	2301      	movs	r3, #1
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	e008      	b.n	800586e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <xTaskGetSchedulerState+0x38>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d102      	bne.n	800586a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005864:	2302      	movs	r3, #2
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	e001      	b.n	800586e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800586e:	687b      	ldr	r3, [r7, #4]
	}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000d5c 	.word	0x20000d5c
 8005880:	20000d78 	.word	0x20000d78

08005884 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d056      	beq.n	8005948 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <xTaskPriorityInherit+0xd0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d246      	bcs.n	8005936 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	db06      	blt.n	80058be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b0:	4b28      	ldr	r3, [pc, #160]	; (8005954 <xTaskPriorityInherit+0xd0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6959      	ldr	r1, [r3, #20]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4a22      	ldr	r2, [pc, #136]	; (8005958 <xTaskPriorityInherit+0xd4>)
 80058d0:	4413      	add	r3, r2
 80058d2:	4299      	cmp	r1, r3
 80058d4:	d101      	bne.n	80058da <xTaskPriorityInherit+0x56>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xTaskPriorityInherit+0x58>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d022      	beq.n	8005926 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fe f959 	bl	8003b9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058ea:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <xTaskPriorityInherit+0xd0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	4b18      	ldr	r3, [pc, #96]	; (800595c <xTaskPriorityInherit+0xd8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d903      	bls.n	8005908 <xTaskPriorityInherit+0x84>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	4a15      	ldr	r2, [pc, #84]	; (800595c <xTaskPriorityInherit+0xd8>)
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4a10      	ldr	r2, [pc, #64]	; (8005958 <xTaskPriorityInherit+0xd4>)
 8005916:	441a      	add	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f7fe f8df 	bl	8003ae2 <vListInsertEnd>
 8005924:	e004      	b.n	8005930 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <xTaskPriorityInherit+0xd0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e008      	b.n	8005948 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <xTaskPriorityInherit+0xd0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	429a      	cmp	r2, r3
 8005942:	d201      	bcs.n	8005948 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005948:	68fb      	ldr	r3, [r7, #12]
	}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000087c 	.word	0x2000087c
 8005958:	20000880 	.word	0x20000880
 800595c:	20000d58 	.word	0x20000d58

08005960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d056      	beq.n	8005a24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005976:	4b2e      	ldr	r3, [pc, #184]	; (8005a30 <xTaskPriorityDisinherit+0xd0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	429a      	cmp	r2, r3
 800597e:	d00a      	beq.n	8005996 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60fb      	str	r3, [r7, #12]
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	60bb      	str	r3, [r7, #8]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	1e5a      	subs	r2, r3, #1
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d02c      	beq.n	8005a24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d128      	bne.n	8005a24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe f8e0 	bl	8003b9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <xTaskPriorityDisinherit+0xd4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d903      	bls.n	8005a04 <xTaskPriorityDisinherit+0xa4>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <xTaskPriorityDisinherit+0xd4>)
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <xTaskPriorityDisinherit+0xd8>)
 8005a12:	441a      	add	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fe f861 	bl	8003ae2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a24:	697b      	ldr	r3, [r7, #20]
	}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	2000087c 	.word	0x2000087c
 8005a34:	20000d58 	.word	0x20000d58
 8005a38:	20000880 	.word	0x20000880

08005a3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d06f      	beq.n	8005b34 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	60fb      	str	r3, [r7, #12]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d902      	bls.n	8005a82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e002      	b.n	8005a88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d050      	beq.n	8005b34 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d14b      	bne.n	8005b34 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a9c:	4b27      	ldr	r3, [pc, #156]	; (8005b3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d10a      	bne.n	8005abc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60bb      	str	r3, [r7, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	db04      	blt.n	8005ada <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6959      	ldr	r1, [r3, #20]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005aea:	4413      	add	r3, r2
 8005aec:	4299      	cmp	r1, r3
 8005aee:	d101      	bne.n	8005af4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01c      	beq.n	8005b34 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe f84c 	bl	8003b9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d903      	bls.n	8005b18 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	4a0b      	ldr	r2, [pc, #44]	; (8005b44 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b26:	441a      	add	r2, r3
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f7fd ffd7 	bl	8003ae2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b34:	bf00      	nop
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2000087c 	.word	0x2000087c
 8005b40:	20000880 	.word	0x20000880
 8005b44:	20000d58 	.word	0x20000d58

08005b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b4c:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b5a:	3201      	adds	r2, #1
 8005b5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005b60:	681b      	ldr	r3, [r3, #0]
	}
 8005b62:	4618      	mov	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	2000087c 	.word	0x2000087c

08005b70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b7a:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b80:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe f808 	bl	8003b9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d10a      	bne.n	8005baa <prvAddCurrentTaskToDelayedList+0x3a>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4819      	ldr	r0, [pc, #100]	; (8005c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ba4:	f7fd ff9d 	bl	8003ae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ba8:	e026      	b.n	8005bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d209      	bcs.n	8005bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fd ffab 	bl	8003b2a <vListInsert>
}
 8005bd4:	e010      	b.n	8005bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f7fd ffa1 	bl	8003b2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d202      	bcs.n	8005bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bf2:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000d54 	.word	0x20000d54
 8005c04:	2000087c 	.word	0x2000087c
 8005c08:	20000d3c 	.word	0x20000d3c
 8005c0c:	20000d0c 	.word	0x20000d0c
 8005c10:	20000d08 	.word	0x20000d08
 8005c14:	20000d70 	.word	0x20000d70

08005c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c22:	f000 facb 	bl	80061bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <xTimerCreateTimerTask+0x80>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d021      	beq.n	8005c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c36:	1d3a      	adds	r2, r7, #4
 8005c38:	f107 0108 	add.w	r1, r7, #8
 8005c3c:	f107 030c 	add.w	r3, r7, #12
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fd ff07 	bl	8003a54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	9202      	str	r2, [sp, #8]
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	2302      	movs	r3, #2
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	460a      	mov	r2, r1
 8005c58:	4910      	ldr	r1, [pc, #64]	; (8005c9c <xTimerCreateTimerTask+0x84>)
 8005c5a:	4811      	ldr	r0, [pc, #68]	; (8005ca0 <xTimerCreateTimerTask+0x88>)
 8005c5c:	f7fe ffd6 	bl	8004c0c <xTaskCreateStatic>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <xTimerCreateTimerTask+0x8c>)
 8005c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <xTimerCreateTimerTask+0x8c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c8e:	697b      	ldr	r3, [r7, #20]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000dac 	.word	0x20000dac
 8005c9c:	08007474 	.word	0x08007474
 8005ca0:	08005dc5 	.word	0x08005dc5
 8005ca4:	20000db0 	.word	0x20000db0

08005ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	623b      	str	r3, [r7, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02a      	beq.n	8005d34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	dc18      	bgt.n	8005d22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cf0:	f7ff fdaa 	bl	8005848 <xTaskGetSchedulerState>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d109      	bne.n	8005d0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	f107 0110 	add.w	r1, r7, #16
 8005d02:	2300      	movs	r3, #0
 8005d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d06:	f7fe f91d 	bl	8003f44 <xQueueGenericSend>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d0c:	e012      	b.n	8005d34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f107 0110 	add.w	r1, r7, #16
 8005d16:	2300      	movs	r3, #0
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f7fe f913 	bl	8003f44 <xQueueGenericSend>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d20:	e008      	b.n	8005d34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <xTimerGenericCommand+0x98>)
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	f107 0110 	add.w	r1, r7, #16
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	f7fe fa07 	bl	8004140 <xQueueGenericSendFromISR>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000dac 	.word	0x20000dac

08005d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d4e:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <prvProcessExpiredTimer+0x7c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd ff1d 	bl	8003b9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d122      	bne.n	8005db0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	18d1      	adds	r1, r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f000 f8c8 	bl	8005f0c <prvInsertTimerInActiveList>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d016      	beq.n	8005db0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d82:	2300      	movs	r3, #0
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2300      	movs	r3, #0
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	6978      	ldr	r0, [r7, #20]
 8005d8e:	f7ff ff8b 	bl	8005ca8 <xTimerGenericCommand>
 8005d92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60fb      	str	r3, [r7, #12]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	6978      	ldr	r0, [r7, #20]
 8005db6:	4798      	blx	r3
}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000da4 	.word	0x20000da4

08005dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f857 	bl	8005e84 <prvGetNextExpireTime>
 8005dd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f803 	bl	8005de8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005de2:	f000 f8d5 	bl	8005f90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005de6:	e7f1      	b.n	8005dcc <prvTimerTask+0x8>

08005de8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005df2:	f7ff f93d 	bl	8005070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f866 	bl	8005ecc <prvSampleTimeNow>
 8005e00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d130      	bne.n	8005e6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <prvProcessTimerOrBlockTask+0x3c>
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d806      	bhi.n	8005e24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e16:	f7ff f939 	bl	800508c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ff91 	bl	8005d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e22:	e024      	b.n	8005e6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <prvProcessTimerOrBlockTask+0x90>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <prvProcessTimerOrBlockTask+0x94>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fe feab 	bl	8004ba4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e4e:	f7ff f91d 	bl	800508c <xTaskResumeAll>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e58:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <prvProcessTimerOrBlockTask+0x98>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
}
 8005e68:	e001      	b.n	8005e6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e6a:	f7ff f90f 	bl	800508c <xTaskResumeAll>
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000da8 	.word	0x20000da8
 8005e7c:	20000dac 	.word	0x20000dac
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <prvGetNextExpireTime+0x44>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <prvGetNextExpireTime+0x44>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e001      	b.n	8005eba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005eba:	68fb      	ldr	r3, [r7, #12]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000da4 	.word	0x20000da4

08005ecc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ed4:	f7ff f978 	bl	80051c8 <xTaskGetTickCount>
 8005ed8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <prvSampleTimeNow+0x3c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d205      	bcs.n	8005ef0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ee4:	f000 f908 	bl	80060f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ef6:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <prvSampleTimeNow+0x3c>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000db4 	.word	0x20000db4

08005f0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d812      	bhi.n	8005f58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	1ad2      	subs	r2, r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d302      	bcc.n	8005f46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e01b      	b.n	8005f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <prvInsertTimerInActiveList+0x7c>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fd fdea 	bl	8003b2a <vListInsert>
 8005f56:	e012      	b.n	8005f7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d206      	bcs.n	8005f6e <prvInsertTimerInActiveList+0x62>
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d302      	bcc.n	8005f6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e007      	b.n	8005f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <prvInsertTimerInActiveList+0x80>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fd fdd6 	bl	8003b2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f7e:	697b      	ldr	r3, [r7, #20]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000da8 	.word	0x20000da8
 8005f8c:	20000da4 	.word	0x20000da4

08005f90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	; 0x38
 8005f94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f96:	e09d      	b.n	80060d4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da18      	bge.n	8005fd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	61fb      	str	r3, [r7, #28]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc6:	6850      	ldr	r0, [r2, #4]
 8005fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fca:	6892      	ldr	r2, [r2, #8]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db7d      	blt.n	80060d2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fd fdd8 	bl	8003b9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fec:	463b      	mov	r3, r7
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff ff6c 	bl	8005ecc <prvSampleTimeNow>
 8005ff4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b09      	cmp	r3, #9
 8005ffa:	d86b      	bhi.n	80060d4 <prvProcessReceivedCommands+0x144>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <prvProcessReceivedCommands+0x74>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	0800602d 	.word	0x0800602d
 8006008:	0800602d 	.word	0x0800602d
 800600c:	0800602d 	.word	0x0800602d
 8006010:	080060d5 	.word	0x080060d5
 8006014:	08006089 	.word	0x08006089
 8006018:	080060c1 	.word	0x080060c1
 800601c:	0800602d 	.word	0x0800602d
 8006020:	0800602d 	.word	0x0800602d
 8006024:	080060d5 	.word	0x080060d5
 8006028:	08006089 	.word	0x08006089
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	18d1      	adds	r1, r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603a:	f7ff ff67 	bl	8005f0c <prvInsertTimerInActiveList>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d047      	beq.n	80060d4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d13f      	bne.n	80060d4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	441a      	add	r2, r3
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	2100      	movs	r1, #0
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f7ff fe1f 	bl	8005ca8 <xTimerGenericCommand>
 800606a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d130      	bne.n	80060d4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61bb      	str	r3, [r7, #24]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	617b      	str	r3, [r7, #20]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	18d1      	adds	r1, r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ba:	f7ff ff27 	bl	8005f0c <prvInsertTimerInActiveList>
					break;
 80060be:	e009      	b.n	80060d4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80060ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060cc:	f000 fbc8 	bl	8006860 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060d0:	e000      	b.n	80060d4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <prvProcessReceivedCommands+0x164>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1d39      	adds	r1, r7, #4
 80060da:	2200      	movs	r2, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe f955 	bl	800438c <xQueueReceive>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f47f af57 	bne.w	8005f98 <prvProcessReceivedCommands+0x8>
	}
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	3730      	adds	r7, #48	; 0x30
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000dac 	.word	0x20000dac

080060f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060fe:	e045      	b.n	800618c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006100:	4b2c      	ldr	r3, [pc, #176]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800610a:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fd fd3f 	bl	8003b9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d12e      	bne.n	800618c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	429a      	cmp	r2, r3
 800613e:	d90e      	bls.n	800615e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800614c:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fd fce7 	bl	8003b2a <vListInsert>
 800615c:	e016      	b.n	800618c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800615e:	2300      	movs	r3, #0
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2300      	movs	r3, #0
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	2100      	movs	r1, #0
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fd9d 	bl	8005ca8 <xTimerGenericCommand>
 800616e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	603b      	str	r3, [r7, #0]
}
 8006188:	bf00      	nop
 800618a:	e7fe      	b.n	800618a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1b4      	bne.n	8006100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <prvSwitchTimerLists+0xbc>)
 80061a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061a4:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <prvSwitchTimerLists+0xc0>)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6013      	str	r3, [r2, #0]
}
 80061aa:	bf00      	nop
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000da4 	.word	0x20000da4
 80061b8:	20000da8 	.word	0x20000da8

080061bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061c2:	f000 f967 	bl	8006494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d120      	bne.n	8006210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061ce:	4814      	ldr	r0, [pc, #80]	; (8006220 <prvCheckForValidListAndQueue+0x64>)
 80061d0:	f7fd fc5a 	bl	8003a88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061d4:	4813      	ldr	r0, [pc, #76]	; (8006224 <prvCheckForValidListAndQueue+0x68>)
 80061d6:	f7fd fc57 	bl	8003a88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061da:	4b13      	ldr	r3, [pc, #76]	; (8006228 <prvCheckForValidListAndQueue+0x6c>)
 80061dc:	4a10      	ldr	r2, [pc, #64]	; (8006220 <prvCheckForValidListAndQueue+0x64>)
 80061de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <prvCheckForValidListAndQueue+0x70>)
 80061e2:	4a10      	ldr	r2, [pc, #64]	; (8006224 <prvCheckForValidListAndQueue+0x68>)
 80061e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061e6:	2300      	movs	r3, #0
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4b11      	ldr	r3, [pc, #68]	; (8006230 <prvCheckForValidListAndQueue+0x74>)
 80061ec:	4a11      	ldr	r2, [pc, #68]	; (8006234 <prvCheckForValidListAndQueue+0x78>)
 80061ee:	2110      	movs	r1, #16
 80061f0:	200a      	movs	r0, #10
 80061f2:	f7fd fd65 	bl	8003cc0 <xQueueGenericCreateStatic>
 80061f6:	4603      	mov	r3, r0
 80061f8:	4a08      	ldr	r2, [pc, #32]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 80061fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <prvCheckForValidListAndQueue+0x60>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	490b      	ldr	r1, [pc, #44]	; (8006238 <prvCheckForValidListAndQueue+0x7c>)
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fc76 	bl	8004afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006210:	f000 f970 	bl	80064f4 <vPortExitCritical>
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000dac 	.word	0x20000dac
 8006220:	20000d7c 	.word	0x20000d7c
 8006224:	20000d90 	.word	0x20000d90
 8006228:	20000da4 	.word	0x20000da4
 800622c:	20000da8 	.word	0x20000da8
 8006230:	20000e58 	.word	0x20000e58
 8006234:	20000db8 	.word	0x20000db8
 8006238:	0800747c 	.word	0x0800747c

0800623c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3b04      	subs	r3, #4
 800624c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3b04      	subs	r3, #4
 800625a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b04      	subs	r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800626c:	4a0c      	ldr	r2, [pc, #48]	; (80062a0 <pxPortInitialiseStack+0x64>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b14      	subs	r3, #20
 8006276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3b04      	subs	r3, #4
 8006282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f06f 0202 	mvn.w	r2, #2
 800628a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3b20      	subs	r3, #32
 8006290:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006292:	68fb      	ldr	r3, [r7, #12]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	080062a5 	.word	0x080062a5

080062a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <prvTaskExitError+0x54>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d00a      	beq.n	80062ce <prvTaskExitError+0x2a>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	60fb      	str	r3, [r7, #12]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <prvTaskExitError+0x28>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60bb      	str	r3, [r7, #8]
}
 80062e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062e2:	bf00      	nop
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0fc      	beq.n	80062e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ea:	bf00      	nop
 80062ec:	bf00      	nop
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	2000000c 	.word	0x2000000c
 80062fc:	00000000 	.word	0x00000000

08006300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <pxCurrentTCBConst2>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	6808      	ldr	r0, [r1, #0]
 8006306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	f380 8809 	msr	PSP, r0
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	4770      	bx	lr
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst2>:
 8006320:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006328:	4808      	ldr	r0, [pc, #32]	; (800634c <prvPortStartFirstTask+0x24>)
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	6800      	ldr	r0, [r0, #0]
 800632e:	f380 8808 	msr	MSP, r0
 8006332:	f04f 0000 	mov.w	r0, #0
 8006336:	f380 8814 	msr	CONTROL, r0
 800633a:	b662      	cpsie	i
 800633c:	b661      	cpsie	f
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	df00      	svc	0
 8006348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800634a:	bf00      	nop
 800634c:	e000ed08 	.word	0xe000ed08

08006350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006356:	4b46      	ldr	r3, [pc, #280]	; (8006470 <xPortStartScheduler+0x120>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a46      	ldr	r2, [pc, #280]	; (8006474 <xPortStartScheduler+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10a      	bne.n	8006376 <xPortStartScheduler+0x26>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006376:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <xPortStartScheduler+0x120>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <xPortStartScheduler+0x128>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10a      	bne.n	8006396 <xPortStartScheduler+0x46>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <xPortStartScheduler+0x12c>)
 8006398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4b31      	ldr	r3, [pc, #196]	; (8006480 <xPortStartScheduler+0x130>)
 80063bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063be:	4b31      	ldr	r3, [pc, #196]	; (8006484 <xPortStartScheduler+0x134>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c4:	e009      	b.n	80063da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <xPortStartScheduler+0x134>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	4a2d      	ldr	r2, [pc, #180]	; (8006484 <xPortStartScheduler+0x134>)
 80063ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d0ef      	beq.n	80063c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <xPortStartScheduler+0x134>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1c3 0307 	rsb	r3, r3, #7
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d00a      	beq.n	8006408 <xPortStartScheduler+0xb8>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60bb      	str	r3, [r7, #8]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <xPortStartScheduler+0x134>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <xPortStartScheduler+0x134>)
 8006410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006412:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <xPortStartScheduler+0x134>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <xPortStartScheduler+0x134>)
 800641c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	b2da      	uxtb	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <xPortStartScheduler+0x138>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <xPortStartScheduler+0x138>)
 800642c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <xPortStartScheduler+0x138>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a14      	ldr	r2, [pc, #80]	; (8006488 <xPortStartScheduler+0x138>)
 8006438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800643c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800643e:	f000 f8dd 	bl	80065fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <xPortStartScheduler+0x13c>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006448:	f000 f8fc 	bl	8006644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <xPortStartScheduler+0x140>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <xPortStartScheduler+0x140>)
 8006452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006458:	f7ff ff66 	bl	8006328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800645c:	f7fe ff82 	bl	8005364 <vTaskSwitchContext>
	prvTaskExitError();
 8006460:	f7ff ff20 	bl	80062a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	e000ed00 	.word	0xe000ed00
 8006474:	410fc271 	.word	0x410fc271
 8006478:	410fc270 	.word	0x410fc270
 800647c:	e000e400 	.word	0xe000e400
 8006480:	20000ea8 	.word	0x20000ea8
 8006484:	20000eac 	.word	0x20000eac
 8006488:	e000ed20 	.word	0xe000ed20
 800648c:	2000000c 	.word	0x2000000c
 8006490:	e000ef34 	.word	0xe000ef34

08006494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	607b      	str	r3, [r7, #4]
}
 80064ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <vPortEnterCritical+0x58>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a0d      	ldr	r2, [pc, #52]	; (80064ec <vPortEnterCritical+0x58>)
 80064b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <vPortEnterCritical+0x58>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10f      	bne.n	80064e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortEnterCritical+0x5c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	603b      	str	r3, [r7, #0]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vPortEnterCritical+0x4a>
	}
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <vPortExitCritical+0x50>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <vPortExitCritical+0x24>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	607b      	str	r3, [r7, #4]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <vPortExitCritical+0x50>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3b01      	subs	r3, #1
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <vPortExitCritical+0x50>)
 8006520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <vPortExitCritical+0x50>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <vPortExitCritical+0x42>
 800652a:	2300      	movs	r3, #0
 800652c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f383 8811 	msr	BASEPRI, r3
}
 8006534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000000c 	.word	0x2000000c
	...

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006574:	f380 8811 	msr	BASEPRI, r0
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f7fe fef0 	bl	8005364 <vTaskSwitchContext>
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f380 8811 	msr	BASEPRI, r0
 800658c:	bc09      	pop	{r0, r3}
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6808      	ldr	r0, [r1, #0]
 8006592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f01e 0f10 	tst.w	lr, #16
 800659a:	bf08      	it	eq
 800659c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a0:	f380 8809 	msr	PSP, r0
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst>:
 80065b0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f7fe fe09 	bl	80051e8 <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <SysTick_Handler+0x40>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <vPortSetupTimerInterrupt+0x38>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <vPortSetupTimerInterrupt+0x3c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <vPortSetupTimerInterrupt+0x40>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <vPortSetupTimerInterrupt+0x44>)
 800661a:	3b01      	subs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	e000e010 	.word	0xe000e010
 8006634:	e000e018 	.word	0xe000e018
 8006638:	20000000 	.word	0x20000000
 800663c:	10624dd3 	.word	0x10624dd3
 8006640:	e000e014 	.word	0xe000e014

08006644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006654 <vPortEnableVFP+0x10>
 8006648:	6801      	ldr	r1, [r0, #0]
 800664a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800664e:	6001      	str	r1, [r0, #0]
 8006650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006652:	bf00      	nop
 8006654:	e000ed88 	.word	0xe000ed88

08006658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800665e:	f3ef 8305 	mrs	r3, IPSR
 8006662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d914      	bls.n	8006694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <vPortValidateInterruptPriority+0x70>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <vPortValidateInterruptPriority+0x74>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	7afa      	ldrb	r2, [r7, #11]
 800667a:	429a      	cmp	r2, r3
 800667c:	d20a      	bcs.n	8006694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <vPortValidateInterruptPriority+0x78>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800669c:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <vPortValidateInterruptPriority+0x7c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d90a      	bls.n	80066ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	603b      	str	r3, [r7, #0]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <vPortValidateInterruptPriority+0x60>
	}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	e000e3f0 	.word	0xe000e3f0
 80066cc:	20000ea8 	.word	0x20000ea8
 80066d0:	e000ed0c 	.word	0xe000ed0c
 80066d4:	20000eac 	.word	0x20000eac

080066d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066e4:	f7fe fcc4 	bl	8005070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066e8:	4b58      	ldr	r3, [pc, #352]	; (800684c <pvPortMalloc+0x174>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f0:	f000 f910 	bl	8006914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066f4:	4b56      	ldr	r3, [pc, #344]	; (8006850 <pvPortMalloc+0x178>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 808e 	bne.w	800681e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01d      	beq.n	8006744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006708:	2208      	movs	r2, #8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f023 0307 	bic.w	r3, r3, #7
 8006720:	3308      	adds	r3, #8
 8006722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <pvPortMalloc+0x6c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	617b      	str	r3, [r7, #20]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d069      	beq.n	800681e <pvPortMalloc+0x146>
 800674a:	4b42      	ldr	r3, [pc, #264]	; (8006854 <pvPortMalloc+0x17c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d864      	bhi.n	800681e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006754:	4b40      	ldr	r3, [pc, #256]	; (8006858 <pvPortMalloc+0x180>)
 8006756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006758:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <pvPortMalloc+0x180>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675e:	e004      	b.n	800676a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <pvPortMalloc+0xa4>
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f1      	bne.n	8006760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800677c:	4b33      	ldr	r3, [pc, #204]	; (800684c <pvPortMalloc+0x174>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	429a      	cmp	r2, r3
 8006784:	d04b      	beq.n	800681e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2208      	movs	r2, #8
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	2308      	movs	r3, #8
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d91f      	bls.n	80067e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <pvPortMalloc+0xf8>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	613b      	str	r3, [r7, #16]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067e2:	69b8      	ldr	r0, [r7, #24]
 80067e4:	f000 f8f8 	bl	80069d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <pvPortMalloc+0x17c>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	4a18      	ldr	r2, [pc, #96]	; (8006854 <pvPortMalloc+0x17c>)
 80067f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <pvPortMalloc+0x17c>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b18      	ldr	r3, [pc, #96]	; (800685c <pvPortMalloc+0x184>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d203      	bcs.n	800680a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <pvPortMalloc+0x17c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a15      	ldr	r2, [pc, #84]	; (800685c <pvPortMalloc+0x184>)
 8006808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <pvPortMalloc+0x178>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	431a      	orrs	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800681e:	f7fe fc35 	bl	800508c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <pvPortMalloc+0x16a>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <pvPortMalloc+0x168>
	return pvReturn;
 8006842:	69fb      	ldr	r3, [r7, #28]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3728      	adds	r7, #40	; 0x28
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20001ab8 	.word	0x20001ab8
 8006850:	20001ac4 	.word	0x20001ac4
 8006854:	20001abc 	.word	0x20001abc
 8006858:	20001ab0 	.word	0x20001ab0
 800685c:	20001ac0 	.word	0x20001ac0

08006860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d048      	beq.n	8006904 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006872:	2308      	movs	r3, #8
 8006874:	425b      	negs	r3, r3
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4413      	add	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b21      	ldr	r3, [pc, #132]	; (800690c <vPortFree+0xac>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4013      	ands	r3, r2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <vPortFree+0x44>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60fb      	str	r3, [r7, #12]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <vPortFree+0x62>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60bb      	str	r3, [r7, #8]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <vPortFree+0xac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d019      	beq.n	8006904 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d115      	bne.n	8006904 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <vPortFree+0xac>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	401a      	ands	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068e8:	f7fe fbc2 	bl	8005070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <vPortFree+0xb0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	4a06      	ldr	r2, [pc, #24]	; (8006910 <vPortFree+0xb0>)
 80068f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f000 f86c 	bl	80069d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006900:	f7fe fbc4 	bl	800508c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006904:	bf00      	nop
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20001ac4 	.word	0x20001ac4
 8006910:	20001abc 	.word	0x20001abc

08006914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800691a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800691e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <prvHeapInit+0xac>)
 8006922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3307      	adds	r3, #7
 8006932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0307 	bic.w	r3, r3, #7
 800693a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4a1f      	ldr	r2, [pc, #124]	; (80069c0 <prvHeapInit+0xac>)
 8006944:	4413      	add	r3, r2
 8006946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800694c:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <prvHeapInit+0xb0>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <prvHeapInit+0xb0>)
 8006954:	2200      	movs	r2, #0
 8006956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4413      	add	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006960:	2208      	movs	r2, #8
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0307 	bic.w	r3, r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <prvHeapInit+0xb4>)
 8006974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <prvHeapInit+0xb4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800697e:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <prvHeapInit+0xb4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006994:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <prvHeapInit+0xb4>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <prvHeapInit+0xb8>)
 80069a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <prvHeapInit+0xbc>)
 80069aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <prvHeapInit+0xc0>)
 80069ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069b2:	601a      	str	r2, [r3, #0]
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000eb0 	.word	0x20000eb0
 80069c4:	20001ab0 	.word	0x20001ab0
 80069c8:	20001ab8 	.word	0x20001ab8
 80069cc:	20001ac0 	.word	0x20001ac0
 80069d0:	20001abc 	.word	0x20001abc
 80069d4:	20001ac4 	.word	0x20001ac4

080069d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069e0:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <prvInsertBlockIntoFreeList+0xac>)
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e002      	b.n	80069ec <prvInsertBlockIntoFreeList+0x14>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d8f7      	bhi.n	80069e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d108      	bne.n	8006a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	441a      	add	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	441a      	add	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d118      	bne.n	8006a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <prvInsertBlockIntoFreeList+0xb0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d00d      	beq.n	8006a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	441a      	add	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e008      	b.n	8006a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <prvInsertBlockIntoFreeList+0xb0>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e003      	b.n	8006a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d002      	beq.n	8006a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20001ab0 	.word	0x20001ab0
 8006a88:	20001ab8 	.word	0x20001ab8

08006a8c <__errno>:
 8006a8c:	4b01      	ldr	r3, [pc, #4]	; (8006a94 <__errno+0x8>)
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000010 	.word	0x20000010

08006a98 <__libc_init_array>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	4d0d      	ldr	r5, [pc, #52]	; (8006ad0 <__libc_init_array+0x38>)
 8006a9c:	4c0d      	ldr	r4, [pc, #52]	; (8006ad4 <__libc_init_array+0x3c>)
 8006a9e:	1b64      	subs	r4, r4, r5
 8006aa0:	10a4      	asrs	r4, r4, #2
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	d109      	bne.n	8006abc <__libc_init_array+0x24>
 8006aa8:	4d0b      	ldr	r5, [pc, #44]	; (8006ad8 <__libc_init_array+0x40>)
 8006aaa:	4c0c      	ldr	r4, [pc, #48]	; (8006adc <__libc_init_array+0x44>)
 8006aac:	f000 fc8e 	bl	80073cc <_init>
 8006ab0:	1b64      	subs	r4, r4, r5
 8006ab2:	10a4      	asrs	r4, r4, #2
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	42a6      	cmp	r6, r4
 8006ab8:	d105      	bne.n	8006ac6 <__libc_init_array+0x2e>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac0:	4798      	blx	r3
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	e7ee      	b.n	8006aa4 <__libc_init_array+0xc>
 8006ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aca:	4798      	blx	r3
 8006acc:	3601      	adds	r6, #1
 8006ace:	e7f2      	b.n	8006ab6 <__libc_init_array+0x1e>
 8006ad0:	080075a8 	.word	0x080075a8
 8006ad4:	080075a8 	.word	0x080075a8
 8006ad8:	080075a8 	.word	0x080075a8
 8006adc:	080075ac 	.word	0x080075ac

08006ae0 <memcpy>:
 8006ae0:	440a      	add	r2, r1
 8006ae2:	4291      	cmp	r1, r2
 8006ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ae8:	d100      	bne.n	8006aec <memcpy+0xc>
 8006aea:	4770      	bx	lr
 8006aec:	b510      	push	{r4, lr}
 8006aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af6:	4291      	cmp	r1, r2
 8006af8:	d1f9      	bne.n	8006aee <memcpy+0xe>
 8006afa:	bd10      	pop	{r4, pc}

08006afc <memset>:
 8006afc:	4402      	add	r2, r0
 8006afe:	4603      	mov	r3, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <siprintf>:
 8006b0c:	b40e      	push	{r1, r2, r3}
 8006b0e:	b500      	push	{lr}
 8006b10:	b09c      	sub	sp, #112	; 0x70
 8006b12:	ab1d      	add	r3, sp, #116	; 0x74
 8006b14:	9002      	str	r0, [sp, #8]
 8006b16:	9006      	str	r0, [sp, #24]
 8006b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b1c:	4809      	ldr	r0, [pc, #36]	; (8006b44 <siprintf+0x38>)
 8006b1e:	9107      	str	r1, [sp, #28]
 8006b20:	9104      	str	r1, [sp, #16]
 8006b22:	4909      	ldr	r1, [pc, #36]	; (8006b48 <siprintf+0x3c>)
 8006b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b28:	9105      	str	r1, [sp, #20]
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	a902      	add	r1, sp, #8
 8006b30:	f000 f868 	bl	8006c04 <_svfiprintf_r>
 8006b34:	9b02      	ldr	r3, [sp, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	b01c      	add	sp, #112	; 0x70
 8006b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b40:	b003      	add	sp, #12
 8006b42:	4770      	bx	lr
 8006b44:	20000010 	.word	0x20000010
 8006b48:	ffff0208 	.word	0xffff0208

08006b4c <__ssputs_r>:
 8006b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b50:	688e      	ldr	r6, [r1, #8]
 8006b52:	429e      	cmp	r6, r3
 8006b54:	4682      	mov	sl, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	4690      	mov	r8, r2
 8006b5a:	461f      	mov	r7, r3
 8006b5c:	d838      	bhi.n	8006bd0 <__ssputs_r+0x84>
 8006b5e:	898a      	ldrh	r2, [r1, #12]
 8006b60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b64:	d032      	beq.n	8006bcc <__ssputs_r+0x80>
 8006b66:	6825      	ldr	r5, [r4, #0]
 8006b68:	6909      	ldr	r1, [r1, #16]
 8006b6a:	eba5 0901 	sub.w	r9, r5, r1
 8006b6e:	6965      	ldr	r5, [r4, #20]
 8006b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b78:	3301      	adds	r3, #1
 8006b7a:	444b      	add	r3, r9
 8006b7c:	106d      	asrs	r5, r5, #1
 8006b7e:	429d      	cmp	r5, r3
 8006b80:	bf38      	it	cc
 8006b82:	461d      	movcc	r5, r3
 8006b84:	0553      	lsls	r3, r2, #21
 8006b86:	d531      	bpl.n	8006bec <__ssputs_r+0xa0>
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f000 fb55 	bl	8007238 <_malloc_r>
 8006b8e:	4606      	mov	r6, r0
 8006b90:	b950      	cbnz	r0, 8006ba8 <__ssputs_r+0x5c>
 8006b92:	230c      	movs	r3, #12
 8006b94:	f8ca 3000 	str.w	r3, [sl]
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba8:	6921      	ldr	r1, [r4, #16]
 8006baa:	464a      	mov	r2, r9
 8006bac:	f7ff ff98 	bl	8006ae0 <memcpy>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	6126      	str	r6, [r4, #16]
 8006bbe:	6165      	str	r5, [r4, #20]
 8006bc0:	444e      	add	r6, r9
 8006bc2:	eba5 0509 	sub.w	r5, r5, r9
 8006bc6:	6026      	str	r6, [r4, #0]
 8006bc8:	60a5      	str	r5, [r4, #8]
 8006bca:	463e      	mov	r6, r7
 8006bcc:	42be      	cmp	r6, r7
 8006bce:	d900      	bls.n	8006bd2 <__ssputs_r+0x86>
 8006bd0:	463e      	mov	r6, r7
 8006bd2:	6820      	ldr	r0, [r4, #0]
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	4641      	mov	r1, r8
 8006bd8:	f000 faa8 	bl	800712c <memmove>
 8006bdc:	68a3      	ldr	r3, [r4, #8]
 8006bde:	1b9b      	subs	r3, r3, r6
 8006be0:	60a3      	str	r3, [r4, #8]
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	4433      	add	r3, r6
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	2000      	movs	r0, #0
 8006bea:	e7db      	b.n	8006ba4 <__ssputs_r+0x58>
 8006bec:	462a      	mov	r2, r5
 8006bee:	f000 fb97 	bl	8007320 <_realloc_r>
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d1e1      	bne.n	8006bbc <__ssputs_r+0x70>
 8006bf8:	6921      	ldr	r1, [r4, #16]
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	f000 fab0 	bl	8007160 <_free_r>
 8006c00:	e7c7      	b.n	8006b92 <__ssputs_r+0x46>
	...

08006c04 <_svfiprintf_r>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	4698      	mov	r8, r3
 8006c0a:	898b      	ldrh	r3, [r1, #12]
 8006c0c:	061b      	lsls	r3, r3, #24
 8006c0e:	b09d      	sub	sp, #116	; 0x74
 8006c10:	4607      	mov	r7, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	4614      	mov	r4, r2
 8006c16:	d50e      	bpl.n	8006c36 <_svfiprintf_r+0x32>
 8006c18:	690b      	ldr	r3, [r1, #16]
 8006c1a:	b963      	cbnz	r3, 8006c36 <_svfiprintf_r+0x32>
 8006c1c:	2140      	movs	r1, #64	; 0x40
 8006c1e:	f000 fb0b 	bl	8007238 <_malloc_r>
 8006c22:	6028      	str	r0, [r5, #0]
 8006c24:	6128      	str	r0, [r5, #16]
 8006c26:	b920      	cbnz	r0, 8006c32 <_svfiprintf_r+0x2e>
 8006c28:	230c      	movs	r3, #12
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	e0d1      	b.n	8006dd6 <_svfiprintf_r+0x1d2>
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	616b      	str	r3, [r5, #20]
 8006c36:	2300      	movs	r3, #0
 8006c38:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3a:	2320      	movs	r3, #32
 8006c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c44:	2330      	movs	r3, #48	; 0x30
 8006c46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006df0 <_svfiprintf_r+0x1ec>
 8006c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c4e:	f04f 0901 	mov.w	r9, #1
 8006c52:	4623      	mov	r3, r4
 8006c54:	469a      	mov	sl, r3
 8006c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c5a:	b10a      	cbz	r2, 8006c60 <_svfiprintf_r+0x5c>
 8006c5c:	2a25      	cmp	r2, #37	; 0x25
 8006c5e:	d1f9      	bne.n	8006c54 <_svfiprintf_r+0x50>
 8006c60:	ebba 0b04 	subs.w	fp, sl, r4
 8006c64:	d00b      	beq.n	8006c7e <_svfiprintf_r+0x7a>
 8006c66:	465b      	mov	r3, fp
 8006c68:	4622      	mov	r2, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f7ff ff6d 	bl	8006b4c <__ssputs_r>
 8006c72:	3001      	adds	r0, #1
 8006c74:	f000 80aa 	beq.w	8006dcc <_svfiprintf_r+0x1c8>
 8006c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c7a:	445a      	add	r2, fp
 8006c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80a2 	beq.w	8006dcc <_svfiprintf_r+0x1c8>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c92:	f10a 0a01 	add.w	sl, sl, #1
 8006c96:	9304      	str	r3, [sp, #16]
 8006c98:	9307      	str	r3, [sp, #28]
 8006c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006ca0:	4654      	mov	r4, sl
 8006ca2:	2205      	movs	r2, #5
 8006ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca8:	4851      	ldr	r0, [pc, #324]	; (8006df0 <_svfiprintf_r+0x1ec>)
 8006caa:	f7f9 fa99 	bl	80001e0 <memchr>
 8006cae:	9a04      	ldr	r2, [sp, #16]
 8006cb0:	b9d8      	cbnz	r0, 8006cea <_svfiprintf_r+0xe6>
 8006cb2:	06d0      	lsls	r0, r2, #27
 8006cb4:	bf44      	itt	mi
 8006cb6:	2320      	movmi	r3, #32
 8006cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cbc:	0711      	lsls	r1, r2, #28
 8006cbe:	bf44      	itt	mi
 8006cc0:	232b      	movmi	r3, #43	; 0x2b
 8006cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cca:	2b2a      	cmp	r3, #42	; 0x2a
 8006ccc:	d015      	beq.n	8006cfa <_svfiprintf_r+0xf6>
 8006cce:	9a07      	ldr	r2, [sp, #28]
 8006cd0:	4654      	mov	r4, sl
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	f04f 0c0a 	mov.w	ip, #10
 8006cd8:	4621      	mov	r1, r4
 8006cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cde:	3b30      	subs	r3, #48	; 0x30
 8006ce0:	2b09      	cmp	r3, #9
 8006ce2:	d94e      	bls.n	8006d82 <_svfiprintf_r+0x17e>
 8006ce4:	b1b0      	cbz	r0, 8006d14 <_svfiprintf_r+0x110>
 8006ce6:	9207      	str	r2, [sp, #28]
 8006ce8:	e014      	b.n	8006d14 <_svfiprintf_r+0x110>
 8006cea:	eba0 0308 	sub.w	r3, r0, r8
 8006cee:	fa09 f303 	lsl.w	r3, r9, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	46a2      	mov	sl, r4
 8006cf8:	e7d2      	b.n	8006ca0 <_svfiprintf_r+0x9c>
 8006cfa:	9b03      	ldr	r3, [sp, #12]
 8006cfc:	1d19      	adds	r1, r3, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	9103      	str	r1, [sp, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bfbb      	ittet	lt
 8006d06:	425b      	neglt	r3, r3
 8006d08:	f042 0202 	orrlt.w	r2, r2, #2
 8006d0c:	9307      	strge	r3, [sp, #28]
 8006d0e:	9307      	strlt	r3, [sp, #28]
 8006d10:	bfb8      	it	lt
 8006d12:	9204      	strlt	r2, [sp, #16]
 8006d14:	7823      	ldrb	r3, [r4, #0]
 8006d16:	2b2e      	cmp	r3, #46	; 0x2e
 8006d18:	d10c      	bne.n	8006d34 <_svfiprintf_r+0x130>
 8006d1a:	7863      	ldrb	r3, [r4, #1]
 8006d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1e:	d135      	bne.n	8006d8c <_svfiprintf_r+0x188>
 8006d20:	9b03      	ldr	r3, [sp, #12]
 8006d22:	1d1a      	adds	r2, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	9203      	str	r2, [sp, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfb8      	it	lt
 8006d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d30:	3402      	adds	r4, #2
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e00 <_svfiprintf_r+0x1fc>
 8006d38:	7821      	ldrb	r1, [r4, #0]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	f7f9 fa4f 	bl	80001e0 <memchr>
 8006d42:	b140      	cbz	r0, 8006d56 <_svfiprintf_r+0x152>
 8006d44:	2340      	movs	r3, #64	; 0x40
 8006d46:	eba0 000a 	sub.w	r0, r0, sl
 8006d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	4303      	orrs	r3, r0
 8006d52:	3401      	adds	r4, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5a:	4826      	ldr	r0, [pc, #152]	; (8006df4 <_svfiprintf_r+0x1f0>)
 8006d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d60:	2206      	movs	r2, #6
 8006d62:	f7f9 fa3d 	bl	80001e0 <memchr>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d038      	beq.n	8006ddc <_svfiprintf_r+0x1d8>
 8006d6a:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <_svfiprintf_r+0x1f4>)
 8006d6c:	bb1b      	cbnz	r3, 8006db6 <_svfiprintf_r+0x1b2>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	3308      	adds	r3, #8
 8006d78:	9303      	str	r3, [sp, #12]
 8006d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7c:	4433      	add	r3, r6
 8006d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d80:	e767      	b.n	8006c52 <_svfiprintf_r+0x4e>
 8006d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d86:	460c      	mov	r4, r1
 8006d88:	2001      	movs	r0, #1
 8006d8a:	e7a5      	b.n	8006cd8 <_svfiprintf_r+0xd4>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	3401      	adds	r4, #1
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	4619      	mov	r1, r3
 8006d94:	f04f 0c0a 	mov.w	ip, #10
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d9e:	3a30      	subs	r2, #48	; 0x30
 8006da0:	2a09      	cmp	r2, #9
 8006da2:	d903      	bls.n	8006dac <_svfiprintf_r+0x1a8>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0c5      	beq.n	8006d34 <_svfiprintf_r+0x130>
 8006da8:	9105      	str	r1, [sp, #20]
 8006daa:	e7c3      	b.n	8006d34 <_svfiprintf_r+0x130>
 8006dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db0:	4604      	mov	r4, r0
 8006db2:	2301      	movs	r3, #1
 8006db4:	e7f0      	b.n	8006d98 <_svfiprintf_r+0x194>
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	462a      	mov	r2, r5
 8006dbc:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <_svfiprintf_r+0x1f8>)
 8006dbe:	a904      	add	r1, sp, #16
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f3af 8000 	nop.w
 8006dc6:	1c42      	adds	r2, r0, #1
 8006dc8:	4606      	mov	r6, r0
 8006dca:	d1d6      	bne.n	8006d7a <_svfiprintf_r+0x176>
 8006dcc:	89ab      	ldrh	r3, [r5, #12]
 8006dce:	065b      	lsls	r3, r3, #25
 8006dd0:	f53f af2c 	bmi.w	8006c2c <_svfiprintf_r+0x28>
 8006dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd6:	b01d      	add	sp, #116	; 0x74
 8006dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	462a      	mov	r2, r5
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <_svfiprintf_r+0x1f8>)
 8006de4:	a904      	add	r1, sp, #16
 8006de6:	4638      	mov	r0, r7
 8006de8:	f000 f87a 	bl	8006ee0 <_printf_i>
 8006dec:	e7eb      	b.n	8006dc6 <_svfiprintf_r+0x1c2>
 8006dee:	bf00      	nop
 8006df0:	08007574 	.word	0x08007574
 8006df4:	0800757e 	.word	0x0800757e
 8006df8:	00000000 	.word	0x00000000
 8006dfc:	08006b4d 	.word	0x08006b4d
 8006e00:	0800757a 	.word	0x0800757a

08006e04 <_printf_common>:
 8006e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e08:	4616      	mov	r6, r2
 8006e0a:	4699      	mov	r9, r3
 8006e0c:	688a      	ldr	r2, [r1, #8]
 8006e0e:	690b      	ldr	r3, [r1, #16]
 8006e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bfb8      	it	lt
 8006e18:	4613      	movlt	r3, r2
 8006e1a:	6033      	str	r3, [r6, #0]
 8006e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e20:	4607      	mov	r7, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	b10a      	cbz	r2, 8006e2a <_printf_common+0x26>
 8006e26:	3301      	adds	r3, #1
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	0699      	lsls	r1, r3, #26
 8006e2e:	bf42      	ittt	mi
 8006e30:	6833      	ldrmi	r3, [r6, #0]
 8006e32:	3302      	addmi	r3, #2
 8006e34:	6033      	strmi	r3, [r6, #0]
 8006e36:	6825      	ldr	r5, [r4, #0]
 8006e38:	f015 0506 	ands.w	r5, r5, #6
 8006e3c:	d106      	bne.n	8006e4c <_printf_common+0x48>
 8006e3e:	f104 0a19 	add.w	sl, r4, #25
 8006e42:	68e3      	ldr	r3, [r4, #12]
 8006e44:	6832      	ldr	r2, [r6, #0]
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	42ab      	cmp	r3, r5
 8006e4a:	dc26      	bgt.n	8006e9a <_printf_common+0x96>
 8006e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e50:	1e13      	subs	r3, r2, #0
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	bf18      	it	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	0692      	lsls	r2, r2, #26
 8006e5a:	d42b      	bmi.n	8006eb4 <_printf_common+0xb0>
 8006e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e60:	4649      	mov	r1, r9
 8006e62:	4638      	mov	r0, r7
 8006e64:	47c0      	blx	r8
 8006e66:	3001      	adds	r0, #1
 8006e68:	d01e      	beq.n	8006ea8 <_printf_common+0xa4>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	68e5      	ldr	r5, [r4, #12]
 8006e6e:	6832      	ldr	r2, [r6, #0]
 8006e70:	f003 0306 	and.w	r3, r3, #6
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	bf08      	it	eq
 8006e78:	1aad      	subeq	r5, r5, r2
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	bf0c      	ite	eq
 8006e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e84:	2500      	movne	r5, #0
 8006e86:	4293      	cmp	r3, r2
 8006e88:	bfc4      	itt	gt
 8006e8a:	1a9b      	subgt	r3, r3, r2
 8006e8c:	18ed      	addgt	r5, r5, r3
 8006e8e:	2600      	movs	r6, #0
 8006e90:	341a      	adds	r4, #26
 8006e92:	42b5      	cmp	r5, r6
 8006e94:	d11a      	bne.n	8006ecc <_printf_common+0xc8>
 8006e96:	2000      	movs	r0, #0
 8006e98:	e008      	b.n	8006eac <_printf_common+0xa8>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4652      	mov	r2, sl
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	47c0      	blx	r8
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d103      	bne.n	8006eb0 <_printf_common+0xac>
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	e7c6      	b.n	8006e42 <_printf_common+0x3e>
 8006eb4:	18e1      	adds	r1, r4, r3
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	2030      	movs	r0, #48	; 0x30
 8006eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ebe:	4422      	add	r2, r4
 8006ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ec8:	3302      	adds	r3, #2
 8006eca:	e7c7      	b.n	8006e5c <_printf_common+0x58>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4622      	mov	r2, r4
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	47c0      	blx	r8
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d0e6      	beq.n	8006ea8 <_printf_common+0xa4>
 8006eda:	3601      	adds	r6, #1
 8006edc:	e7d9      	b.n	8006e92 <_printf_common+0x8e>
	...

08006ee0 <_printf_i>:
 8006ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee4:	7e0f      	ldrb	r7, [r1, #24]
 8006ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ee8:	2f78      	cmp	r7, #120	; 0x78
 8006eea:	4691      	mov	r9, r2
 8006eec:	4680      	mov	r8, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	469a      	mov	sl, r3
 8006ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ef6:	d807      	bhi.n	8006f08 <_printf_i+0x28>
 8006ef8:	2f62      	cmp	r7, #98	; 0x62
 8006efa:	d80a      	bhi.n	8006f12 <_printf_i+0x32>
 8006efc:	2f00      	cmp	r7, #0
 8006efe:	f000 80d8 	beq.w	80070b2 <_printf_i+0x1d2>
 8006f02:	2f58      	cmp	r7, #88	; 0x58
 8006f04:	f000 80a3 	beq.w	800704e <_printf_i+0x16e>
 8006f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f10:	e03a      	b.n	8006f88 <_printf_i+0xa8>
 8006f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f16:	2b15      	cmp	r3, #21
 8006f18:	d8f6      	bhi.n	8006f08 <_printf_i+0x28>
 8006f1a:	a101      	add	r1, pc, #4	; (adr r1, 8006f20 <_printf_i+0x40>)
 8006f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f20:	08006f79 	.word	0x08006f79
 8006f24:	08006f8d 	.word	0x08006f8d
 8006f28:	08006f09 	.word	0x08006f09
 8006f2c:	08006f09 	.word	0x08006f09
 8006f30:	08006f09 	.word	0x08006f09
 8006f34:	08006f09 	.word	0x08006f09
 8006f38:	08006f8d 	.word	0x08006f8d
 8006f3c:	08006f09 	.word	0x08006f09
 8006f40:	08006f09 	.word	0x08006f09
 8006f44:	08006f09 	.word	0x08006f09
 8006f48:	08006f09 	.word	0x08006f09
 8006f4c:	08007099 	.word	0x08007099
 8006f50:	08006fbd 	.word	0x08006fbd
 8006f54:	0800707b 	.word	0x0800707b
 8006f58:	08006f09 	.word	0x08006f09
 8006f5c:	08006f09 	.word	0x08006f09
 8006f60:	080070bb 	.word	0x080070bb
 8006f64:	08006f09 	.word	0x08006f09
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006f09 	.word	0x08006f09
 8006f70:	08006f09 	.word	0x08006f09
 8006f74:	08007083 	.word	0x08007083
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	1d1a      	adds	r2, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	602a      	str	r2, [r5, #0]
 8006f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e0a3      	b.n	80070d4 <_printf_i+0x1f4>
 8006f8c:	6820      	ldr	r0, [r4, #0]
 8006f8e:	6829      	ldr	r1, [r5, #0]
 8006f90:	0606      	lsls	r6, r0, #24
 8006f92:	f101 0304 	add.w	r3, r1, #4
 8006f96:	d50a      	bpl.n	8006fae <_printf_i+0xce>
 8006f98:	680e      	ldr	r6, [r1, #0]
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	2e00      	cmp	r6, #0
 8006f9e:	da03      	bge.n	8006fa8 <_printf_i+0xc8>
 8006fa0:	232d      	movs	r3, #45	; 0x2d
 8006fa2:	4276      	negs	r6, r6
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa8:	485e      	ldr	r0, [pc, #376]	; (8007124 <_printf_i+0x244>)
 8006faa:	230a      	movs	r3, #10
 8006fac:	e019      	b.n	8006fe2 <_printf_i+0x102>
 8006fae:	680e      	ldr	r6, [r1, #0]
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fb6:	bf18      	it	ne
 8006fb8:	b236      	sxthne	r6, r6
 8006fba:	e7ef      	b.n	8006f9c <_printf_i+0xbc>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	1d19      	adds	r1, r3, #4
 8006fc2:	6029      	str	r1, [r5, #0]
 8006fc4:	0601      	lsls	r1, r0, #24
 8006fc6:	d501      	bpl.n	8006fcc <_printf_i+0xec>
 8006fc8:	681e      	ldr	r6, [r3, #0]
 8006fca:	e002      	b.n	8006fd2 <_printf_i+0xf2>
 8006fcc:	0646      	lsls	r6, r0, #25
 8006fce:	d5fb      	bpl.n	8006fc8 <_printf_i+0xe8>
 8006fd0:	881e      	ldrh	r6, [r3, #0]
 8006fd2:	4854      	ldr	r0, [pc, #336]	; (8007124 <_printf_i+0x244>)
 8006fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2308      	moveq	r3, #8
 8006fda:	230a      	movne	r3, #10
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fe2:	6865      	ldr	r5, [r4, #4]
 8006fe4:	60a5      	str	r5, [r4, #8]
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	bfa2      	ittt	ge
 8006fea:	6821      	ldrge	r1, [r4, #0]
 8006fec:	f021 0104 	bicge.w	r1, r1, #4
 8006ff0:	6021      	strge	r1, [r4, #0]
 8006ff2:	b90e      	cbnz	r6, 8006ff8 <_printf_i+0x118>
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	d04d      	beq.n	8007094 <_printf_i+0x1b4>
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8007002:	5dc7      	ldrb	r7, [r0, r7]
 8007004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007008:	4637      	mov	r7, r6
 800700a:	42bb      	cmp	r3, r7
 800700c:	460e      	mov	r6, r1
 800700e:	d9f4      	bls.n	8006ffa <_printf_i+0x11a>
 8007010:	2b08      	cmp	r3, #8
 8007012:	d10b      	bne.n	800702c <_printf_i+0x14c>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	07de      	lsls	r6, r3, #31
 8007018:	d508      	bpl.n	800702c <_printf_i+0x14c>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	6861      	ldr	r1, [r4, #4]
 800701e:	4299      	cmp	r1, r3
 8007020:	bfde      	ittt	le
 8007022:	2330      	movle	r3, #48	; 0x30
 8007024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800702c:	1b52      	subs	r2, r2, r5
 800702e:	6122      	str	r2, [r4, #16]
 8007030:	f8cd a000 	str.w	sl, [sp]
 8007034:	464b      	mov	r3, r9
 8007036:	aa03      	add	r2, sp, #12
 8007038:	4621      	mov	r1, r4
 800703a:	4640      	mov	r0, r8
 800703c:	f7ff fee2 	bl	8006e04 <_printf_common>
 8007040:	3001      	adds	r0, #1
 8007042:	d14c      	bne.n	80070de <_printf_i+0x1fe>
 8007044:	f04f 30ff 	mov.w	r0, #4294967295
 8007048:	b004      	add	sp, #16
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	4835      	ldr	r0, [pc, #212]	; (8007124 <_printf_i+0x244>)
 8007050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007054:	6829      	ldr	r1, [r5, #0]
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f851 6b04 	ldr.w	r6, [r1], #4
 800705c:	6029      	str	r1, [r5, #0]
 800705e:	061d      	lsls	r5, r3, #24
 8007060:	d514      	bpl.n	800708c <_printf_i+0x1ac>
 8007062:	07df      	lsls	r7, r3, #31
 8007064:	bf44      	itt	mi
 8007066:	f043 0320 	orrmi.w	r3, r3, #32
 800706a:	6023      	strmi	r3, [r4, #0]
 800706c:	b91e      	cbnz	r6, 8007076 <_printf_i+0x196>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	f023 0320 	bic.w	r3, r3, #32
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	2310      	movs	r3, #16
 8007078:	e7b0      	b.n	8006fdc <_printf_i+0xfc>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	f043 0320 	orr.w	r3, r3, #32
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	2378      	movs	r3, #120	; 0x78
 8007084:	4828      	ldr	r0, [pc, #160]	; (8007128 <_printf_i+0x248>)
 8007086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800708a:	e7e3      	b.n	8007054 <_printf_i+0x174>
 800708c:	0659      	lsls	r1, r3, #25
 800708e:	bf48      	it	mi
 8007090:	b2b6      	uxthmi	r6, r6
 8007092:	e7e6      	b.n	8007062 <_printf_i+0x182>
 8007094:	4615      	mov	r5, r2
 8007096:	e7bb      	b.n	8007010 <_printf_i+0x130>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	6826      	ldr	r6, [r4, #0]
 800709c:	6961      	ldr	r1, [r4, #20]
 800709e:	1d18      	adds	r0, r3, #4
 80070a0:	6028      	str	r0, [r5, #0]
 80070a2:	0635      	lsls	r5, r6, #24
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	d501      	bpl.n	80070ac <_printf_i+0x1cc>
 80070a8:	6019      	str	r1, [r3, #0]
 80070aa:	e002      	b.n	80070b2 <_printf_i+0x1d2>
 80070ac:	0670      	lsls	r0, r6, #25
 80070ae:	d5fb      	bpl.n	80070a8 <_printf_i+0x1c8>
 80070b0:	8019      	strh	r1, [r3, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	4615      	mov	r5, r2
 80070b8:	e7ba      	b.n	8007030 <_printf_i+0x150>
 80070ba:	682b      	ldr	r3, [r5, #0]
 80070bc:	1d1a      	adds	r2, r3, #4
 80070be:	602a      	str	r2, [r5, #0]
 80070c0:	681d      	ldr	r5, [r3, #0]
 80070c2:	6862      	ldr	r2, [r4, #4]
 80070c4:	2100      	movs	r1, #0
 80070c6:	4628      	mov	r0, r5
 80070c8:	f7f9 f88a 	bl	80001e0 <memchr>
 80070cc:	b108      	cbz	r0, 80070d2 <_printf_i+0x1f2>
 80070ce:	1b40      	subs	r0, r0, r5
 80070d0:	6060      	str	r0, [r4, #4]
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	2300      	movs	r3, #0
 80070d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070dc:	e7a8      	b.n	8007030 <_printf_i+0x150>
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	462a      	mov	r2, r5
 80070e2:	4649      	mov	r1, r9
 80070e4:	4640      	mov	r0, r8
 80070e6:	47d0      	blx	sl
 80070e8:	3001      	adds	r0, #1
 80070ea:	d0ab      	beq.n	8007044 <_printf_i+0x164>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	079b      	lsls	r3, r3, #30
 80070f0:	d413      	bmi.n	800711a <_printf_i+0x23a>
 80070f2:	68e0      	ldr	r0, [r4, #12]
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	4298      	cmp	r0, r3
 80070f8:	bfb8      	it	lt
 80070fa:	4618      	movlt	r0, r3
 80070fc:	e7a4      	b.n	8007048 <_printf_i+0x168>
 80070fe:	2301      	movs	r3, #1
 8007100:	4632      	mov	r2, r6
 8007102:	4649      	mov	r1, r9
 8007104:	4640      	mov	r0, r8
 8007106:	47d0      	blx	sl
 8007108:	3001      	adds	r0, #1
 800710a:	d09b      	beq.n	8007044 <_printf_i+0x164>
 800710c:	3501      	adds	r5, #1
 800710e:	68e3      	ldr	r3, [r4, #12]
 8007110:	9903      	ldr	r1, [sp, #12]
 8007112:	1a5b      	subs	r3, r3, r1
 8007114:	42ab      	cmp	r3, r5
 8007116:	dcf2      	bgt.n	80070fe <_printf_i+0x21e>
 8007118:	e7eb      	b.n	80070f2 <_printf_i+0x212>
 800711a:	2500      	movs	r5, #0
 800711c:	f104 0619 	add.w	r6, r4, #25
 8007120:	e7f5      	b.n	800710e <_printf_i+0x22e>
 8007122:	bf00      	nop
 8007124:	08007585 	.word	0x08007585
 8007128:	08007596 	.word	0x08007596

0800712c <memmove>:
 800712c:	4288      	cmp	r0, r1
 800712e:	b510      	push	{r4, lr}
 8007130:	eb01 0402 	add.w	r4, r1, r2
 8007134:	d902      	bls.n	800713c <memmove+0x10>
 8007136:	4284      	cmp	r4, r0
 8007138:	4623      	mov	r3, r4
 800713a:	d807      	bhi.n	800714c <memmove+0x20>
 800713c:	1e43      	subs	r3, r0, #1
 800713e:	42a1      	cmp	r1, r4
 8007140:	d008      	beq.n	8007154 <memmove+0x28>
 8007142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800714a:	e7f8      	b.n	800713e <memmove+0x12>
 800714c:	4402      	add	r2, r0
 800714e:	4601      	mov	r1, r0
 8007150:	428a      	cmp	r2, r1
 8007152:	d100      	bne.n	8007156 <memmove+0x2a>
 8007154:	bd10      	pop	{r4, pc}
 8007156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800715a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800715e:	e7f7      	b.n	8007150 <memmove+0x24>

08007160 <_free_r>:
 8007160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007162:	2900      	cmp	r1, #0
 8007164:	d044      	beq.n	80071f0 <_free_r+0x90>
 8007166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800716a:	9001      	str	r0, [sp, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f1a1 0404 	sub.w	r4, r1, #4
 8007172:	bfb8      	it	lt
 8007174:	18e4      	addlt	r4, r4, r3
 8007176:	f000 f913 	bl	80073a0 <__malloc_lock>
 800717a:	4a1e      	ldr	r2, [pc, #120]	; (80071f4 <_free_r+0x94>)
 800717c:	9801      	ldr	r0, [sp, #4]
 800717e:	6813      	ldr	r3, [r2, #0]
 8007180:	b933      	cbnz	r3, 8007190 <_free_r+0x30>
 8007182:	6063      	str	r3, [r4, #4]
 8007184:	6014      	str	r4, [r2, #0]
 8007186:	b003      	add	sp, #12
 8007188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800718c:	f000 b90e 	b.w	80073ac <__malloc_unlock>
 8007190:	42a3      	cmp	r3, r4
 8007192:	d908      	bls.n	80071a6 <_free_r+0x46>
 8007194:	6825      	ldr	r5, [r4, #0]
 8007196:	1961      	adds	r1, r4, r5
 8007198:	428b      	cmp	r3, r1
 800719a:	bf01      	itttt	eq
 800719c:	6819      	ldreq	r1, [r3, #0]
 800719e:	685b      	ldreq	r3, [r3, #4]
 80071a0:	1949      	addeq	r1, r1, r5
 80071a2:	6021      	streq	r1, [r4, #0]
 80071a4:	e7ed      	b.n	8007182 <_free_r+0x22>
 80071a6:	461a      	mov	r2, r3
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	b10b      	cbz	r3, 80071b0 <_free_r+0x50>
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	d9fa      	bls.n	80071a6 <_free_r+0x46>
 80071b0:	6811      	ldr	r1, [r2, #0]
 80071b2:	1855      	adds	r5, r2, r1
 80071b4:	42a5      	cmp	r5, r4
 80071b6:	d10b      	bne.n	80071d0 <_free_r+0x70>
 80071b8:	6824      	ldr	r4, [r4, #0]
 80071ba:	4421      	add	r1, r4
 80071bc:	1854      	adds	r4, r2, r1
 80071be:	42a3      	cmp	r3, r4
 80071c0:	6011      	str	r1, [r2, #0]
 80071c2:	d1e0      	bne.n	8007186 <_free_r+0x26>
 80071c4:	681c      	ldr	r4, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	6053      	str	r3, [r2, #4]
 80071ca:	4421      	add	r1, r4
 80071cc:	6011      	str	r1, [r2, #0]
 80071ce:	e7da      	b.n	8007186 <_free_r+0x26>
 80071d0:	d902      	bls.n	80071d8 <_free_r+0x78>
 80071d2:	230c      	movs	r3, #12
 80071d4:	6003      	str	r3, [r0, #0]
 80071d6:	e7d6      	b.n	8007186 <_free_r+0x26>
 80071d8:	6825      	ldr	r5, [r4, #0]
 80071da:	1961      	adds	r1, r4, r5
 80071dc:	428b      	cmp	r3, r1
 80071de:	bf04      	itt	eq
 80071e0:	6819      	ldreq	r1, [r3, #0]
 80071e2:	685b      	ldreq	r3, [r3, #4]
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	bf04      	itt	eq
 80071e8:	1949      	addeq	r1, r1, r5
 80071ea:	6021      	streq	r1, [r4, #0]
 80071ec:	6054      	str	r4, [r2, #4]
 80071ee:	e7ca      	b.n	8007186 <_free_r+0x26>
 80071f0:	b003      	add	sp, #12
 80071f2:	bd30      	pop	{r4, r5, pc}
 80071f4:	20001ac8 	.word	0x20001ac8

080071f8 <sbrk_aligned>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4e0e      	ldr	r6, [pc, #56]	; (8007234 <sbrk_aligned+0x3c>)
 80071fc:	460c      	mov	r4, r1
 80071fe:	6831      	ldr	r1, [r6, #0]
 8007200:	4605      	mov	r5, r0
 8007202:	b911      	cbnz	r1, 800720a <sbrk_aligned+0x12>
 8007204:	f000 f8bc 	bl	8007380 <_sbrk_r>
 8007208:	6030      	str	r0, [r6, #0]
 800720a:	4621      	mov	r1, r4
 800720c:	4628      	mov	r0, r5
 800720e:	f000 f8b7 	bl	8007380 <_sbrk_r>
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	d00a      	beq.n	800722c <sbrk_aligned+0x34>
 8007216:	1cc4      	adds	r4, r0, #3
 8007218:	f024 0403 	bic.w	r4, r4, #3
 800721c:	42a0      	cmp	r0, r4
 800721e:	d007      	beq.n	8007230 <sbrk_aligned+0x38>
 8007220:	1a21      	subs	r1, r4, r0
 8007222:	4628      	mov	r0, r5
 8007224:	f000 f8ac 	bl	8007380 <_sbrk_r>
 8007228:	3001      	adds	r0, #1
 800722a:	d101      	bne.n	8007230 <sbrk_aligned+0x38>
 800722c:	f04f 34ff 	mov.w	r4, #4294967295
 8007230:	4620      	mov	r0, r4
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	20001acc 	.word	0x20001acc

08007238 <_malloc_r>:
 8007238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723c:	1ccd      	adds	r5, r1, #3
 800723e:	f025 0503 	bic.w	r5, r5, #3
 8007242:	3508      	adds	r5, #8
 8007244:	2d0c      	cmp	r5, #12
 8007246:	bf38      	it	cc
 8007248:	250c      	movcc	r5, #12
 800724a:	2d00      	cmp	r5, #0
 800724c:	4607      	mov	r7, r0
 800724e:	db01      	blt.n	8007254 <_malloc_r+0x1c>
 8007250:	42a9      	cmp	r1, r5
 8007252:	d905      	bls.n	8007260 <_malloc_r+0x28>
 8007254:	230c      	movs	r3, #12
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	2600      	movs	r6, #0
 800725a:	4630      	mov	r0, r6
 800725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007260:	4e2e      	ldr	r6, [pc, #184]	; (800731c <_malloc_r+0xe4>)
 8007262:	f000 f89d 	bl	80073a0 <__malloc_lock>
 8007266:	6833      	ldr	r3, [r6, #0]
 8007268:	461c      	mov	r4, r3
 800726a:	bb34      	cbnz	r4, 80072ba <_malloc_r+0x82>
 800726c:	4629      	mov	r1, r5
 800726e:	4638      	mov	r0, r7
 8007270:	f7ff ffc2 	bl	80071f8 <sbrk_aligned>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	4604      	mov	r4, r0
 8007278:	d14d      	bne.n	8007316 <_malloc_r+0xde>
 800727a:	6834      	ldr	r4, [r6, #0]
 800727c:	4626      	mov	r6, r4
 800727e:	2e00      	cmp	r6, #0
 8007280:	d140      	bne.n	8007304 <_malloc_r+0xcc>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	4631      	mov	r1, r6
 8007286:	4638      	mov	r0, r7
 8007288:	eb04 0803 	add.w	r8, r4, r3
 800728c:	f000 f878 	bl	8007380 <_sbrk_r>
 8007290:	4580      	cmp	r8, r0
 8007292:	d13a      	bne.n	800730a <_malloc_r+0xd2>
 8007294:	6821      	ldr	r1, [r4, #0]
 8007296:	3503      	adds	r5, #3
 8007298:	1a6d      	subs	r5, r5, r1
 800729a:	f025 0503 	bic.w	r5, r5, #3
 800729e:	3508      	adds	r5, #8
 80072a0:	2d0c      	cmp	r5, #12
 80072a2:	bf38      	it	cc
 80072a4:	250c      	movcc	r5, #12
 80072a6:	4629      	mov	r1, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ffa5 	bl	80071f8 <sbrk_aligned>
 80072ae:	3001      	adds	r0, #1
 80072b0:	d02b      	beq.n	800730a <_malloc_r+0xd2>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	442b      	add	r3, r5
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	e00e      	b.n	80072d8 <_malloc_r+0xa0>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	1b52      	subs	r2, r2, r5
 80072be:	d41e      	bmi.n	80072fe <_malloc_r+0xc6>
 80072c0:	2a0b      	cmp	r2, #11
 80072c2:	d916      	bls.n	80072f2 <_malloc_r+0xba>
 80072c4:	1961      	adds	r1, r4, r5
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	6025      	str	r5, [r4, #0]
 80072ca:	bf18      	it	ne
 80072cc:	6059      	strne	r1, [r3, #4]
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	bf08      	it	eq
 80072d2:	6031      	streq	r1, [r6, #0]
 80072d4:	5162      	str	r2, [r4, r5]
 80072d6:	604b      	str	r3, [r1, #4]
 80072d8:	4638      	mov	r0, r7
 80072da:	f104 060b 	add.w	r6, r4, #11
 80072de:	f000 f865 	bl	80073ac <__malloc_unlock>
 80072e2:	f026 0607 	bic.w	r6, r6, #7
 80072e6:	1d23      	adds	r3, r4, #4
 80072e8:	1af2      	subs	r2, r6, r3
 80072ea:	d0b6      	beq.n	800725a <_malloc_r+0x22>
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	50a3      	str	r3, [r4, r2]
 80072f0:	e7b3      	b.n	800725a <_malloc_r+0x22>
 80072f2:	6862      	ldr	r2, [r4, #4]
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	bf0c      	ite	eq
 80072f8:	6032      	streq	r2, [r6, #0]
 80072fa:	605a      	strne	r2, [r3, #4]
 80072fc:	e7ec      	b.n	80072d8 <_malloc_r+0xa0>
 80072fe:	4623      	mov	r3, r4
 8007300:	6864      	ldr	r4, [r4, #4]
 8007302:	e7b2      	b.n	800726a <_malloc_r+0x32>
 8007304:	4634      	mov	r4, r6
 8007306:	6876      	ldr	r6, [r6, #4]
 8007308:	e7b9      	b.n	800727e <_malloc_r+0x46>
 800730a:	230c      	movs	r3, #12
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	4638      	mov	r0, r7
 8007310:	f000 f84c 	bl	80073ac <__malloc_unlock>
 8007314:	e7a1      	b.n	800725a <_malloc_r+0x22>
 8007316:	6025      	str	r5, [r4, #0]
 8007318:	e7de      	b.n	80072d8 <_malloc_r+0xa0>
 800731a:	bf00      	nop
 800731c:	20001ac8 	.word	0x20001ac8

08007320 <_realloc_r>:
 8007320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007324:	4680      	mov	r8, r0
 8007326:	4614      	mov	r4, r2
 8007328:	460e      	mov	r6, r1
 800732a:	b921      	cbnz	r1, 8007336 <_realloc_r+0x16>
 800732c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007330:	4611      	mov	r1, r2
 8007332:	f7ff bf81 	b.w	8007238 <_malloc_r>
 8007336:	b92a      	cbnz	r2, 8007344 <_realloc_r+0x24>
 8007338:	f7ff ff12 	bl	8007160 <_free_r>
 800733c:	4625      	mov	r5, r4
 800733e:	4628      	mov	r0, r5
 8007340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007344:	f000 f838 	bl	80073b8 <_malloc_usable_size_r>
 8007348:	4284      	cmp	r4, r0
 800734a:	4607      	mov	r7, r0
 800734c:	d802      	bhi.n	8007354 <_realloc_r+0x34>
 800734e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007352:	d812      	bhi.n	800737a <_realloc_r+0x5a>
 8007354:	4621      	mov	r1, r4
 8007356:	4640      	mov	r0, r8
 8007358:	f7ff ff6e 	bl	8007238 <_malloc_r>
 800735c:	4605      	mov	r5, r0
 800735e:	2800      	cmp	r0, #0
 8007360:	d0ed      	beq.n	800733e <_realloc_r+0x1e>
 8007362:	42bc      	cmp	r4, r7
 8007364:	4622      	mov	r2, r4
 8007366:	4631      	mov	r1, r6
 8007368:	bf28      	it	cs
 800736a:	463a      	movcs	r2, r7
 800736c:	f7ff fbb8 	bl	8006ae0 <memcpy>
 8007370:	4631      	mov	r1, r6
 8007372:	4640      	mov	r0, r8
 8007374:	f7ff fef4 	bl	8007160 <_free_r>
 8007378:	e7e1      	b.n	800733e <_realloc_r+0x1e>
 800737a:	4635      	mov	r5, r6
 800737c:	e7df      	b.n	800733e <_realloc_r+0x1e>
	...

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	; (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7f9 faf2 	bl	8000974 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20001ad0 	.word	0x20001ad0

080073a0 <__malloc_lock>:
 80073a0:	4801      	ldr	r0, [pc, #4]	; (80073a8 <__malloc_lock+0x8>)
 80073a2:	f000 b811 	b.w	80073c8 <__retarget_lock_acquire_recursive>
 80073a6:	bf00      	nop
 80073a8:	20001ad4 	.word	0x20001ad4

080073ac <__malloc_unlock>:
 80073ac:	4801      	ldr	r0, [pc, #4]	; (80073b4 <__malloc_unlock+0x8>)
 80073ae:	f000 b80c 	b.w	80073ca <__retarget_lock_release_recursive>
 80073b2:	bf00      	nop
 80073b4:	20001ad4 	.word	0x20001ad4

080073b8 <_malloc_usable_size_r>:
 80073b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073bc:	1f18      	subs	r0, r3, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bfbc      	itt	lt
 80073c2:	580b      	ldrlt	r3, [r1, r0]
 80073c4:	18c0      	addlt	r0, r0, r3
 80073c6:	4770      	bx	lr

080073c8 <__retarget_lock_acquire_recursive>:
 80073c8:	4770      	bx	lr

080073ca <__retarget_lock_release_recursive>:
 80073ca:	4770      	bx	lr

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
