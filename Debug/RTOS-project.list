
RTOS-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b38  08005b38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005b38  08005b38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b38  08005b38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001a44  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001a54  20001a54  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c7b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e07  00000000  00000000  00037cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0003aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001208  00000000  00000000  0003bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003163  00000000  00000000  0003cfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e70  00000000  00000000  00040143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbcf5  00000000  00000000  00055fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121ca8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005068  00000000  00000000  00121cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a20 	.word	0x08005a20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005a20 	.word	0x08005a20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fad6 	bl	8000794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f834 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f8a4 	bl	8000338 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f0:	f000 f872 	bl	80002d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f002 fe94 	bl	8002f20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DefaultTask */
  DefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &DefaultTask_attributes);
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <main+0x50>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <main+0x54>)
 80001fe:	f002 fef7 	bl	8002ff0 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <main+0x58>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(StartGreenTask, NULL, &GreenTask_attributes);
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <main+0x5c>)
 800020a:	2100      	movs	r1, #0
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <main+0x60>)
 800020e:	f002 feef 	bl	8002ff0 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <main+0x64>)
 8000216:	6013      	str	r3, [r2, #0]

  /* creation of YellowTask */
  YellowTaskHandle = osThreadNew(StartYellowTask, NULL, &YellowTask_attributes);
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <main+0x68>)
 800021a:	2100      	movs	r1, #0
 800021c:	480b      	ldr	r0, [pc, #44]	; (800024c <main+0x6c>)
 800021e:	f002 fee7 	bl	8002ff0 <osThreadNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <main+0x70>)
 8000226:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000228:	f002 feae 	bl	8002f88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	e7fe      	b.n	800022c <main+0x4c>
 800022e:	bf00      	nop
 8000230:	08005a94 	.word	0x08005a94
 8000234:	08000461 	.word	0x08000461
 8000238:	200000b0 	.word	0x200000b0
 800023c:	08005ab8 	.word	0x08005ab8
 8000240:	0800048d 	.word	0x0800048d
 8000244:	200000b4 	.word	0x200000b4
 8000248:	08005adc 	.word	0x08005adc
 800024c:	080004b9 	.word	0x080004b9
 8000250:	200000b8 	.word	0x200000b8

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	; 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f005 fbd4 	bl	8005a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	2310      	movs	r3, #16
 8000280:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000286:	2300      	movs	r3, #0
 8000288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800028a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fd39 	bl	8000d0c <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a0:	f000 f932 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fd62 	bl	8001d88 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ca:	f000 f91d 	bl	8000508 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	; 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <MX_USART2_UART_Init+0x58>)
 80002de:	4a15      	ldr	r2, [pc, #84]	; (8000334 <MX_USART2_UART_Init+0x5c>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <MX_USART2_UART_Init+0x58>)
 80002e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART2_UART_Init+0x58>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_USART2_UART_Init+0x58>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_USART2_UART_Init+0x58>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART2_UART_Init+0x58>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_USART2_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART2_UART_Init+0x58>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_USART2_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART2_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_USART2_UART_Init+0x58>)
 800031c:	f002 fa38 	bl	8002790 <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000326:	f000 f8ef 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	2000002c 	.word	0x2000002c
 8000334:	40004400 	.word	0x40004400

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034e:	4b36      	ldr	r3, [pc, #216]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a35      	ldr	r2, [pc, #212]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b33      	ldr	r3, [pc, #204]	; (8000428 <MX_GPIO_Init+0xf0>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000366:	4b30      	ldr	r3, [pc, #192]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a2f      	ldr	r2, [pc, #188]	; (8000428 <MX_GPIO_Init+0xf0>)
 800036c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a29      	ldr	r2, [pc, #164]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b27      	ldr	r3, [pc, #156]	; (8000428 <MX_GPIO_Init+0xf0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b24      	ldr	r3, [pc, #144]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a23      	ldr	r2, [pc, #140]	; (8000428 <MX_GPIO_Init+0xf0>)
 800039c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b21      	ldr	r3, [pc, #132]	; (8000428 <MX_GPIO_Init+0xf0>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b8:	f000 fc76 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	481a      	ldr	r0, [pc, #104]	; (800042c <MX_GPIO_Init+0xf4>)
 80003c2:	f000 fc71 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	4619      	mov	r1, r3
 80003dc:	4814      	ldr	r0, [pc, #80]	; (8000430 <MX_GPIO_Init+0xf8>)
 80003de:	f000 faf1 	bl	80009c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80003e2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2300      	movs	r3, #0
 80003f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	4619      	mov	r1, r3
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f000 fae1 	bl	80009c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000402:	2320      	movs	r3, #32
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2300      	movs	r3, #0
 8000410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	f107 0314 	add.w	r3, r7, #20
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0xf4>)
 800041a:	f000 fad3 	bl	80009c4 <HAL_GPIO_Init>

}
 800041e:	bf00      	nop
 8000420:	3728      	adds	r7, #40	; 0x28
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	48000400 	.word	0x48000400
 8000430:	48000800 	.word	0x48000800

08000434 <display>:

/* USER CODE BEGIN 4 */

void display(char *message)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff fec7 	bl	80001d0 <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <display+0x28>)
 800044e:	f002 f9ed 	bl	800282c <HAL_UART_Transmit>
	//38400
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000002c 	.word	0x2000002c

08000460 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	char *m = "Default\r\n";
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <StartDefaultTask+0x28>)
 800046a:	60fb      	str	r3, [r7, #12]
	// char m[5] = {'H', 'i', '\r', '\n', '\0'};

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	f7ff ffe1 	bl	8000434 <display>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000472:	2120      	movs	r1, #32
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f000 fc2e 	bl	8000cd8 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800047c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000480:	f002 fe60 	bl	8003144 <osDelay>
	  display(m);
 8000484:	e7f2      	b.n	800046c <StartDefaultTask+0xc>
 8000486:	bf00      	nop
 8000488:	08005a5c 	.word	0x08005a5c

0800048c <StartGreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenTask */
void StartGreenTask(void *argument)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGreenTask */

	char *m = "Green\r\n";
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <StartGreenTask+0x28>)
 8000496:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 8000498:	68f8      	ldr	r0, [r7, #12]
 800049a:	f7ff ffcb 	bl	8000434 <display>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800049e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a6:	f000 fc17 	bl	8000cd8 <HAL_GPIO_TogglePin>
	  osDelay(1500);
 80004aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80004ae:	f002 fe49 	bl	8003144 <osDelay>
	  display(m);
 80004b2:	e7f1      	b.n	8000498 <StartGreenTask+0xc>
 80004b4:	08005a68 	.word	0x08005a68

080004b8 <StartYellowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYellowTask */
void StartYellowTask(void *argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYellowTask */

	char *m = "Yellow\r\n";
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <StartYellowTask+0x24>)
 80004c2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 80004c4:	68f8      	ldr	r0, [r7, #12]
 80004c6:	f7ff ffb5 	bl	8000434 <display>

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80004ca:	2120      	movs	r1, #32
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <StartYellowTask+0x28>)
 80004ce:	f000 fc03 	bl	8000cd8 <HAL_GPIO_TogglePin>
	  osDelay(2000);
 80004d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d6:	f002 fe35 	bl	8003144 <osDelay>
	  display(m);
 80004da:	e7f3      	b.n	80004c4 <StartYellowTask+0xc>
 80004dc:	08005a70 	.word	0x08005a70
 80004e0:	48000400 	.word	0x48000400

080004e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f6:	f000 f963 	bl	80007c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40001000 	.word	0x40001000

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <HAL_MspInit+0x4c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <HAL_MspInit+0x4c>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x4c>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_MspInit+0x4c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <HAL_MspInit+0x4c>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_MspInit+0x4c>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	210f      	movs	r1, #15
 800054e:	f06f 0001 	mvn.w	r0, #1
 8000552:	f000 fa0d 	bl	8000970 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_UART_MspInit+0x7c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d128      	bne.n	80005d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_UART_MspInit+0x80>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <HAL_UART_MspInit+0x80>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_UART_MspInit+0x80>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <HAL_UART_MspInit+0x80>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <HAL_UART_MspInit+0x80>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <HAL_UART_MspInit+0x80>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005b6:	230c      	movs	r3, #12
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005c6:	2307      	movs	r3, #7
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f000 f9f6 	bl	80009c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005d8:	bf00      	nop
 80005da:	3728      	adds	r7, #40	; 0x28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40004400 	.word	0x40004400
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <HAL_InitTick+0xe0>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <HAL_InitTick+0xe0>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	61d3      	str	r3, [r2, #28]
 8000604:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <HAL_InitTick+0xe0>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	f003 0310 	and.w	r3, r3, #16
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000610:	f107 0210 	add.w	r2, r7, #16
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fdea 	bl	80021f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000626:	2b00      	cmp	r3, #0
 8000628:	d103      	bne.n	8000632 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800062a:	f001 fd9f 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 800062e:	6378      	str	r0, [r7, #52]	; 0x34
 8000630:	e004      	b.n	800063c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000632:	f001 fd9b 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8000636:	4603      	mov	r3, r0
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <HAL_InitTick+0xe4>)
 8000640:	fba2 2303 	umull	r2, r3, r2, r3
 8000644:	0c9b      	lsrs	r3, r3, #18
 8000646:	3b01      	subs	r3, #1
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <HAL_InitTick+0xe8>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <HAL_InitTick+0xec>)
 800064e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_InitTick+0xe8>)
 8000652:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000656:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000658:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <HAL_InitTick+0xe8>)
 800065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_InitTick+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_InitTick+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <HAL_InitTick+0xe8>)
 8000672:	f001 fdf1 	bl	8002258 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800067c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000680:	2b00      	cmp	r3, #0
 8000682:	d11b      	bne.n	80006bc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <HAL_InitTick+0xe8>)
 8000686:	f001 fe49 	bl	800231c <HAL_TIM_Base_Start_IT>
 800068a:	4603      	mov	r3, r0
 800068c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000690:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000694:	2b00      	cmp	r3, #0
 8000696:	d111      	bne.n	80006bc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000698:	2036      	movs	r0, #54	; 0x36
 800069a:	f000 f985 	bl	80009a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d808      	bhi.n	80006b6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80006a4:	2200      	movs	r2, #0
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	2036      	movs	r0, #54	; 0x36
 80006aa:	f000 f961 	bl	8000970 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0xf0>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e002      	b.n	80006bc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3738      	adds	r7, #56	; 0x38
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	431bde83 	.word	0x431bde83
 80006d0:	200000bc 	.word	0x200000bc
 80006d4:	40001000 	.word	0x40001000
 80006d8:	20000004 	.word	0x20000004

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <TIM6_DAC1_IRQHandler+0x10>)
 800070e:	f001 fe61 	bl	80023d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000bc 	.word	0x200000bc

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SystemInit+0x20>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <SystemInit+0x20>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490e      	ldr	r1, [pc, #56]	; (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0b      	ldr	r4, [pc, #44]	; (800078c <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076a:	f7ff ffd7 	bl	800071c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f005 f91d 	bl	80059ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000772:	f7ff fd35 	bl	80001e0 <main>

08000776 <LoopForever>:

LoopForever:
    b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000778:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000784:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8000788:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800078c:	20001a54 	.word	0x20001a54

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_Init+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_Init+0x28>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f8d8 	bl	800095a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f7ff ff1c 	bl	80005e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff feb0 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x20>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_IncTick+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_IncTick+0x24>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000108 	.word	0x20000108

080007e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_GetTick+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000108 	.word	0x20000108

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <__NVIC_EnableIRQ+0x38>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff4c 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000982:	f7ff ff61 	bl	8000848 <__NVIC_GetPriorityGrouping>
 8000986:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	f7ff ffb1 	bl	80008f4 <NVIC_EncodePriority>
 8000992:	4602      	mov	r2, r0
 8000994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff80 	bl	80008a0 <__NVIC_SetPriority>
}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff54 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d2:	e14e      	b.n	8000c72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 8140 	beq.w	8000c6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d005      	beq.n	8000a04 <HAL_GPIO_Init+0x40>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d130      	bne.n	8000a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	f003 0201 	and.w	r2, r3, #1
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d017      	beq.n	8000aa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d123      	bne.n	8000af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	08da      	lsrs	r2, r3, #3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3208      	adds	r2, #8
 8000ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	691a      	ldr	r2, [r3, #16]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	08da      	lsrs	r2, r3, #3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3208      	adds	r2, #8
 8000af0:	6939      	ldr	r1, [r7, #16]
 8000af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0203 	and.w	r2, r3, #3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 809a 	beq.w	8000c6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a54      	ldr	r2, [pc, #336]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b50:	4a50      	ldr	r2, [pc, #320]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	3302      	adds	r3, #2
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	220f      	movs	r2, #15
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b7a:	d013      	beq.n	8000ba4 <HAL_GPIO_Init+0x1e0>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a46      	ldr	r2, [pc, #280]	; (8000c98 <HAL_GPIO_Init+0x2d4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_Init+0x1dc>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a45      	ldr	r2, [pc, #276]	; (8000c9c <HAL_GPIO_Init+0x2d8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0x1d8>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a44      	ldr	r2, [pc, #272]	; (8000ca0 <HAL_GPIO_Init+0x2dc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_Init+0x1d4>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e006      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000b98:	2305      	movs	r3, #5
 8000b9a:	e004      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e002      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <HAL_GPIO_Init+0x1e2>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	f002 0203 	and.w	r2, r2, #3
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	4093      	lsls	r3, r2
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb6:	4937      	ldr	r1, [pc, #220]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000be8:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c12:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_GPIO_Init+0x2e0>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f47f aea9 	bne.w	80009d4 <HAL_GPIO_Init+0x10>
  }
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48000800 	.word	0x48000800
 8000ca0:	48000c00 	.word	0x48000c00
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc4:	e002      	b.n	8000ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	041a      	lsls	r2, r3, #16
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43d9      	mvns	r1, r3
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	619a      	str	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f001 b823 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 817d 	beq.w	8001042 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d48:	4bbc      	ldr	r3, [pc, #752]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d00c      	beq.n	8000d6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d54:	4bb9      	ldr	r3, [pc, #740]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d15c      	bne.n	8000e1a <HAL_RCC_OscConfig+0x10e>
 8000d60:	4bb6      	ldr	r3, [pc, #728]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6c:	d155      	bne.n	8000e1a <HAL_RCC_OscConfig+0x10e>
 8000d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d86:	fab3 f383 	clz	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	095b      	lsrs	r3, r3, #5
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d102      	bne.n	8000da0 <HAL_RCC_OscConfig+0x94>
 8000d9a:	4ba8      	ldr	r3, [pc, #672]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	e015      	b.n	8000dcc <HAL_RCC_OscConfig+0xc0>
 8000da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dac:	fa93 f3a3 	rbit	r3, r3
 8000db0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dbc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dc8:	4b9c      	ldr	r3, [pc, #624]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dd0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dd4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dd8:	fa92 f2a2 	rbit	r2, r2
 8000ddc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000de0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	f042 0220 	orr.w	r2, r2, #32
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	f002 021f 	and.w	r2, r2, #31
 8000df4:	2101      	movs	r1, #1
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 811f 	beq.w	8001040 <HAL_RCC_OscConfig+0x334>
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8116 	bne.w	8001040 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	f000 bfaf 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2a:	d106      	bne.n	8000e3a <HAL_RCC_OscConfig+0x12e>
 8000e2c:	4b83      	ldr	r3, [pc, #524]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a82      	ldr	r2, [pc, #520]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	e036      	b.n	8000ea8 <HAL_RCC_OscConfig+0x19c>
 8000e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x158>
 8000e4a:	4b7c      	ldr	r3, [pc, #496]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a7b      	ldr	r2, [pc, #492]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b79      	ldr	r3, [pc, #484]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a78      	ldr	r2, [pc, #480]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e021      	b.n	8000ea8 <HAL_RCC_OscConfig+0x19c>
 8000e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x184>
 8000e76:	4b71      	ldr	r3, [pc, #452]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a70      	ldr	r2, [pc, #448]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b6e      	ldr	r3, [pc, #440]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a6d      	ldr	r2, [pc, #436]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_RCC_OscConfig+0x19c>
 8000e90:	4b6a      	ldr	r3, [pc, #424]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a69      	ldr	r2, [pc, #420]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b67      	ldr	r3, [pc, #412]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a66      	ldr	r2, [pc, #408]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ea8:	4b64      	ldr	r3, [pc, #400]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eac:	f023 020f 	bic.w	r2, r3, #15
 8000eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	495f      	ldr	r1, [pc, #380]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d059      	beq.n	8000f86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fc89 	bl	80007e8 <HAL_GetTick>
 8000ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	e00a      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fc84 	bl	80007e8 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b64      	cmp	r3, #100	; 0x64
 8000eea:	d902      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	f000 bf43 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
 8000ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	095b      	lsrs	r3, r3, #5
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x218>
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	e015      	b.n	8000f50 <HAL_RCC_OscConfig+0x244>
 8000f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f28:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f54:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f5c:	fa92 f2a2 	rbit	r2, r2
 8000f60:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f68:	fab2 f282 	clz	r2, r2
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	f002 021f 	and.w	r2, r2, #31
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0ab      	beq.n	8000edc <HAL_RCC_OscConfig+0x1d0>
 8000f84:	e05d      	b.n	8001042 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fc2f 	bl	80007e8 <HAL_GetTick>
 8000f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	e00a      	b.n	8000fa6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fc2a 	bl	80007e8 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	; 0x64
 8000f9e:	d902      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f000 bee9 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
 8000fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000faa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	095b      	lsrs	r3, r3, #5
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x2cc>
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e015      	b.n	8001004 <HAL_RCC_OscConfig+0x2f8>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fdc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ff4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_RCC_OscConfig+0x330>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001008:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800100c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001018:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f002 021f 	and.w	r2, r2, #31
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1ab      	bne.n	8000f90 <HAL_RCC_OscConfig+0x284>
 8001038:	e003      	b.n	8001042 <HAL_RCC_OscConfig+0x336>
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 817d 	beq.w	8001352 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001058:	4ba6      	ldr	r3, [pc, #664]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001064:	4ba3      	ldr	r3, [pc, #652]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b08      	cmp	r3, #8
 800106e:	d172      	bne.n	8001156 <HAL_RCC_OscConfig+0x44a>
 8001070:	4ba0      	ldr	r3, [pc, #640]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d16c      	bne.n	8001156 <HAL_RCC_OscConfig+0x44a>
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800108e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d102      	bne.n	80010ac <HAL_RCC_OscConfig+0x3a0>
 80010a6:	4b93      	ldr	r3, [pc, #588]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	e013      	b.n	80010d4 <HAL_RCC_OscConfig+0x3c8>
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010d0:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	2202      	movs	r2, #2
 80010d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010de:	fa92 f2a2 	rbit	r2, r2
 80010e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010ea:	fab2 f282 	clz	r2, r2
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	f042 0220 	orr.w	r2, r2, #32
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	f002 021f 	and.w	r2, r2, #31
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00a      	beq.n	800111c <HAL_RCC_OscConfig+0x410>
 8001106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800110a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d002      	beq.n	800111c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	f000 be2e 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001128:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	21f8      	movs	r1, #248	; 0xf8
 8001132:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800113a:	fa91 f1a1 	rbit	r1, r1
 800113e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001142:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001146:	fab1 f181 	clz	r1, r1
 800114a:	b2c9      	uxtb	r1, r1
 800114c:	408b      	lsls	r3, r1
 800114e:	4969      	ldr	r1, [pc, #420]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001154:	e0fd      	b.n	8001352 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8088 	beq.w	8001278 <HAL_RCC_OscConfig+0x56c>
 8001168:	2301      	movs	r3, #1
 800116a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800117a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001188:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	461a      	mov	r2, r3
 8001190:	2301      	movs	r3, #1
 8001192:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fb28 	bl	80007e8 <HAL_GetTick>
 8001198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fb23 	bl	80007e8 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d902      	bls.n	80011b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f000 bde2 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4d8>
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e013      	b.n	800120c <HAL_RCC_OscConfig+0x500>
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001208:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	2202      	movs	r2, #2
 800120e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001212:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001216:	fa92 f2a2 	rbit	r2, r2
 800121a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800121e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	f042 0220 	orr.w	r2, r2, #32
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f002 021f 	and.w	r2, r2, #31
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0af      	beq.n	800119e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	21f8      	movs	r1, #248	; 0xf8
 8001254:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800125c:	fa91 f1a1 	rbit	r1, r1
 8001260:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001264:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001268:	fab1 f181 	clz	r1, r1
 800126c:	b2c9      	uxtb	r1, r1
 800126e:	408b      	lsls	r3, r1
 8001270:	4920      	ldr	r1, [pc, #128]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
 8001276:	e06c      	b.n	8001352 <HAL_RCC_OscConfig+0x646>
 8001278:	2301      	movs	r3, #1
 800127a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800128a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001298:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	461a      	mov	r2, r3
 80012a0:	2300      	movs	r3, #0
 80012a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff faa0 	bl	80007e8 <HAL_GetTick>
 80012a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fa9b 	bl	80007e8 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d902      	bls.n	80012c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	f000 bd5a 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	095b      	lsrs	r3, r3, #5
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d104      	bne.n	80012f8 <HAL_RCC_OscConfig+0x5ec>
 80012ee:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <HAL_RCC_OscConfig+0x5e8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	e015      	b.n	8001320 <HAL_RCC_OscConfig+0x614>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001310:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800131c:	4bc8      	ldr	r3, [pc, #800]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	2202      	movs	r2, #2
 8001322:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001326:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800132a:	fa92 f2a2 	rbit	r2, r2
 800132e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001332:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001336:	fab2 f282 	clz	r2, r2
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f042 0220 	orr.w	r2, r2, #32
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	f002 021f 	and.w	r2, r2, #31
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ad      	bne.n	80012ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8110 	beq.w	8001588 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d079      	beq.n	800146c <HAL_RCC_OscConfig+0x760>
 8001378:	2301      	movs	r3, #1
 800137a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800138a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4bab      	ldr	r3, [pc, #684]	; (8001644 <HAL_RCC_OscConfig+0x938>)
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	461a      	mov	r2, r3
 800139e:	2301      	movs	r3, #1
 80013a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fa21 	bl	80007e8 <HAL_GetTick>
 80013a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	e00a      	b.n	80013c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fa1c 	bl	80007e8 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d902      	bls.n	80013c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	f000 bcdb 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013cc:	fa93 f3a3 	rbit	r3, r3
 80013d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013dc:	2202      	movs	r2, #2
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	fa93 f2a3 	rbit	r2, r3
 80013ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001400:	2202      	movs	r2, #2
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f2a3 	rbit	r2, r3
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800141a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 800141e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001428:	2102      	movs	r1, #2
 800142a:	6019      	str	r1, [r3, #0]
 800142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001430:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fa93 f1a3 	rbit	r1, r3
 800143a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001442:	6019      	str	r1, [r3, #0]
  return result;
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0a0      	beq.n	80013ac <HAL_RCC_OscConfig+0x6a0>
 800146a:	e08d      	b.n	8001588 <HAL_RCC_OscConfig+0x87c>
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	fa93 f2a3 	rbit	r2, r3
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800148e:	601a      	str	r2, [r3, #0]
  return result;
 8001490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001494:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001498:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b68      	ldr	r3, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x938>)
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	461a      	mov	r2, r3
 80014aa:	2300      	movs	r3, #0
 80014ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff f99b 	bl	80007e8 <HAL_GetTick>
 80014b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff f996 	bl	80007e8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d902      	bls.n	80014ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f000 bc55 	b.w	8001d78 <HAL_RCC_OscConfig+0x106c>
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014d6:	2202      	movs	r2, #2
 80014d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001502:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	fa93 f2a3 	rbit	r2, r3
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800151e:	2202      	movs	r2, #2
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	fa93 f2a3 	rbit	r2, r3
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001538:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 800153c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001546:	2102      	movs	r1, #2
 8001548:	6019      	str	r1, [r3, #0]
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fa93 f1a3 	rbit	r1, r3
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001560:	6019      	str	r1, [r3, #0]
  return result;
 8001562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001566:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d197      	bne.n	80014b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 81a1 	beq.w	80018e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d116      	bne.n	80015de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ba:	61d3      	str	r3, [r2, #28]
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_RCC_OscConfig+0x93c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_RCC_OscConfig+0x93c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_RCC_OscConfig+0x93c>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff f8f7 	bl	80007e8 <HAL_GetTick>
 80015fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	e009      	b.n	8001614 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001600:	f7ff f8f2 	bl	80007e8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	; 0x64
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e3b1      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x93c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ef      	beq.n	8001600 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10d      	bne.n	800164c <HAL_RCC_OscConfig+0x940>
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a02      	ldr	r2, [pc, #8]	; (8001640 <HAL_RCC_OscConfig+0x934>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e03c      	b.n	80016b8 <HAL_RCC_OscConfig+0x9ac>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	10908120 	.word	0x10908120
 8001648:	40007000 	.word	0x40007000
 800164c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x96a>
 800165c:	4bc1      	ldr	r3, [pc, #772]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4ac0      	ldr	r2, [pc, #768]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	4bbe      	ldr	r3, [pc, #760]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4abd      	ldr	r2, [pc, #756]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 800166e:	f023 0304 	bic.w	r3, r3, #4
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e020      	b.n	80016b8 <HAL_RCC_OscConfig+0x9ac>
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x994>
 8001686:	4bb7      	ldr	r3, [pc, #732]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4ab6      	ldr	r2, [pc, #728]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	4bb4      	ldr	r3, [pc, #720]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4ab3      	ldr	r2, [pc, #716]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0x9ac>
 80016a0:	4bb0      	ldr	r3, [pc, #704]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4aaf      	ldr	r2, [pc, #700]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	4bad      	ldr	r3, [pc, #692]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4aac      	ldr	r2, [pc, #688]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	f023 0304 	bic.w	r3, r3, #4
 80016b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8081 	beq.w	80017cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff f88d 	bl	80007e8 <HAL_GetTick>
 80016ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff f888 	bl	80007e8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e345      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016f4:	2202      	movs	r2, #2
 80016f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f2a3 	rbit	r2, r3
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001732:	601a      	str	r2, [r3, #0]
  return result;
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800173c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	095b      	lsrs	r3, r3, #5
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d102      	bne.n	8001758 <HAL_RCC_OscConfig+0xa4c>
 8001752:	4b84      	ldr	r3, [pc, #528]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	e013      	b.n	8001780 <HAL_RCC_OscConfig+0xa74>
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4b79      	ldr	r3, [pc, #484]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001784:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001788:	2102      	movs	r1, #2
 800178a:	6011      	str	r1, [r2, #0]
 800178c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001790:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	fa92 f1a2 	rbit	r1, r2
 800179a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800179e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017a2:	6011      	str	r1, [r2, #0]
  return result;
 80017a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	fab2 f282 	clz	r2, r2
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	f002 021f 	and.w	r2, r2, #31
 80017be:	2101      	movs	r1, #1
 80017c0:	fa01 f202 	lsl.w	r2, r1, r2
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d084      	beq.n	80016d4 <HAL_RCC_OscConfig+0x9c8>
 80017ca:	e07f      	b.n	80018cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff f80c 	bl	80007e8 <HAL_GetTick>
 80017d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	e00b      	b.n	80017ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f807 	bl	80007e8 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e2c4      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
 80017ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001834:	601a      	str	r2, [r3, #0]
  return result;
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800183e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d102      	bne.n	800185a <HAL_RCC_OscConfig+0xb4e>
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	e013      	b.n	8001882 <HAL_RCC_OscConfig+0xb76>
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001862:	2202      	movs	r2, #2
 8001864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001886:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800188a:	2102      	movs	r1, #2
 800188c:	6011      	str	r1, [r2, #0]
 800188e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001892:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	fa92 f1a2 	rbit	r1, r2
 800189c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018a4:	6011      	str	r1, [r2, #0]
  return result;
 80018a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018aa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	fab2 f282 	clz	r2, r2
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	f002 021f 	and.w	r2, r2, #31
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d184      	bne.n	80017d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4a22      	ldr	r2, [pc, #136]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 80018da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8242 	beq.w	8001d76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_RCC_OscConfig+0xc58>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	f000 8213 	beq.w	8001d26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b02      	cmp	r3, #2
 800190e:	f040 8162 	bne.w	8001bd6 <HAL_RCC_OscConfig+0xeca>
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800191a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800191e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001936:	601a      	str	r2, [r3, #0]
  return result;
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001940:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800194c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	461a      	mov	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7fe ff46 	bl	80007e8 <HAL_GetTick>
 800195c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001960:	e00c      	b.n	800197c <HAL_RCC_OscConfig+0xc70>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7fe ff3e 	bl	80007e8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1fd      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f2a3 	rbit	r2, r3
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019a0:	601a      	str	r2, [r3, #0]
  return result;
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d102      	bne.n	80019c6 <HAL_RCC_OscConfig+0xcba>
 80019c0:	4bb0      	ldr	r3, [pc, #704]	; (8001c84 <HAL_RCC_OscConfig+0xf78>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	e027      	b.n	8001a16 <HAL_RCC_OscConfig+0xd0a>
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	4b9c      	ldr	r3, [pc, #624]	; (8001c84 <HAL_RCC_OscConfig+0xf78>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a22:	6011      	str	r1, [r2, #0]
 8001a24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a28:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	fa92 f1a2 	rbit	r1, r2
 8001a32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a3a:	6011      	str	r1, [r2, #0]
  return result;
 8001a3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	fab2 f282 	clz	r2, r2
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	f042 0220 	orr.w	r2, r2, #32
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f002 021f 	and.w	r2, r2, #31
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d182      	bne.n	8001968 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0xf78>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	497f      	ldr	r1, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0xf78>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aae:	601a      	str	r2, [r3, #0]
  return result;
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ab8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	461a      	mov	r2, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7fe fe8a 	bl	80007e8 <HAL_GetTick>
 8001ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7fe fe85 	bl	80007e8 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e144      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b12:	601a      	str	r2, [r3, #0]
  return result;
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0xe2c>
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <HAL_RCC_OscConfig+0xf78>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e027      	b.n	8001b88 <HAL_RCC_OscConfig+0xe7c>
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_OscConfig+0xf78>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b94:	6011      	str	r1, [r2, #0]
 8001b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	fa92 f1a2 	rbit	r1, r2
 8001ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bac:	6011      	str	r1, [r2, #0]
  return result;
 8001bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	f002 021f 	and.w	r2, r2, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d082      	beq.n	8001ada <HAL_RCC_OscConfig+0xdce>
 8001bd4:	e0cf      	b.n	8001d76 <HAL_RCC_OscConfig+0x106a>
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bfa:	601a      	str	r2, [r3, #0]
  return result;
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	461a      	mov	r2, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fde4 	bl	80007e8 <HAL_GetTick>
 8001c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	e009      	b.n	8001c3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe fddf 	bl	80007e8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e09e      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c5e:	601a      	str	r2, [r3, #0]
  return result;
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d104      	bne.n	8001c88 <HAL_RCC_OscConfig+0xf7c>
 8001c7e:	4b01      	ldr	r3, [pc, #4]	; (8001c84 <HAL_RCC_OscConfig+0xf78>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e029      	b.n	8001cd8 <HAL_RCC_OscConfig+0xfcc>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x1078>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cdc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ce0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce4:	6011      	str	r1, [r2, #0]
 8001ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	fa92 f1a2 	rbit	r1, r2
 8001cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cfc:	6011      	str	r1, [r2, #0]
  return result;
 8001cfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f002 021f 	and.w	r2, r2, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d180      	bne.n	8001c26 <HAL_RCC_OscConfig+0xf1a>
 8001d24:	e027      	b.n	8001d76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e01e      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_OscConfig+0x1078>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d10b      	bne.n	8001d72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09e      	sub	sp, #120	; 0x78
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e162      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b90      	ldr	r3, [pc, #576]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	498b      	ldr	r1, [pc, #556]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e14a      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	497f      	ldr	r1, [pc, #508]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80dc 	beq.w	8001fb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d13c      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xf6>
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xa6>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e00f      	b.n	8001e4e <HAL_RCC_ClockConfig+0xc6>
 8001e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
 8001e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e52:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e5e:	fab2 f282 	clz	r2, r2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f042 0220 	orr.w	r2, r2, #32
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f002 021f 	and.w	r2, r2, #31
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d17b      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0f3      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d13c      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x178>
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x128>
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e00f      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
 8001eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ecc:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f042 0220 	orr.w	r2, r2, #32
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f002 021f 	and.w	r2, r2, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d13a      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b2      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
 8001f00:	2302      	movs	r3, #2
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d102      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	e00d      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1bc>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2202      	movs	r2, #2
 8001f46:	61ba      	str	r2, [r7, #24]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	fa92 f2a2 	rbit	r2, r2
 8001f4e:	617a      	str	r2, [r7, #20]
  return result;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f002 021f 	and.w	r2, r2, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e079      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7fe fc30 	bl	80007e8 <HAL_GetTick>
 8001f88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7fe fc2c 	bl	80007e8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e061      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d214      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4906      	ldr	r1, [pc, #24]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e040      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	491a      	ldr	r1, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4912      	ldr	r1, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800202a:	f000 f829 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800202e:	4601      	mov	r1, r0
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002038:	22f0      	movs	r2, #240	; 0xf0
 800203a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	fa92 f2a2 	rbit	r2, r2
 8002042:	60fa      	str	r2, [r7, #12]
  return result;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	fab2 f282 	clz	r2, r2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	40d3      	lsrs	r3, r2
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x2ec>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	fa21 f303 	lsr.w	r3, r1, r3
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_RCC_ClockConfig+0x2f0>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_RCC_ClockConfig+0x2f4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fac2 	bl	80005e8 <HAL_InitTick>
  
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3778      	adds	r7, #120	; 0x78
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	08005b00 	.word	0x08005b00
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b08b      	sub	sp, #44	; 0x2c
 8002084:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_RCC_GetSysClockFreq+0xc0>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x30>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x36>
 80020ae:	e03c      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b2:	623b      	str	r3, [r7, #32]
      break;
 80020b4:	e03c      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	fa92 f2a2 	rbit	r2, r2
 80020c8:	607a      	str	r2, [r7, #4]
  return result;
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	40d3      	lsrs	r3, r2
 80020d4:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	220f      	movs	r2, #15
 80020e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	fa92 f2a2 	rbit	r2, r2
 80020ec:	60fa      	str	r2, [r7, #12]
  return result;
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	40d3      	lsrs	r3, r2
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <HAL_RCC_GetSysClockFreq+0xcc>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc4>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	e004      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <HAL_RCC_GetSysClockFreq+0xd0>)
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	623b      	str	r3, [r7, #32]
      break;
 8002128:	e002      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc4>)
 800212c:	623b      	str	r3, [r7, #32]
      break;
 800212e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002130:	6a3b      	ldr	r3, [r7, #32]
}
 8002132:	4618      	mov	r0, r3
 8002134:	372c      	adds	r7, #44	; 0x2c
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	007a1200 	.word	0x007a1200
 8002148:	08005b18 	.word	0x08005b18
 800214c:	08005b28 	.word	0x08005b28
 8002150:	003d0900 	.word	0x003d0900

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_RCC_GetHCLKFreq+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000000 	.word	0x20000000

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002172:	f7ff ffef 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002176:	4601      	mov	r1, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002180:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	603a      	str	r2, [r7, #0]
  return result;
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	40d3      	lsrs	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08005b10 	.word	0x08005b10

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021b6:	f7ff ffcd 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 80021ba:	4601      	mov	r1, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	603a      	str	r2, [r7, #0]
  return result;
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	40d3      	lsrs	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08005b10 	.word	0x08005b10

080021f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	220f      	movs	r2, #15
 8002202:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RCC_GetClockConfig+0x60>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	601a      	str	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40022000 	.word	0x40022000

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e049      	b.n	80022fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f841 	bl	8002306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 f9e4 	bl	8002664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d001      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e040      	b.n	80023b6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00e      	beq.n	8002374 <HAL_TIM_Base_Start_IT+0x58>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d009      	beq.n	8002374 <HAL_TIM_Base_Start_IT+0x58>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_TIM_Base_Start_IT+0xac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_TIM_Base_Start_IT+0x58>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_TIM_Base_Start_IT+0xb0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d115      	bne.n	80023a0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b06      	cmp	r3, #6
 8002384:	d015      	beq.n	80023b2 <HAL_TIM_Base_Start_IT+0x96>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d011      	beq.n	80023b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239e:	e008      	b.n	80023b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e000      	b.n	80023b4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40014000 	.word	0x40014000
 80023d0:	00010007 	.word	0x00010007

080023d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0202 	mvn.w	r2, #2
 8002400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f905 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f8f7 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f908 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0204 	mvn.w	r2, #4
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8db 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8cd 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8de 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b08      	cmp	r3, #8
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0208 	mvn.w	r2, #8
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2204      	movs	r2, #4
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8b1 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8a3 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8b4 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0210 	mvn.w	r2, #16
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2208      	movs	r2, #8
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f887 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f879 	bl	8002612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f88a 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0201 	mvn.w	r2, #1
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fd ffc6 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b80      	cmp	r3, #128	; 0x80
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f8f2 	bl	8002768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002592:	d10e      	bne.n	80025b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b80      	cmp	r3, #128	; 0x80
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f8e5 	bl	800277c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d10e      	bne.n	80025de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d107      	bne.n	80025de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f838 	bl	800264e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d10e      	bne.n	800260a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d107      	bne.n	800260a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0220 	mvn.w	r2, #32
 8002602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f8a5 	bl	8002754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a32      	ldr	r2, [pc, #200]	; (8002740 <TIM_Base_SetConfig+0xdc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d007      	beq.n	800268c <TIM_Base_SetConfig+0x28>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002682:	d003      	beq.n	800268c <TIM_Base_SetConfig+0x28>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <TIM_Base_SetConfig+0xe0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d108      	bne.n	800269e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <TIM_Base_SetConfig+0xdc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <TIM_Base_SetConfig+0x6a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d00f      	beq.n	80026ce <TIM_Base_SetConfig+0x6a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a24      	ldr	r2, [pc, #144]	; (8002744 <TIM_Base_SetConfig+0xe0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x6a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a23      	ldr	r2, [pc, #140]	; (8002748 <TIM_Base_SetConfig+0xe4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x6a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <TIM_Base_SetConfig+0xe8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x6a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <TIM_Base_SetConfig+0xec>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <TIM_Base_SetConfig+0xdc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0xc0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <TIM_Base_SetConfig+0xe4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0xc0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a0d      	ldr	r2, [pc, #52]	; (800274c <TIM_Base_SetConfig+0xe8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0xc0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <TIM_Base_SetConfig+0xec>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d103      	bne.n	800272c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	615a      	str	r2, [r3, #20]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40000400 	.word	0x40000400
 8002748:	40014000 	.word	0x40014000
 800274c:	40014400 	.word	0x40014400
 8002750:	40014800 	.word	0x40014800

08002754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e040      	b.n	8002824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fd fed6 	bl	8000564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	; 0x24
 80027bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8c0 	bl	8002954 <UART_SetConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e022      	b.n	8002824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f9ea 	bl	8002bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fa71 	bl	8002d04 <UART_CheckIdleState>
 8002822:	4603      	mov	r3, r0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 8082 	bne.w	800294a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_UART_Transmit+0x26>
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07a      	b.n	800294c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_UART_Transmit+0x38>
 8002860:	2302      	movs	r3, #2
 8002862:	e073      	b.n	800294c <HAL_UART_Transmit+0x120>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2221      	movs	r2, #33	; 0x21
 8002878:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800287a:	f7fd ffb5 	bl	80007e8 <HAL_GetTick>
 800287e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002898:	d108      	bne.n	80028ac <HAL_UART_Transmit+0x80>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d104      	bne.n	80028ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e003      	b.n	80028b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80028bc:	e02d      	b.n	800291a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fa64 	bl	8002d96 <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e039      	b.n	800294c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ea:	b292      	uxth	r2, r2
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	3302      	adds	r3, #2
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e008      	b.n	8002908 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b292      	uxth	r2, r2
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cb      	bne.n	80028be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fa30 	bl	8002d96 <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e005      	b.n	800294c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b8a      	ldr	r3, [pc, #552]	; (8002ba8 <UART_SetConfig+0x254>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	430b      	orrs	r3, r1
 800298a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a78      	ldr	r2, [pc, #480]	; (8002bac <UART_SetConfig+0x258>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d120      	bne.n	8002a12 <UART_SetConfig+0xbe>
 80029d0:	4b77      	ldr	r3, [pc, #476]	; (8002bb0 <UART_SetConfig+0x25c>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d817      	bhi.n	8002a0c <UART_SetConfig+0xb8>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <UART_SetConfig+0x90>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	08002a01 	.word	0x08002a01
 80029ec:	08002a07 	.word	0x08002a07
 80029f0:	080029fb 	.word	0x080029fb
 80029f4:	2300      	movs	r3, #0
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e01d      	b.n	8002a36 <UART_SetConfig+0xe2>
 80029fa:	2302      	movs	r3, #2
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e01a      	b.n	8002a36 <UART_SetConfig+0xe2>
 8002a00:	2304      	movs	r3, #4
 8002a02:	77fb      	strb	r3, [r7, #31]
 8002a04:	e017      	b.n	8002a36 <UART_SetConfig+0xe2>
 8002a06:	2308      	movs	r3, #8
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e014      	b.n	8002a36 <UART_SetConfig+0xe2>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e011      	b.n	8002a36 <UART_SetConfig+0xe2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <UART_SetConfig+0x260>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d102      	bne.n	8002a22 <UART_SetConfig+0xce>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77fb      	strb	r3, [r7, #31]
 8002a20:	e009      	b.n	8002a36 <UART_SetConfig+0xe2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a64      	ldr	r2, [pc, #400]	; (8002bb8 <UART_SetConfig+0x264>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <UART_SetConfig+0xde>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	e001      	b.n	8002a36 <UART_SetConfig+0xe2>
 8002a32:	2310      	movs	r3, #16
 8002a34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d15b      	bne.n	8002af8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d827      	bhi.n	8002a96 <UART_SetConfig+0x142>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <UART_SetConfig+0xf8>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a71 	.word	0x08002a71
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a81 	.word	0x08002a81
 8002a58:	08002a97 	.word	0x08002a97
 8002a5c:	08002a87 	.word	0x08002a87
 8002a60:	08002a97 	.word	0x08002a97
 8002a64:	08002a97 	.word	0x08002a97
 8002a68:	08002a97 	.word	0x08002a97
 8002a6c:	08002a8f 	.word	0x08002a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a70:	f7ff fb7c 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8002a74:	61b8      	str	r0, [r7, #24]
        break;
 8002a76:	e013      	b.n	8002aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7ff fb9a 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	61b8      	str	r0, [r7, #24]
        break;
 8002a7e:	e00f      	b.n	8002aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a80:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <UART_SetConfig+0x268>)
 8002a82:	61bb      	str	r3, [r7, #24]
        break;
 8002a84:	e00c      	b.n	8002aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a86:	f7ff fafb 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8002a8a:	61b8      	str	r0, [r7, #24]
        break;
 8002a8c:	e008      	b.n	8002aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a92:	61bb      	str	r3, [r7, #24]
        break;
 8002a94:	e004      	b.n	8002aa0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d074      	beq.n	8002b90 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	005a      	lsls	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d916      	bls.n	8002af2 <UART_SetConfig+0x19e>
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d212      	bcs.n	8002af2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f023 030f 	bic.w	r3, r3, #15
 8002ad4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	89fa      	ldrh	r2, [r7, #14]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	e04e      	b.n	8002b90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	77bb      	strb	r3, [r7, #30]
 8002af6:	e04b      	b.n	8002b90 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d827      	bhi.n	8002b4e <UART_SetConfig+0x1fa>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <UART_SetConfig+0x1b0>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b29 	.word	0x08002b29
 8002b08:	08002b31 	.word	0x08002b31
 8002b0c:	08002b39 	.word	0x08002b39
 8002b10:	08002b4f 	.word	0x08002b4f
 8002b14:	08002b3f 	.word	0x08002b3f
 8002b18:	08002b4f 	.word	0x08002b4f
 8002b1c:	08002b4f 	.word	0x08002b4f
 8002b20:	08002b4f 	.word	0x08002b4f
 8002b24:	08002b47 	.word	0x08002b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7ff fb20 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8002b2c:	61b8      	str	r0, [r7, #24]
        break;
 8002b2e:	e013      	b.n	8002b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff fb3e 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8002b34:	61b8      	str	r0, [r7, #24]
        break;
 8002b36:	e00f      	b.n	8002b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b38:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <UART_SetConfig+0x268>)
 8002b3a:	61bb      	str	r3, [r7, #24]
        break;
 8002b3c:	e00c      	b.n	8002b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3e:	f7ff fa9f 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8002b42:	61b8      	str	r0, [r7, #24]
        break;
 8002b44:	e008      	b.n	8002b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4a:	61bb      	str	r3, [r7, #24]
        break;
 8002b4c:	e004      	b.n	8002b58 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	77bb      	strb	r3, [r7, #30]
        break;
 8002b56:	bf00      	nop
    }

    if (pclk != 0U)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	085a      	lsrs	r2, r3, #1
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	d908      	bls.n	8002b8c <UART_SetConfig+0x238>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d204      	bcs.n	8002b8c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	e001      	b.n	8002b90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	efff69f3 	.word	0xefff69f3
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40004400 	.word	0x40004400
 8002bb8:	40004800 	.word	0x40004800
 8002bbc:	007a1200 	.word	0x007a1200

08002bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01a      	beq.n	8002cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cbe:	d10a      	bne.n	8002cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d14:	f7fd fd68 	bl	80007e8 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d10e      	bne.n	8002d46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f82d 	bl	8002d96 <UART_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e023      	b.n	8002d8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d10e      	bne.n	8002d72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f817 	bl	8002d96 <UART_WaitOnFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e00d      	b.n	8002d8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b09c      	sub	sp, #112	; 0x70
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da6:	e0a5      	b.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	f000 80a1 	beq.w	8002ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7fd fd19 	bl	80007e8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d13e      	bne.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002de8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e6      	bne.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	663b      	str	r3, [r7, #96]	; 0x60
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e5      	bne.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e067      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d04f      	beq.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e62:	d147      	bne.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e6      	bne.n	8002e6e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ec0:	623a      	str	r2, [r7, #32]
 8002ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	69f9      	ldr	r1, [r7, #28]
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e5      	bne.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e010      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f43f af4a 	beq.w	8002da8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3770      	adds	r7, #112	; 0x70
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f26:	f3ef 8305 	mrs	r3, IPSR
 8002f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f32:	f3ef 8310 	mrs	r3, PRIMASK
 8002f36:	607b      	str	r3, [r7, #4]
  return(result);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <osKernelInitialize+0x32>
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <osKernelInitialize+0x64>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d109      	bne.n	8002f5a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f46:	f3ef 8311 	mrs	r3, BASEPRI
 8002f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f52:	f06f 0305 	mvn.w	r3, #5
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e00c      	b.n	8002f74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <osKernelInitialize+0x64>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <osKernelInitialize+0x64>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e002      	b.n	8002f74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	2000010c 	.word	0x2000010c

08002f88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f8e:	f3ef 8305 	mrs	r3, IPSR
 8002f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <osKernelStart+0x32>
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <osKernelStart+0x64>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d109      	bne.n	8002fc2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fae:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002fba:	f06f 0305 	mvn.w	r3, #5
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e00e      	b.n	8002fe0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <osKernelStart+0x64>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <osKernelStart+0x64>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002fd0:	f001 f880 	bl	80040d4 <vTaskStartScheduler>
      stat = osOK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e002      	b.n	8002fe0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000010c 	.word	0x2000010c

08002ff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b092      	sub	sp, #72	; 0x48
 8002ff4:	af04      	add	r7, sp, #16
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003000:	f3ef 8305 	mrs	r3, IPSR
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 8094 	bne.w	8003136 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300e:	f3ef 8310 	mrs	r3, PRIMASK
 8003012:	623b      	str	r3, [r7, #32]
  return(result);
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 808d 	bne.w	8003136 <osThreadNew+0x146>
 800301c:	4b48      	ldr	r3, [pc, #288]	; (8003140 <osThreadNew+0x150>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d106      	bne.n	8003032 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003024:	f3ef 8311 	mrs	r3, BASEPRI
 8003028:	61fb      	str	r3, [r7, #28]
  return(result);
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 8082 	bne.w	8003136 <osThreadNew+0x146>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d07e      	beq.n	8003136 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800303c:	2318      	movs	r3, #24
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003040:	2300      	movs	r3, #0
 8003042:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003044:	f107 031b 	add.w	r3, r7, #27
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d045      	beq.n	80030e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <osThreadNew+0x74>
        name = attr->name;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <osThreadNew+0x9a>
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	2b38      	cmp	r3, #56	; 0x38
 800307c:	d805      	bhi.n	800308a <osThreadNew+0x9a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <osThreadNew+0x9e>
        return (NULL);
 800308a:	2300      	movs	r3, #0
 800308c:	e054      	b.n	8003138 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <osThreadNew+0xd4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b5b      	cmp	r3, #91	; 0x5b
 80030ac:	d90a      	bls.n	80030c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <osThreadNew+0xd4>
        mem = 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c2:	e010      	b.n	80030e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10c      	bne.n	80030e6 <osThreadNew+0xf6>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d108      	bne.n	80030e6 <osThreadNew+0xf6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <osThreadNew+0xf6>
          mem = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e0:	e001      	b.n	80030e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d110      	bne.n	800310e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030f4:	9202      	str	r2, [sp, #8]
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003100:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fe1a 	bl	8003d3c <xTaskCreateStatic>
 8003108:	4603      	mov	r3, r0
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e013      	b.n	8003136 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d110      	bne.n	8003136 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	b29a      	uxth	r2, r3
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fe64 	bl	8003df4 <xTaskCreate>
 800312c:	4603      	mov	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <osThreadNew+0x146>
          hTask = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003136:	697b      	ldr	r3, [r7, #20]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3738      	adds	r7, #56	; 0x38
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2000010c 	.word	0x2000010c

08003144 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800314c:	f3ef 8305 	mrs	r3, IPSR
 8003150:	613b      	str	r3, [r7, #16]
  return(result);
 8003152:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10f      	bne.n	8003178 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003158:	f3ef 8310 	mrs	r3, PRIMASK
 800315c:	60fb      	str	r3, [r7, #12]
  return(result);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <osDelay+0x34>
 8003164:	4b0d      	ldr	r3, [pc, #52]	; (800319c <osDelay+0x58>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d109      	bne.n	8003180 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800316c:	f3ef 8311 	mrs	r3, BASEPRI
 8003170:	60bb      	str	r3, [r7, #8]
  return(result);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <osDelay+0x3c>
    stat = osErrorISR;
 8003178:	f06f 0305 	mvn.w	r3, #5
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e007      	b.n	8003190 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <osDelay+0x4c>
      vTaskDelay(ticks);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 ff6e 	bl	800406c <vTaskDelay>
    }
  }

  return (stat);
 8003190:	697b      	ldr	r3, [r7, #20]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000010c 	.word	0x2000010c

080031a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <vApplicationGetIdleTaskMemory+0x2c>)
 80031b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4a06      	ldr	r2, [pc, #24]	; (80031d0 <vApplicationGetIdleTaskMemory+0x30>)
 80031b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	601a      	str	r2, [r3, #0]
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000110 	.word	0x20000110
 80031d0:	2000016c 	.word	0x2000016c

080031d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a07      	ldr	r2, [pc, #28]	; (8003200 <vApplicationGetTimerTaskMemory+0x2c>)
 80031e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4a06      	ldr	r2, [pc, #24]	; (8003204 <vApplicationGetTimerTaskMemory+0x30>)
 80031ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	2000036c 	.word	0x2000036c
 8003204:	200003c8 	.word	0x200003c8

08003208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f103 0208 	add.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f103 0208 	add.w	r2, r3, #8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f103 0208 	add.w	r2, r3, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d103      	bne.n	80032ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e00c      	b.n	80032e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3308      	adds	r3, #8
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e002      	b.n	80032d8 <vListInsert+0x2e>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d2f6      	bcs.n	80032d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	601a      	str	r2, [r3, #0]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6892      	ldr	r2, [r2, #8]
 8003332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6852      	ldr	r2, [r2, #4]
 800333c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d103      	bne.n	8003350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	1e5a      	subs	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800339a:	f002 f80b 	bl	80053b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	441a      	add	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	3b01      	subs	r3, #1
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	441a      	add	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	22ff      	movs	r2, #255	; 0xff
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d114      	bne.n	800341a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01a      	beq.n	800342e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3310      	adds	r3, #16
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 f8f7 	bl	80045f0 <xTaskRemoveFromEventList>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <xQueueGenericReset+0xcc>)
 800340a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	e009      	b.n	800342e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3310      	adds	r3, #16
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fef2 	bl	8003208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff feed 	bl	8003208 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800342e:	f001 fff1 	bl	8005414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	e000ed04 	.word	0xe000ed04

08003440 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	; 0x38
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <xQueueGenericCreateStatic+0x52>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <xQueueGenericCreateStatic+0x56>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <xQueueGenericCreateStatic+0x58>
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <xQueueGenericCreateStatic+0x7e>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <xQueueGenericCreateStatic+0x82>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <xQueueGenericCreateStatic+0x84>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	61fb      	str	r3, [r7, #28]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034de:	2350      	movs	r3, #80	; 0x50
 80034e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b50      	cmp	r3, #80	; 0x50
 80034e6:	d00a      	beq.n	80034fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61bb      	str	r3, [r7, #24]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003510:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f805 	bl	800352e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003526:	4618      	mov	r0, r3
 8003528:	3730      	adds	r7, #48	; 0x30
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e002      	b.n	8003550 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800355c:	2101      	movs	r1, #1
 800355e:	69b8      	ldr	r0, [r7, #24]
 8003560:	f7ff ff06 	bl	8003370 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08e      	sub	sp, #56	; 0x38
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003582:	2300      	movs	r3, #0
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xQueueGenericSend+0x32>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <xQueueGenericSend+0x40>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <xQueueGenericSend+0x44>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <xQueueGenericSend+0x46>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <xQueueGenericSend+0x60>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035d0:	bf00      	nop
 80035d2:	e7fe      	b.n	80035d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d103      	bne.n	80035e2 <xQueueGenericSend+0x6e>
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <xQueueGenericSend+0x72>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <xQueueGenericSend+0x74>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericSend+0x8e>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	623b      	str	r3, [r7, #32]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003602:	f001 f9b9 	bl	8004978 <xTaskGetSchedulerState>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <xQueueGenericSend+0x9e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <xQueueGenericSend+0xa2>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <xQueueGenericSend+0xa4>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xQueueGenericSend+0xbe>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	61fb      	str	r3, [r7, #28]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003632:	f001 febf 	bl	80053b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <xQueueGenericSend+0xd4>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d129      	bne.n	800369c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800364e:	f000 fa07 	bl	8003a60 <prvCopyDataToQueue>
 8003652:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	4618      	mov	r0, r3
 8003662:	f000 ffc5 	bl	80045f0 <xTaskRemoveFromEventList>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <xQueueGenericSend+0x1f8>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	e00a      	b.n	8003694 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003684:	4b39      	ldr	r3, [pc, #228]	; (800376c <xQueueGenericSend+0x1f8>)
 8003686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003694:	f001 febe 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 8003698:	2301      	movs	r3, #1
 800369a:	e063      	b.n	8003764 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036a2:	f001 feb7 	bl	8005414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e05c      	b.n	8003764 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 ffff 	bl	80046b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036be:	f001 fea9 	bl	8005414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036c2:	f000 fd6d 	bl	80041a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036c6:	f001 fe75 	bl	80053b4 <vPortEnterCritical>
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d103      	bne.n	80036e0 <xQueueGenericSend+0x16c>
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e6:	b25b      	sxtb	r3, r3
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d103      	bne.n	80036f6 <xQueueGenericSend+0x182>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f6:	f001 fe8d 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036fa:	1d3a      	adds	r2, r7, #4
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f000 ffee 	bl	80046e4 <xTaskCheckForTimeOut>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d124      	bne.n	8003758 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800370e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003710:	f000 fa9e 	bl	8003c50 <prvIsQueueFull>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	3310      	adds	r3, #16
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 ff14 	bl	8004550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f000 fa29 	bl	8003b80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800372e:	f000 fd45 	bl	80041bc <xTaskResumeAll>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	f47f af7c 	bne.w	8003632 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <xQueueGenericSend+0x1f8>)
 800373c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	e772      	b.n	8003632 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800374c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800374e:	f000 fa17 	bl	8003b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003752:	f000 fd33 	bl	80041bc <xTaskResumeAll>
 8003756:	e76c      	b.n	8003632 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800375a:	f000 fa11 	bl	8003b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800375e:	f000 fd2d 	bl	80041bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003762:	2300      	movs	r3, #0
		}
	}
}
 8003764:	4618      	mov	r0, r3
 8003766:	3738      	adds	r7, #56	; 0x38
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <xQueueGenericSendFromISR+0x3c>
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <xQueueGenericSendFromISR+0x40>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <xQueueGenericSendFromISR+0x42>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	623b      	str	r3, [r7, #32]
}
 80037c8:	bf00      	nop
 80037ca:	e7fe      	b.n	80037ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d103      	bne.n	80037da <xQueueGenericSendFromISR+0x6a>
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <xQueueGenericSendFromISR+0x6e>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <xQueueGenericSendFromISR+0x70>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	61fb      	str	r3, [r7, #28]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037fa:	f001 febd 	bl	8005578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	61ba      	str	r2, [r7, #24]
 8003814:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003816:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <xQueueGenericSendFromISR+0xbc>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d12c      	bne.n	8003886 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800383c:	f000 f910 	bl	8003a60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003840:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d112      	bne.n	8003870 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	3324      	adds	r3, #36	; 0x24
 8003856:	4618      	mov	r0, r3
 8003858:	f000 feca 	bl	80045f0 <xTaskRemoveFromEventList>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00e      	beq.n	8003880 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e007      	b.n	8003880 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003874:	3301      	adds	r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	b25a      	sxtb	r2, r3
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003880:	2301      	movs	r3, #1
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003884:	e001      	b.n	800388a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003886:	2300      	movs	r3, #0
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003894:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003898:	4618      	mov	r0, r3
 800389a:	3738      	adds	r7, #56	; 0x38
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	; 0x30
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <xQueueReceive+0x30>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	623b      	str	r3, [r7, #32]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <xQueueReceive+0x3e>
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <xQueueReceive+0x42>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <xQueueReceive+0x44>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <xQueueReceive+0x5e>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	61fb      	str	r3, [r7, #28]
}
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038fe:	f001 f83b 	bl	8004978 <xTaskGetSchedulerState>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <xQueueReceive+0x6e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <xQueueReceive+0x72>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueReceive+0x74>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xQueueReceive+0x8e>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	61bb      	str	r3, [r7, #24]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800392e:	f001 fd41 	bl	80053b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01f      	beq.n	800397e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003942:	f000 f8f7 	bl	8003b34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1e5a      	subs	r2, r3, #1
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00f      	beq.n	8003976 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	3310      	adds	r3, #16
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fe48 	bl	80045f0 <xTaskRemoveFromEventList>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003966:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <xQueueReceive+0x1bc>)
 8003968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003976:	f001 fd4d 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 800397a:	2301      	movs	r3, #1
 800397c:	e069      	b.n	8003a52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003984:	f001 fd46 	bl	8005414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003988:	2300      	movs	r3, #0
 800398a:	e062      	b.n	8003a52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003992:	f107 0310 	add.w	r3, r7, #16
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fe8e 	bl	80046b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039a0:	f001 fd38 	bl	8005414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039a4:	f000 fbfc 	bl	80041a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039a8:	f001 fd04 	bl	80053b4 <vPortEnterCritical>
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d103      	bne.n	80039c2 <xQueueReceive+0x122>
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d103      	bne.n	80039d8 <xQueueReceive+0x138>
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039d8:	f001 fd1c 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039dc:	1d3a      	adds	r2, r7, #4
 80039de:	f107 0310 	add.w	r3, r7, #16
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fe7d 	bl	80046e4 <xTaskCheckForTimeOut>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d123      	bne.n	8003a38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f2:	f000 f917 	bl	8003c24 <prvIsQueueEmpty>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d017      	beq.n	8003a2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fda3 	bl	8004550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a0c:	f000 f8b8 	bl	8003b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a10:	f000 fbd4 	bl	80041bc <xTaskResumeAll>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d189      	bne.n	800392e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <xQueueReceive+0x1bc>)
 8003a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	e780      	b.n	800392e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a2e:	f000 f8a7 	bl	8003b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a32:	f000 fbc3 	bl	80041bc <xTaskResumeAll>
 8003a36:	e77a      	b.n	800392e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a3a:	f000 f8a1 	bl	8003b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a3e:	f000 fbbd 	bl	80041bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a44:	f000 f8ee 	bl	8003c24 <prvIsQueueEmpty>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f43f af6f 	beq.w	800392e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3730      	adds	r7, #48	; 0x30
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d14d      	bne.n	8003b22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 ff92 	bl	80049b4 <xTaskPriorityDisinherit>
 8003a90:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	e043      	b.n	8003b22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d119      	bne.n	8003ad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6898      	ldr	r0, [r3, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	f001 ffa2 	bl	80059f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	441a      	add	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d32b      	bcc.n	8003b22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	e026      	b.n	8003b22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68d8      	ldr	r0, [r3, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	461a      	mov	r2, r3
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	f001 ff88 	bl	80059f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	425b      	negs	r3, r3
 8003aee:	441a      	add	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d207      	bcs.n	8003b10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	425b      	negs	r3, r3
 8003b0a:	441a      	add	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d105      	bne.n	8003b22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b2a:	697b      	ldr	r3, [r7, #20]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d018      	beq.n	8003b78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	441a      	add	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d303      	bcc.n	8003b68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68d9      	ldr	r1, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	461a      	mov	r2, r3
 8003b72:	6838      	ldr	r0, [r7, #0]
 8003b74:	f001 ff3e 	bl	80059f4 <memcpy>
	}
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b88:	f001 fc14 	bl	80053b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b94:	e011      	b.n	8003bba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3324      	adds	r3, #36	; 0x24
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fd24 	bl	80045f0 <xTaskRemoveFromEventList>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bae:	f000 fdfb 	bl	80047a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	dce9      	bgt.n	8003b96 <prvUnlockQueue+0x16>
 8003bc2:	e000      	b.n	8003bc6 <prvUnlockQueue+0x46>
					break;
 8003bc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bce:	f001 fc21 	bl	8005414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bd2:	f001 fbef 	bl	80053b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bde:	e011      	b.n	8003c04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d012      	beq.n	8003c0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3310      	adds	r3, #16
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fcff 	bl	80045f0 <xTaskRemoveFromEventList>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bf8:	f000 fdd6 	bl	80047a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bfc:	7bbb      	ldrb	r3, [r7, #14]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	dce9      	bgt.n	8003be0 <prvUnlockQueue+0x60>
 8003c0c:	e000      	b.n	8003c10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c18:	f001 fbfc 	bl	8005414 <vPortExitCritical>
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c2c:	f001 fbc2 	bl	80053b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e001      	b.n	8003c42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c42:	f001 fbe7 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c58:	f001 fbac 	bl	80053b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d102      	bne.n	8003c6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e001      	b.n	8003c72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c72:	f001 fbcf 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e014      	b.n	8003cba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c90:	4a0f      	ldr	r2, [pc, #60]	; (8003cd0 <vQueueAddToRegistry+0x50>)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c9c:	490c      	ldr	r1, [pc, #48]	; (8003cd0 <vQueueAddToRegistry+0x50>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <vQueueAddToRegistry+0x50>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cb2:	e006      	b.n	8003cc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b07      	cmp	r3, #7
 8003cbe:	d9e7      	bls.n	8003c90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	200007c8 	.word	0x200007c8

08003cd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ce4:	f001 fb66 	bl	80053b4 <vPortEnterCritical>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d103      	bne.n	8003cfe <vQueueWaitForMessageRestricted+0x2a>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d103      	bne.n	8003d14 <vQueueWaitForMessageRestricted+0x40>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d14:	f001 fb7e 	bl	8005414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3324      	adds	r3, #36	; 0x24
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fc35 	bl	8004598 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff ff26 	bl	8003b80 <prvUnlockQueue>
	}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08e      	sub	sp, #56	; 0x38
 8003d40:	af04      	add	r7, sp, #16
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	623b      	str	r3, [r7, #32]
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	61fb      	str	r3, [r7, #28]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d82:	235c      	movs	r3, #92	; 0x5c
 8003d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b5c      	cmp	r3, #92	; 0x5c
 8003d8a:	d00a      	beq.n	8003da2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	61bb      	str	r3, [r7, #24]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01e      	beq.n	8003de6 <xTaskCreateStatic+0xaa>
 8003da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01b      	beq.n	8003de6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	9302      	str	r3, [sp, #8]
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f850 	bl	8003e7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de0:	f000 f8d4 	bl	8003f8c <prvAddNewTaskToReadyList>
 8003de4:	e001      	b.n	8003dea <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dea:	697b      	ldr	r3, [r7, #20]
	}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3728      	adds	r7, #40	; 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af04      	add	r7, sp, #16
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 fbf5 	bl	80055f8 <pvPortMalloc>
 8003e0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00e      	beq.n	8003e34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e16:	205c      	movs	r0, #92	; 0x5c
 8003e18:	f001 fbee 	bl	80055f8 <pvPortMalloc>
 8003e1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
 8003e2a:	e005      	b.n	8003e38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e2c:	6978      	ldr	r0, [r7, #20]
 8003e2e:	f001 fca7 	bl	8005780 <vPortFree>
 8003e32:	e001      	b.n	8003e38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9303      	str	r3, [sp, #12]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	9302      	str	r3, [sp, #8]
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f80e 	bl	8003e7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e62:	69f8      	ldr	r0, [r7, #28]
 8003e64:	f000 f892 	bl	8003f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e002      	b.n	8003e74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e74:	69bb      	ldr	r3, [r7, #24]
	}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b088      	sub	sp, #32
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	461a      	mov	r2, r3
 8003e96:	21a5      	movs	r1, #165	; 0xa5
 8003e98:	f001 fdba 	bl	8005a10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f023 0307 	bic.w	r3, r3, #7
 8003eb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	617b      	str	r3, [r7, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e012      	b.n	8003f02 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	7819      	ldrb	r1, [r3, #0]
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3334      	adds	r3, #52	; 0x34
 8003eec:	460a      	mov	r2, r1
 8003eee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d9e9      	bls.n	8003edc <prvInitialiseNewTask+0x5e>
 8003f08:	e000      	b.n	8003f0c <prvInitialiseNewTask+0x8e>
		{
			break;
 8003f0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2b37      	cmp	r3, #55	; 0x37
 8003f18:	d901      	bls.n	8003f1e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f1a:	2337      	movs	r3, #55	; 0x37
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	3304      	adds	r3, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff f987 	bl	8003248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	3318      	adds	r3, #24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff f982 	bl	8003248 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	69b8      	ldr	r0, [r7, #24]
 8003f6e:	f001 f8f5 	bl	800515c <pxPortInitialiseStack>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f84:	bf00      	nop
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f94:	f001 fa0e 	bl	80053b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <prvAddNewTaskToReadyList+0xc4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4a2c      	ldr	r2, [pc, #176]	; (8004050 <prvAddNewTaskToReadyList+0xc4>)
 8003fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <prvAddNewTaskToReadyList+0xc8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003faa:	4a2a      	ldr	r2, [pc, #168]	; (8004054 <prvAddNewTaskToReadyList+0xc8>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <prvAddNewTaskToReadyList+0xc4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d110      	bne.n	8003fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fb8:	f000 fc1a 	bl	80047f0 <prvInitialiseTaskLists>
 8003fbc:	e00d      	b.n	8003fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fbe:	4b26      	ldr	r3, [pc, #152]	; (8004058 <prvAddNewTaskToReadyList+0xcc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <prvAddNewTaskToReadyList+0xc8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d802      	bhi.n	8003fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <prvAddNewTaskToReadyList+0xc8>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <prvAddNewTaskToReadyList+0xd0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	; (800405c <prvAddNewTaskToReadyList+0xd0>)
 8003fe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	; (800405c <prvAddNewTaskToReadyList+0xd0>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <prvAddNewTaskToReadyList+0xd4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d903      	bls.n	8004000 <prvAddNewTaskToReadyList+0x74>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a18      	ldr	r2, [pc, #96]	; (8004060 <prvAddNewTaskToReadyList+0xd4>)
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <prvAddNewTaskToReadyList+0xd8>)
 800400e:	441a      	add	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7ff f923 	bl	8003262 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800401c:	f001 f9fa 	bl	8005414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <prvAddNewTaskToReadyList+0xcc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <prvAddNewTaskToReadyList+0xc8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d207      	bcs.n	8004046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004036:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <prvAddNewTaskToReadyList+0xdc>)
 8004038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000cdc 	.word	0x20000cdc
 8004054:	20000808 	.word	0x20000808
 8004058:	20000ce8 	.word	0x20000ce8
 800405c:	20000cf8 	.word	0x20000cf8
 8004060:	20000ce4 	.word	0x20000ce4
 8004064:	2000080c 	.word	0x2000080c
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d017      	beq.n	80040ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <vTaskDelay+0x60>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <vTaskDelay+0x30>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60bb      	str	r3, [r7, #8]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800409c:	f000 f880 	bl	80041a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040a0:	2100      	movs	r1, #0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fcf4 	bl	8004a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040a8:	f000 f888 	bl	80041bc <xTaskResumeAll>
 80040ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d107      	bne.n	80040c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <vTaskDelay+0x64>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000d04 	.word	0x20000d04
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040e2:	463a      	mov	r2, r7
 80040e4:	1d39      	adds	r1, r7, #4
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff f858 	bl	80031a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040f0:	6839      	ldr	r1, [r7, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	9202      	str	r2, [sp, #8]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2300      	movs	r3, #0
 8004100:	460a      	mov	r2, r1
 8004102:	4921      	ldr	r1, [pc, #132]	; (8004188 <vTaskStartScheduler+0xb4>)
 8004104:	4821      	ldr	r0, [pc, #132]	; (800418c <vTaskStartScheduler+0xb8>)
 8004106:	f7ff fe19 	bl	8003d3c <xTaskCreateStatic>
 800410a:	4603      	mov	r3, r0
 800410c:	4a20      	ldr	r2, [pc, #128]	; (8004190 <vTaskStartScheduler+0xbc>)
 800410e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004110:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <vTaskStartScheduler+0xbc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004118:	2301      	movs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e001      	b.n	8004122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d102      	bne.n	800412e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004128:	f000 fd06 	bl	8004b38 <xTimerCreateTimerTask>
 800412c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d116      	bne.n	8004162 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	613b      	str	r3, [r7, #16]
}
 8004146:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <vTaskStartScheduler+0xc0>)
 800414a:	f04f 32ff 	mov.w	r2, #4294967295
 800414e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <vTaskStartScheduler+0xc4>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <vTaskStartScheduler+0xc8>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800415c:	f001 f888 	bl	8005270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004160:	e00e      	b.n	8004180 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d10a      	bne.n	8004180 <vTaskStartScheduler+0xac>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60fb      	str	r3, [r7, #12]
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <vTaskStartScheduler+0xaa>
}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	08005a7c 	.word	0x08005a7c
 800418c:	080047c1 	.word	0x080047c1
 8004190:	20000d00 	.word	0x20000d00
 8004194:	20000cfc 	.word	0x20000cfc
 8004198:	20000ce8 	.word	0x20000ce8
 800419c:	20000ce0 	.word	0x20000ce0

080041a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <vTaskSuspendAll+0x18>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <vTaskSuspendAll+0x18>)
 80041ac:	6013      	str	r3, [r2, #0]
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	20000d04 	.word	0x20000d04

080041bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041ca:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <xTaskResumeAll+0x118>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	603b      	str	r3, [r7, #0]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041e8:	f001 f8e4 	bl	80053b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041ec:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <xTaskResumeAll+0x118>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	4a38      	ldr	r2, [pc, #224]	; (80042d4 <xTaskResumeAll+0x118>)
 80041f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f6:	4b37      	ldr	r3, [pc, #220]	; (80042d4 <xTaskResumeAll+0x118>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d162      	bne.n	80042c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041fe:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <xTaskResumeAll+0x11c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d05e      	beq.n	80042c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004206:	e02f      	b.n	8004268 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004208:	4b34      	ldr	r3, [pc, #208]	; (80042dc <xTaskResumeAll+0x120>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3318      	adds	r3, #24
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff f881 	bl	800331c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3304      	adds	r3, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f87c 	bl	800331c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <xTaskResumeAll+0x124>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d903      	bls.n	8004238 <xTaskResumeAll+0x7c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <xTaskResumeAll+0x124>)
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <xTaskResumeAll+0x128>)
 8004246:	441a      	add	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f7ff f807 	bl	8003262 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <xTaskResumeAll+0x12c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <xTaskResumeAll+0x130>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <xTaskResumeAll+0x120>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1cb      	bne.n	8004208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004276:	f000 fb59 	bl	800492c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <xTaskResumeAll+0x134>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004286:	f000 f847 	bl	8004318 <xTaskIncrementTick>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <xTaskResumeAll+0x130>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3b01      	subs	r3, #1
 800429a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f1      	bne.n	8004286 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <xTaskResumeAll+0x134>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <xTaskResumeAll+0x130>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d009      	beq.n	80042c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <xTaskResumeAll+0x138>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042c4:	f001 f8a6 	bl	8005414 <vPortExitCritical>

	return xAlreadyYielded;
 80042c8:	68bb      	ldr	r3, [r7, #8]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000d04 	.word	0x20000d04
 80042d8:	20000cdc 	.word	0x20000cdc
 80042dc:	20000c9c 	.word	0x20000c9c
 80042e0:	20000ce4 	.word	0x20000ce4
 80042e4:	2000080c 	.word	0x2000080c
 80042e8:	20000808 	.word	0x20000808
 80042ec:	20000cf0 	.word	0x20000cf0
 80042f0:	20000cec 	.word	0x20000cec
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <xTaskGetTickCount+0x1c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004304:	687b      	ldr	r3, [r7, #4]
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000ce0 	.word	0x20000ce0

08004318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004322:	4b51      	ldr	r3, [pc, #324]	; (8004468 <xTaskIncrementTick+0x150>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 808e 	bne.w	8004448 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800432c:	4b4f      	ldr	r3, [pc, #316]	; (800446c <xTaskIncrementTick+0x154>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004334:	4a4d      	ldr	r2, [pc, #308]	; (800446c <xTaskIncrementTick+0x154>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d120      	bne.n	8004382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004340:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <xTaskIncrementTick+0x158>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <xTaskIncrementTick+0x48>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	603b      	str	r3, [r7, #0]
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <xTaskIncrementTick+0x46>
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <xTaskIncrementTick+0x158>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	4b43      	ldr	r3, [pc, #268]	; (8004474 <xTaskIncrementTick+0x15c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a41      	ldr	r2, [pc, #260]	; (8004470 <xTaskIncrementTick+0x158>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4a41      	ldr	r2, [pc, #260]	; (8004474 <xTaskIncrementTick+0x15c>)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b40      	ldr	r3, [pc, #256]	; (8004478 <xTaskIncrementTick+0x160>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	4a3f      	ldr	r2, [pc, #252]	; (8004478 <xTaskIncrementTick+0x160>)
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	f000 fad5 	bl	800492c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004382:	4b3e      	ldr	r3, [pc, #248]	; (800447c <xTaskIncrementTick+0x164>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	429a      	cmp	r2, r3
 800438a:	d34e      	bcc.n	800442a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800438c:	4b38      	ldr	r3, [pc, #224]	; (8004470 <xTaskIncrementTick+0x158>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <xTaskIncrementTick+0x82>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <xTaskIncrementTick+0x84>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a0:	4b36      	ldr	r3, [pc, #216]	; (800447c <xTaskIncrementTick+0x164>)
 80043a2:	f04f 32ff 	mov.w	r2, #4294967295
 80043a6:	601a      	str	r2, [r3, #0]
					break;
 80043a8:	e03f      	b.n	800442a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043aa:	4b31      	ldr	r3, [pc, #196]	; (8004470 <xTaskIncrementTick+0x158>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d203      	bcs.n	80043ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043c2:	4a2e      	ldr	r2, [pc, #184]	; (800447c <xTaskIncrementTick+0x164>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6013      	str	r3, [r2, #0]
						break;
 80043c8:	e02f      	b.n	800442a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe ffa4 	bl	800331c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	3318      	adds	r3, #24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe ff9b 	bl	800331c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <xTaskIncrementTick+0x168>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d903      	bls.n	80043fa <xTaskIncrementTick+0xe2>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a22      	ldr	r2, [pc, #136]	; (8004480 <xTaskIncrementTick+0x168>)
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <xTaskIncrementTick+0x16c>)
 8004408:	441a      	add	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	3304      	adds	r3, #4
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f7fe ff26 	bl	8003262 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <xTaskIncrementTick+0x170>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	429a      	cmp	r2, r3
 8004422:	d3b3      	bcc.n	800438c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004428:	e7b0      	b.n	800438c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <xTaskIncrementTick+0x170>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	4914      	ldr	r1, [pc, #80]	; (8004484 <xTaskIncrementTick+0x16c>)
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d907      	bls.n	8004452 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004442:	2301      	movs	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e004      	b.n	8004452 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <xTaskIncrementTick+0x174>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3301      	adds	r3, #1
 800444e:	4a0f      	ldr	r2, [pc, #60]	; (800448c <xTaskIncrementTick+0x174>)
 8004450:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <xTaskIncrementTick+0x178>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800445a:	2301      	movs	r3, #1
 800445c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800445e:	697b      	ldr	r3, [r7, #20]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000d04 	.word	0x20000d04
 800446c:	20000ce0 	.word	0x20000ce0
 8004470:	20000c94 	.word	0x20000c94
 8004474:	20000c98 	.word	0x20000c98
 8004478:	20000cf4 	.word	0x20000cf4
 800447c:	20000cfc 	.word	0x20000cfc
 8004480:	20000ce4 	.word	0x20000ce4
 8004484:	2000080c 	.word	0x2000080c
 8004488:	20000808 	.word	0x20000808
 800448c:	20000cec 	.word	0x20000cec
 8004490:	20000cf0 	.word	0x20000cf0

08004494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800449a:	4b28      	ldr	r3, [pc, #160]	; (800453c <vTaskSwitchContext+0xa8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <vTaskSwitchContext+0xac>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044a8:	e041      	b.n	800452e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <vTaskSwitchContext+0xac>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <vTaskSwitchContext+0xb0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e010      	b.n	80044da <vTaskSwitchContext+0x46>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
}
 80044d0:	bf00      	nop
 80044d2:	e7fe      	b.n	80044d2 <vTaskSwitchContext+0x3e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	491b      	ldr	r1, [pc, #108]	; (8004548 <vTaskSwitchContext+0xb4>)
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0e4      	beq.n	80044b8 <vTaskSwitchContext+0x24>
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4a13      	ldr	r2, [pc, #76]	; (8004548 <vTaskSwitchContext+0xb4>)
 80044fa:	4413      	add	r3, r2
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3308      	adds	r3, #8
 8004510:	429a      	cmp	r2, r3
 8004512:	d104      	bne.n	800451e <vTaskSwitchContext+0x8a>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a09      	ldr	r2, [pc, #36]	; (800454c <vTaskSwitchContext+0xb8>)
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4a06      	ldr	r2, [pc, #24]	; (8004544 <vTaskSwitchContext+0xb0>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6013      	str	r3, [r2, #0]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000d04 	.word	0x20000d04
 8004540:	20000cf0 	.word	0x20000cf0
 8004544:	20000ce4 	.word	0x20000ce4
 8004548:	2000080c 	.word	0x2000080c
 800454c:	20000808 	.word	0x20000808

08004550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <vTaskPlaceOnEventList+0x44>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3318      	adds	r3, #24
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fe fe93 	bl	80032aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004584:	2101      	movs	r1, #1
 8004586:	6838      	ldr	r0, [r7, #0]
 8004588:	f000 fa82 	bl	8004a90 <prvAddCurrentTaskToDelayedList>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000808 	.word	0x20000808

08004598 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	617b      	str	r3, [r7, #20]
}
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <vTaskPlaceOnEventListRestricted+0x54>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3318      	adds	r3, #24
 80045c6:	4619      	mov	r1, r3
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7fe fe4a 	bl	8003262 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	68b8      	ldr	r0, [r7, #8]
 80045de:	f000 fa57 	bl	8004a90 <prvAddCurrentTaskToDelayedList>
	}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000808 	.word	0x20000808

080045f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60fb      	str	r3, [r7, #12]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	3318      	adds	r3, #24
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fe7b 	bl	800331c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <xTaskRemoveFromEventList+0xb0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11d      	bne.n	800466a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3304      	adds	r3, #4
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fe72 	bl	800331c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <xTaskRemoveFromEventList+0xb4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d903      	bls.n	800464c <xTaskRemoveFromEventList+0x5c>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <xTaskRemoveFromEventList+0xb4>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <xTaskRemoveFromEventList+0xb8>)
 800465a:	441a      	add	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fe fdfd 	bl	8003262 <vListInsertEnd>
 8004668:	e005      	b.n	8004676 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	3318      	adds	r3, #24
 800466e:	4619      	mov	r1, r3
 8004670:	480e      	ldr	r0, [pc, #56]	; (80046ac <xTaskRemoveFromEventList+0xbc>)
 8004672:	f7fe fdf6 	bl	8003262 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <xTaskRemoveFromEventList+0xc0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	429a      	cmp	r2, r3
 8004682:	d905      	bls.n	8004690 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004684:	2301      	movs	r3, #1
 8004686:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <xTaskRemoveFromEventList+0xc4>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	e001      	b.n	8004694 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004694:	697b      	ldr	r3, [r7, #20]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000d04 	.word	0x20000d04
 80046a4:	20000ce4 	.word	0x20000ce4
 80046a8:	2000080c 	.word	0x2000080c
 80046ac:	20000c9c 	.word	0x20000c9c
 80046b0:	20000808 	.word	0x20000808
 80046b4:	20000cf0 	.word	0x20000cf0

080046b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <vTaskInternalSetTimeOutState+0x24>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <vTaskInternalSetTimeOutState+0x28>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	605a      	str	r2, [r3, #4]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000cf4 	.word	0x20000cf4
 80046e0:	20000ce0 	.word	0x20000ce0

080046e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	613b      	str	r3, [r7, #16]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	60fb      	str	r3, [r7, #12]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004726:	f000 fe45 	bl	80053b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <xTaskCheckForTimeOut+0xbc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d102      	bne.n	800474a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	e023      	b.n	8004792 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <xTaskCheckForTimeOut+0xc0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d007      	beq.n	8004766 <xTaskCheckForTimeOut+0x82>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	e015      	b.n	8004792 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	429a      	cmp	r2, r3
 800476e:	d20b      	bcs.n	8004788 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff9b 	bl	80046b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e004      	b.n	8004792 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800478e:	2301      	movs	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004792:	f000 fe3f 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8004796:	69fb      	ldr	r3, [r7, #28]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000ce0 	.word	0x20000ce0
 80047a4:	20000cf4 	.word	0x20000cf4

080047a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <vTaskMissedYield+0x14>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	20000cf0 	.word	0x20000cf0

080047c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047c8:	f000 f852 	bl	8004870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <prvIdleTask+0x28>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d9f9      	bls.n	80047c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <prvIdleTask+0x2c>)
 80047d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047e4:	e7f0      	b.n	80047c8 <prvIdleTask+0x8>
 80047e6:	bf00      	nop
 80047e8:	2000080c 	.word	0x2000080c
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	e00c      	b.n	8004816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4a12      	ldr	r2, [pc, #72]	; (8004850 <prvInitialiseTaskLists+0x60>)
 8004808:	4413      	add	r3, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe fcfc 	bl	8003208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3301      	adds	r3, #1
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b37      	cmp	r3, #55	; 0x37
 800481a:	d9ef      	bls.n	80047fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800481c:	480d      	ldr	r0, [pc, #52]	; (8004854 <prvInitialiseTaskLists+0x64>)
 800481e:	f7fe fcf3 	bl	8003208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004822:	480d      	ldr	r0, [pc, #52]	; (8004858 <prvInitialiseTaskLists+0x68>)
 8004824:	f7fe fcf0 	bl	8003208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004828:	480c      	ldr	r0, [pc, #48]	; (800485c <prvInitialiseTaskLists+0x6c>)
 800482a:	f7fe fced 	bl	8003208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800482e:	480c      	ldr	r0, [pc, #48]	; (8004860 <prvInitialiseTaskLists+0x70>)
 8004830:	f7fe fcea 	bl	8003208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004834:	480b      	ldr	r0, [pc, #44]	; (8004864 <prvInitialiseTaskLists+0x74>)
 8004836:	f7fe fce7 	bl	8003208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <prvInitialiseTaskLists+0x78>)
 800483c:	4a05      	ldr	r2, [pc, #20]	; (8004854 <prvInitialiseTaskLists+0x64>)
 800483e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <prvInitialiseTaskLists+0x7c>)
 8004842:	4a05      	ldr	r2, [pc, #20]	; (8004858 <prvInitialiseTaskLists+0x68>)
 8004844:	601a      	str	r2, [r3, #0]
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000080c 	.word	0x2000080c
 8004854:	20000c6c 	.word	0x20000c6c
 8004858:	20000c80 	.word	0x20000c80
 800485c:	20000c9c 	.word	0x20000c9c
 8004860:	20000cb0 	.word	0x20000cb0
 8004864:	20000cc8 	.word	0x20000cc8
 8004868:	20000c94 	.word	0x20000c94
 800486c:	20000c98 	.word	0x20000c98

08004870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004876:	e019      	b.n	80048ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004878:	f000 fd9c 	bl	80053b4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <prvCheckTasksWaitingTermination+0x50>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fd47 	bl	800331c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <prvCheckTasksWaitingTermination+0x54>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3b01      	subs	r3, #1
 8004894:	4a0b      	ldr	r2, [pc, #44]	; (80048c4 <prvCheckTasksWaitingTermination+0x54>)
 8004896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <prvCheckTasksWaitingTermination+0x58>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <prvCheckTasksWaitingTermination+0x58>)
 80048a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048a2:	f000 fdb7 	bl	8005414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f810 	bl	80048cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <prvCheckTasksWaitingTermination+0x58>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e1      	bne.n	8004878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000cb0 	.word	0x20000cb0
 80048c4:	20000cdc 	.word	0x20000cdc
 80048c8:	20000cc4 	.word	0x20000cc4

080048cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d108      	bne.n	80048f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 ff4c 	bl	8005780 <vPortFree>
				vPortFree( pxTCB );
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 ff49 	bl	8005780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048ee:	e018      	b.n	8004922 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d103      	bne.n	8004902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 ff40 	bl	8005780 <vPortFree>
	}
 8004900:	e00f      	b.n	8004922 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004908:	2b02      	cmp	r3, #2
 800490a:	d00a      	beq.n	8004922 <prvDeleteTCB+0x56>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <prvDeleteTCB+0x54>
	}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004932:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <prvResetNextTaskUnblockTime+0x44>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <prvResetNextTaskUnblockTime+0x14>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <prvResetNextTaskUnblockTime+0x16>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <prvResetNextTaskUnblockTime+0x48>)
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800494e:	e008      	b.n	8004962 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <prvResetNextTaskUnblockTime+0x44>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a05      	ldr	r2, [pc, #20]	; (8004974 <prvResetNextTaskUnblockTime+0x48>)
 8004960:	6013      	str	r3, [r2, #0]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000c94 	.word	0x20000c94
 8004974:	20000cfc 	.word	0x20000cfc

08004978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <xTaskGetSchedulerState+0x34>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004986:	2301      	movs	r3, #1
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	e008      	b.n	800499e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <xTaskGetSchedulerState+0x38>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004994:	2302      	movs	r3, #2
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	e001      	b.n	800499e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800499e:	687b      	ldr	r3, [r7, #4]
	}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000ce8 	.word	0x20000ce8
 80049b0:	20000d04 	.word	0x20000d04

080049b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d056      	beq.n	8004a78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049ca:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <xTaskPriorityDisinherit+0xd0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d00a      	beq.n	80049ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60bb      	str	r3, [r7, #8]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	1e5a      	subs	r2, r3, #1
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d02c      	beq.n	8004a78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d128      	bne.n	8004a78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fc76 	bl	800331c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <xTaskPriorityDisinherit+0xd4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d903      	bls.n	8004a58 <xTaskPriorityDisinherit+0xa4>
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <xTaskPriorityDisinherit+0xd4>)
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <xTaskPriorityDisinherit+0xd8>)
 8004a66:	441a      	add	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f7fe fbf7 	bl	8003262 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a78:	697b      	ldr	r3, [r7, #20]
	}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000808 	.word	0x20000808
 8004a88:	20000ce4 	.word	0x20000ce4
 8004a8c:	2000080c 	.word	0x2000080c

08004a90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a9a:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa0:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fc38 	bl	800331c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d10a      	bne.n	8004aca <prvAddCurrentTaskToDelayedList+0x3a>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4819      	ldr	r0, [pc, #100]	; (8004b28 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ac4:	f7fe fbcd 	bl	8003262 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ac8:	e026      	b.n	8004b18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4413      	add	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ad2:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d209      	bcs.n	8004af6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7fe fbdb 	bl	80032aa <vListInsert>
}
 8004af4:	e010      	b.n	8004b18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af6:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7fe fbd1 	bl	80032aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d202      	bcs.n	8004b18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b12:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000ce0 	.word	0x20000ce0
 8004b24:	20000808 	.word	0x20000808
 8004b28:	20000cc8 	.word	0x20000cc8
 8004b2c:	20000c98 	.word	0x20000c98
 8004b30:	20000c94 	.word	0x20000c94
 8004b34:	20000cfc 	.word	0x20000cfc

08004b38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b42:	f000 facb 	bl	80050dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b46:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <xTimerCreateTimerTask+0x80>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d021      	beq.n	8004b92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b56:	1d3a      	adds	r2, r7, #4
 8004b58:	f107 0108 	add.w	r1, r7, #8
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fb37 	bl	80031d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	9202      	str	r2, [sp, #8]
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	2302      	movs	r3, #2
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	460a      	mov	r2, r1
 8004b78:	4910      	ldr	r1, [pc, #64]	; (8004bbc <xTimerCreateTimerTask+0x84>)
 8004b7a:	4811      	ldr	r0, [pc, #68]	; (8004bc0 <xTimerCreateTimerTask+0x88>)
 8004b7c:	f7ff f8de 	bl	8003d3c <xTaskCreateStatic>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <xTimerCreateTimerTask+0x8c>)
 8004b84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <xTimerCreateTimerTask+0x8c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	613b      	str	r3, [r7, #16]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bae:	697b      	ldr	r3, [r7, #20]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	20000d38 	.word	0x20000d38
 8004bbc:	08005a84 	.word	0x08005a84
 8004bc0:	08004ce5 	.word	0x08004ce5
 8004bc4:	20000d3c 	.word	0x20000d3c

08004bc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	623b      	str	r3, [r7, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bf6:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <xTimerGenericCommand+0x98>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d02a      	beq.n	8004c54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	dc18      	bgt.n	8004c42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c10:	f7ff feb2 	bl	8004978 <xTaskGetSchedulerState>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d109      	bne.n	8004c2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <xTimerGenericCommand+0x98>)
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	f107 0110 	add.w	r1, r7, #16
 8004c22:	2300      	movs	r3, #0
 8004c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c26:	f7fe fca5 	bl	8003574 <xQueueGenericSend>
 8004c2a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c2c:	e012      	b.n	8004c54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <xTimerGenericCommand+0x98>)
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f107 0110 	add.w	r1, r7, #16
 8004c36:	2300      	movs	r3, #0
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f7fe fc9b 	bl	8003574 <xQueueGenericSend>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c40:	e008      	b.n	8004c54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <xTimerGenericCommand+0x98>)
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f107 0110 	add.w	r1, r7, #16
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	f7fe fd8f 	bl	8003770 <xQueueGenericSendFromISR>
 8004c52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3728      	adds	r7, #40	; 0x28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000d38 	.word	0x20000d38

08004c64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <prvProcessExpiredTimer+0x7c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe fb4d 	bl	800331c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d122      	bne.n	8004cd0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	18d1      	adds	r1, r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f000 f8c8 	bl	8004e2c <prvInsertTimerInActiveList>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	2100      	movs	r1, #0
 8004cac:	6978      	ldr	r0, [r7, #20]
 8004cae:	f7ff ff8b 	bl	8004bc8 <xTimerGenericCommand>
 8004cb2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	60fb      	str	r3, [r7, #12]
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	6978      	ldr	r0, [r7, #20]
 8004cd6:	4798      	blx	r3
}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000d30 	.word	0x20000d30

08004ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cec:	f107 0308 	add.w	r3, r7, #8
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f857 	bl	8004da4 <prvGetNextExpireTime>
 8004cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f803 	bl	8004d08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d02:	f000 f8d5 	bl	8004eb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d06:	e7f1      	b.n	8004cec <prvTimerTask+0x8>

08004d08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d12:	f7ff fa45 	bl	80041a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d16:	f107 0308 	add.w	r3, r7, #8
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f866 	bl	8004dec <prvSampleTimeNow>
 8004d20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d130      	bne.n	8004d8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <prvProcessTimerOrBlockTask+0x3c>
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d806      	bhi.n	8004d44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d36:	f7ff fa41 	bl	80041bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ff91 	bl	8004c64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d42:	e024      	b.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <prvProcessTimerOrBlockTask+0x90>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <prvProcessTimerOrBlockTask+0x94>)
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fe ffb3 	bl	8003cd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d6e:	f7ff fa25 	bl	80041bc <xTaskResumeAll>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <prvProcessTimerOrBlockTask+0x98>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
}
 8004d88:	e001      	b.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d8a:	f7ff fa17 	bl	80041bc <xTaskResumeAll>
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000d34 	.word	0x20000d34
 8004d9c:	20000d38 	.word	0x20000d38
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <prvGetNextExpireTime+0x44>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dca:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <prvGetNextExpireTime+0x44>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	20000d30 	.word	0x20000d30

08004dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004df4:	f7ff fa80 	bl	80042f8 <xTaskGetTickCount>
 8004df8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <prvSampleTimeNow+0x3c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d205      	bcs.n	8004e10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e04:	f000 f908 	bl	8005018 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e002      	b.n	8004e16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e16:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <prvSampleTimeNow+0x3c>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000d40 	.word	0x20000d40

08004e2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d812      	bhi.n	8004e78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e01b      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <prvInsertTimerInActiveList+0x7c>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7fe fa1a 	bl	80032aa <vListInsert>
 8004e76:	e012      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d206      	bcs.n	8004e8e <prvInsertTimerInActiveList+0x62>
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e007      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <prvInsertTimerInActiveList+0x80>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f7fe fa06 	bl	80032aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000d34 	.word	0x20000d34
 8004eac:	20000d30 	.word	0x20000d30

08004eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08e      	sub	sp, #56	; 0x38
 8004eb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eb6:	e09d      	b.n	8004ff4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da18      	bge.n	8004ef0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	61fb      	str	r3, [r7, #28]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee6:	6850      	ldr	r0, [r2, #4]
 8004ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	4611      	mov	r1, r2
 8004eee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	db7d      	blt.n	8004ff2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fa08 	bl	800331c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ff6c 	bl	8004dec <prvSampleTimeNow>
 8004f14:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b09      	cmp	r3, #9
 8004f1a:	d86b      	bhi.n	8004ff4 <prvProcessReceivedCommands+0x144>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <prvProcessReceivedCommands+0x74>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f4d 	.word	0x08004f4d
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f4d 	.word	0x08004f4d
 8004f30:	08004ff5 	.word	0x08004ff5
 8004f34:	08004fa9 	.word	0x08004fa9
 8004f38:	08004fe1 	.word	0x08004fe1
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f4d 	.word	0x08004f4d
 8004f44:	08004ff5 	.word	0x08004ff5
 8004f48:	08004fa9 	.word	0x08004fa9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	18d1      	adds	r1, r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5a:	f7ff ff67 	bl	8004e2c <prvInsertTimerInActiveList>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d047      	beq.n	8004ff4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f6a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d13f      	bne.n	8004ff4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f86:	f7ff fe1f 	bl	8004bc8 <xTimerGenericCommand>
 8004f8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d130      	bne.n	8004ff4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	61bb      	str	r3, [r7, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	617b      	str	r3, [r7, #20]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	18d1      	adds	r1, r2, r3
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fda:	f7ff ff27 	bl	8004e2c <prvInsertTimerInActiveList>
					break;
 8004fde:	e009      	b.n	8004ff4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fec:	f000 fbc8 	bl	8005780 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ff0:	e000      	b.n	8004ff4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ff2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <prvProcessReceivedCommands+0x164>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	1d39      	adds	r1, r7, #4
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fc4f 	bl	80038a0 <xQueueReceive>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f47f af57 	bne.w	8004eb8 <prvProcessReceivedCommands+0x8>
	}
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000d38 	.word	0x20000d38

08005018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800501e:	e045      	b.n	80050ac <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005020:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <prvSwitchTimerLists+0xbc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <prvSwitchTimerLists+0xbc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3304      	adds	r3, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe f96f 	bl	800331c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d12e      	bne.n	80050ac <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4413      	add	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d90e      	bls.n	800507e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800506c:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <prvSwitchTimerLists+0xbc>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fe f917 	bl	80032aa <vListInsert>
 800507c:	e016      	b.n	80050ac <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800507e:	2300      	movs	r3, #0
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2300      	movs	r3, #0
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	2100      	movs	r1, #0
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff fd9d 	bl	8004bc8 <xTimerGenericCommand>
 800508e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <prvSwitchTimerLists+0x94>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	603b      	str	r3, [r7, #0]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <prvSwitchTimerLists+0xbc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1b4      	bne.n	8005020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050b6:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <prvSwitchTimerLists+0xbc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <prvSwitchTimerLists+0xc0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <prvSwitchTimerLists+0xbc>)
 80050c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050c4:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <prvSwitchTimerLists+0xc0>)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000d30 	.word	0x20000d30
 80050d8:	20000d34 	.word	0x20000d34

080050dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050e2:	f000 f967 	bl	80053b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d120      	bne.n	8005130 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050ee:	4814      	ldr	r0, [pc, #80]	; (8005140 <prvCheckForValidListAndQueue+0x64>)
 80050f0:	f7fe f88a 	bl	8003208 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050f4:	4813      	ldr	r0, [pc, #76]	; (8005144 <prvCheckForValidListAndQueue+0x68>)
 80050f6:	f7fe f887 	bl	8003208 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <prvCheckForValidListAndQueue+0x6c>)
 80050fc:	4a10      	ldr	r2, [pc, #64]	; (8005140 <prvCheckForValidListAndQueue+0x64>)
 80050fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <prvCheckForValidListAndQueue+0x70>)
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <prvCheckForValidListAndQueue+0x68>)
 8005104:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <prvCheckForValidListAndQueue+0x74>)
 800510c:	4a11      	ldr	r2, [pc, #68]	; (8005154 <prvCheckForValidListAndQueue+0x78>)
 800510e:	2110      	movs	r1, #16
 8005110:	200a      	movs	r0, #10
 8005112:	f7fe f995 	bl	8003440 <xQueueGenericCreateStatic>
 8005116:	4603      	mov	r3, r0
 8005118:	4a08      	ldr	r2, [pc, #32]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 800511a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	490b      	ldr	r1, [pc, #44]	; (8005158 <prvCheckForValidListAndQueue+0x7c>)
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fda8 	bl	8003c80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005130:	f000 f970 	bl	8005414 <vPortExitCritical>
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000d38 	.word	0x20000d38
 8005140:	20000d08 	.word	0x20000d08
 8005144:	20000d1c 	.word	0x20000d1c
 8005148:	20000d30 	.word	0x20000d30
 800514c:	20000d34 	.word	0x20000d34
 8005150:	20000de4 	.word	0x20000de4
 8005154:	20000d44 	.word	0x20000d44
 8005158:	08005a8c 	.word	0x08005a8c

0800515c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3b04      	subs	r3, #4
 800516c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3b04      	subs	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 0201 	bic.w	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3b04      	subs	r3, #4
 800518a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800518c:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <pxPortInitialiseStack+0x64>)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3b14      	subs	r3, #20
 8005196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b04      	subs	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f06f 0202 	mvn.w	r2, #2
 80051aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3b20      	subs	r3, #32
 80051b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051b2:	68fb      	ldr	r3, [r7, #12]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	080051c5 	.word	0x080051c5

080051c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051ce:	4b12      	ldr	r3, [pc, #72]	; (8005218 <prvTaskExitError+0x54>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	d00a      	beq.n	80051ee <prvTaskExitError+0x2a>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	60fb      	str	r3, [r7, #12]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <prvTaskExitError+0x28>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60bb      	str	r3, [r7, #8]
}
 8005200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005202:	bf00      	nop
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0fc      	beq.n	8005204 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	2000000c 	.word	0x2000000c
 800521c:	00000000 	.word	0x00000000

08005220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <pxCurrentTCBConst2>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	f380 8809 	msr	PSP, r0
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8811 	msr	BASEPRI, r0
 800523a:	4770      	bx	lr
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst2>:
 8005240:	20000808 	.word	0x20000808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005248:	4808      	ldr	r0, [pc, #32]	; (800526c <prvPortStartFirstTask+0x24>)
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f380 8808 	msr	MSP, r0
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8814 	msr	CONTROL, r0
 800525a:	b662      	cpsie	i
 800525c:	b661      	cpsie	f
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	df00      	svc	0
 8005268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800526a:	bf00      	nop
 800526c:	e000ed08 	.word	0xe000ed08

08005270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005276:	4b46      	ldr	r3, [pc, #280]	; (8005390 <xPortStartScheduler+0x120>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a46      	ldr	r2, [pc, #280]	; (8005394 <xPortStartScheduler+0x124>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10a      	bne.n	8005296 <xPortStartScheduler+0x26>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005296:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <xPortStartScheduler+0x120>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3f      	ldr	r2, [pc, #252]	; (8005398 <xPortStartScheduler+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10a      	bne.n	80052b6 <xPortStartScheduler+0x46>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60fb      	str	r3, [r7, #12]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052b6:	4b39      	ldr	r3, [pc, #228]	; (800539c <xPortStartScheduler+0x12c>)
 80052b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	22ff      	movs	r2, #255	; 0xff
 80052c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <xPortStartScheduler+0x130>)
 80052dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <xPortStartScheduler+0x134>)
 80052e0:	2207      	movs	r2, #7
 80052e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e4:	e009      	b.n	80052fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052e6:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <xPortStartScheduler+0x134>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	4a2d      	ldr	r2, [pc, #180]	; (80053a4 <xPortStartScheduler+0x134>)
 80052ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d0ef      	beq.n	80052e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <xPortStartScheduler+0x134>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1c3 0307 	rsb	r3, r3, #7
 800530e:	2b04      	cmp	r3, #4
 8005310:	d00a      	beq.n	8005328 <xPortStartScheduler+0xb8>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60bb      	str	r3, [r7, #8]
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <xPortStartScheduler+0x134>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <xPortStartScheduler+0x134>)
 8005330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <xPortStartScheduler+0x134>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <xPortStartScheduler+0x134>)
 800533c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <xPortStartScheduler+0x138>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <xPortStartScheduler+0x138>)
 800534c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <xPortStartScheduler+0x138>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <xPortStartScheduler+0x138>)
 8005358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800535c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800535e:	f000 f8dd 	bl	800551c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <xPortStartScheduler+0x13c>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005368:	f000 f8fc 	bl	8005564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <xPortStartScheduler+0x140>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <xPortStartScheduler+0x140>)
 8005372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005378:	f7ff ff66 	bl	8005248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800537c:	f7ff f88a 	bl	8004494 <vTaskSwitchContext>
	prvTaskExitError();
 8005380:	f7ff ff20 	bl	80051c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	e000ed00 	.word	0xe000ed00
 8005394:	410fc271 	.word	0x410fc271
 8005398:	410fc270 	.word	0x410fc270
 800539c:	e000e400 	.word	0xe000e400
 80053a0:	20000e34 	.word	0x20000e34
 80053a4:	20000e38 	.word	0x20000e38
 80053a8:	e000ed20 	.word	0xe000ed20
 80053ac:	2000000c 	.word	0x2000000c
 80053b0:	e000ef34 	.word	0xe000ef34

080053b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	607b      	str	r3, [r7, #4]
}
 80053cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <vPortEnterCritical+0x58>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	4a0d      	ldr	r2, [pc, #52]	; (800540c <vPortEnterCritical+0x58>)
 80053d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <vPortEnterCritical+0x58>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10f      	bne.n	8005400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <vPortEnterCritical+0x5c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <vPortEnterCritical+0x4c>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	603b      	str	r3, [r7, #0]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <vPortEnterCritical+0x4a>
	}
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	2000000c 	.word	0x2000000c
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <vPortExitCritical+0x50>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <vPortExitCritical+0x24>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	607b      	str	r3, [r7, #4]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <vPortExitCritical+0x50>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	4a09      	ldr	r2, [pc, #36]	; (8005464 <vPortExitCritical+0x50>)
 8005440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <vPortExitCritical+0x50>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <vPortExitCritical+0x42>
 800544a:	2300      	movs	r3, #0
 800544c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	f383 8811 	msr	BASEPRI, r3
}
 8005454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c
	...

08005470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005470:	f3ef 8009 	mrs	r0, PSP
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <pxCurrentTCBConst>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	f01e 0f10 	tst.w	lr, #16
 8005480:	bf08      	it	eq
 8005482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	6010      	str	r0, [r2, #0]
 800548c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005494:	f380 8811 	msr	BASEPRI, r0
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f7fe fff8 	bl	8004494 <vTaskSwitchContext>
 80054a4:	f04f 0000 	mov.w	r0, #0
 80054a8:	f380 8811 	msr	BASEPRI, r0
 80054ac:	bc09      	pop	{r0, r3}
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	6808      	ldr	r0, [r1, #0]
 80054b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b6:	f01e 0f10 	tst.w	lr, #16
 80054ba:	bf08      	it	eq
 80054bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054c0:	f380 8809 	msr	PSP, r0
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	f3af 8000 	nop.w

080054d0 <pxCurrentTCBConst>:
 80054d0:	20000808 	.word	0x20000808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
}
 80054f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054f2:	f7fe ff11 	bl	8004318 <xTaskIncrementTick>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <SysTick_Handler+0x40>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f383 8811 	msr	BASEPRI, r3
}
 800550e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <vPortSetupTimerInterrupt+0x34>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <vPortSetupTimerInterrupt+0x38>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <vPortSetupTimerInterrupt+0x3c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <vPortSetupTimerInterrupt+0x40>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <vPortSetupTimerInterrupt+0x44>)
 800553a:	3b01      	subs	r3, #1
 800553c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <vPortSetupTimerInterrupt+0x34>)
 8005540:	2207      	movs	r2, #7
 8005542:	601a      	str	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	e000e010 	.word	0xe000e010
 8005554:	e000e018 	.word	0xe000e018
 8005558:	20000000 	.word	0x20000000
 800555c:	10624dd3 	.word	0x10624dd3
 8005560:	e000e014 	.word	0xe000e014

08005564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005574 <vPortEnableVFP+0x10>
 8005568:	6801      	ldr	r1, [r0, #0]
 800556a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800556e:	6001      	str	r1, [r0, #0]
 8005570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005572:	bf00      	nop
 8005574:	e000ed88 	.word	0xe000ed88

08005578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800557e:	f3ef 8305 	mrs	r3, IPSR
 8005582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b0f      	cmp	r3, #15
 8005588:	d914      	bls.n	80055b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <vPortValidateInterruptPriority+0x70>)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005594:	4b15      	ldr	r3, [pc, #84]	; (80055ec <vPortValidateInterruptPriority+0x74>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	7afa      	ldrb	r2, [r7, #11]
 800559a:	429a      	cmp	r2, r3
 800559c:	d20a      	bcs.n	80055b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <vPortValidateInterruptPriority+0x78>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055bc:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <vPortValidateInterruptPriority+0x7c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d90a      	bls.n	80055da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	603b      	str	r3, [r7, #0]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <vPortValidateInterruptPriority+0x60>
	}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e3f0 	.word	0xe000e3f0
 80055ec:	20000e34 	.word	0x20000e34
 80055f0:	e000ed0c 	.word	0xe000ed0c
 80055f4:	20000e38 	.word	0x20000e38

080055f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005604:	f7fe fdcc 	bl	80041a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005608:	4b58      	ldr	r3, [pc, #352]	; (800576c <pvPortMalloc+0x174>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005610:	f000 f910 	bl	8005834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005614:	4b56      	ldr	r3, [pc, #344]	; (8005770 <pvPortMalloc+0x178>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	f040 808e 	bne.w	800573e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01d      	beq.n	8005664 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005628:	2208      	movs	r2, #8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4413      	add	r3, r2
 800562e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	2b00      	cmp	r3, #0
 8005638:	d014      	beq.n	8005664 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f023 0307 	bic.w	r3, r3, #7
 8005640:	3308      	adds	r3, #8
 8005642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <pvPortMalloc+0x6c>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	617b      	str	r3, [r7, #20]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d069      	beq.n	800573e <pvPortMalloc+0x146>
 800566a:	4b42      	ldr	r3, [pc, #264]	; (8005774 <pvPortMalloc+0x17c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d864      	bhi.n	800573e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005674:	4b40      	ldr	r3, [pc, #256]	; (8005778 <pvPortMalloc+0x180>)
 8005676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005678:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <pvPortMalloc+0x180>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800567e:	e004      	b.n	800568a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d903      	bls.n	800569c <pvPortMalloc+0xa4>
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f1      	bne.n	8005680 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800569c:	4b33      	ldr	r3, [pc, #204]	; (800576c <pvPortMalloc+0x174>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d04b      	beq.n	800573e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2208      	movs	r2, #8
 80056ac:	4413      	add	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	2308      	movs	r3, #8
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d91f      	bls.n	8005708 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <pvPortMalloc+0xf8>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	613b      	str	r3, [r7, #16]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005702:	69b8      	ldr	r0, [r7, #24]
 8005704:	f000 f8f8 	bl	80058f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005708:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <pvPortMalloc+0x17c>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	4a18      	ldr	r2, [pc, #96]	; (8005774 <pvPortMalloc+0x17c>)
 8005714:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005716:	4b17      	ldr	r3, [pc, #92]	; (8005774 <pvPortMalloc+0x17c>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <pvPortMalloc+0x184>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d203      	bcs.n	800572a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005722:	4b14      	ldr	r3, [pc, #80]	; (8005774 <pvPortMalloc+0x17c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <pvPortMalloc+0x184>)
 8005728:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <pvPortMalloc+0x178>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	431a      	orrs	r2, r3
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800573e:	f7fe fd3d 	bl	80041bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <pvPortMalloc+0x16a>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60fb      	str	r3, [r7, #12]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <pvPortMalloc+0x168>
	return pvReturn;
 8005762:	69fb      	ldr	r3, [r7, #28]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20001a44 	.word	0x20001a44
 8005770:	20001a50 	.word	0x20001a50
 8005774:	20001a48 	.word	0x20001a48
 8005778:	20001a3c 	.word	0x20001a3c
 800577c:	20001a4c 	.word	0x20001a4c

08005780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d048      	beq.n	8005824 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005792:	2308      	movs	r3, #8
 8005794:	425b      	negs	r3, r3
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	4b21      	ldr	r3, [pc, #132]	; (800582c <vPortFree+0xac>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <vPortFree+0x44>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	60fb      	str	r3, [r7, #12]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <vPortFree+0x62>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	60bb      	str	r3, [r7, #8]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <vPortFree+0xac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d019      	beq.n	8005824 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d115      	bne.n	8005824 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <vPortFree+0xac>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	43db      	mvns	r3, r3
 8005802:	401a      	ands	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005808:	f7fe fcca 	bl	80041a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <vPortFree+0xb0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4413      	add	r3, r2
 8005816:	4a06      	ldr	r2, [pc, #24]	; (8005830 <vPortFree+0xb0>)
 8005818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800581a:	6938      	ldr	r0, [r7, #16]
 800581c:	f000 f86c 	bl	80058f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005820:	f7fe fccc 	bl	80041bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005824:	bf00      	nop
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20001a50 	.word	0x20001a50
 8005830:	20001a48 	.word	0x20001a48

08005834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800583a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800583e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005840:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <prvHeapInit+0xac>)
 8005842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00c      	beq.n	8005868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3307      	adds	r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0307 	bic.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <prvHeapInit+0xac>)
 8005864:	4413      	add	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <prvHeapInit+0xb0>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005872:	4b1c      	ldr	r3, [pc, #112]	; (80058e4 <prvHeapInit+0xb0>)
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4413      	add	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005880:	2208      	movs	r2, #8
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0307 	bic.w	r3, r3, #7
 800588e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <prvHeapInit+0xb4>)
 8005894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <prvHeapInit+0xb4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2200      	movs	r2, #0
 800589c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800589e:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <prvHeapInit+0xb4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	1ad2      	subs	r2, r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <prvHeapInit+0xb4>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <prvHeapInit+0xb8>)
 80058c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <prvHeapInit+0xbc>)
 80058ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <prvHeapInit+0xc0>)
 80058ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058d2:	601a      	str	r2, [r3, #0]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	20000e3c 	.word	0x20000e3c
 80058e4:	20001a3c 	.word	0x20001a3c
 80058e8:	20001a44 	.word	0x20001a44
 80058ec:	20001a4c 	.word	0x20001a4c
 80058f0:	20001a48 	.word	0x20001a48
 80058f4:	20001a50 	.word	0x20001a50

080058f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005900:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <prvInsertBlockIntoFreeList+0xac>)
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e002      	b.n	800590c <prvInsertBlockIntoFreeList+0x14>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d8f7      	bhi.n	8005906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d108      	bne.n	800593a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	441a      	add	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d118      	bne.n	8005980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d00d      	beq.n	8005976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e008      	b.n	8005988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e003      	b.n	8005988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d002      	beq.n	8005996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20001a3c 	.word	0x20001a3c
 80059a8:	20001a44 	.word	0x20001a44

080059ac <__libc_init_array>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4d0d      	ldr	r5, [pc, #52]	; (80059e4 <__libc_init_array+0x38>)
 80059b0:	4c0d      	ldr	r4, [pc, #52]	; (80059e8 <__libc_init_array+0x3c>)
 80059b2:	1b64      	subs	r4, r4, r5
 80059b4:	10a4      	asrs	r4, r4, #2
 80059b6:	2600      	movs	r6, #0
 80059b8:	42a6      	cmp	r6, r4
 80059ba:	d109      	bne.n	80059d0 <__libc_init_array+0x24>
 80059bc:	4d0b      	ldr	r5, [pc, #44]	; (80059ec <__libc_init_array+0x40>)
 80059be:	4c0c      	ldr	r4, [pc, #48]	; (80059f0 <__libc_init_array+0x44>)
 80059c0:	f000 f82e 	bl	8005a20 <_init>
 80059c4:	1b64      	subs	r4, r4, r5
 80059c6:	10a4      	asrs	r4, r4, #2
 80059c8:	2600      	movs	r6, #0
 80059ca:	42a6      	cmp	r6, r4
 80059cc:	d105      	bne.n	80059da <__libc_init_array+0x2e>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d4:	4798      	blx	r3
 80059d6:	3601      	adds	r6, #1
 80059d8:	e7ee      	b.n	80059b8 <__libc_init_array+0xc>
 80059da:	f855 3b04 	ldr.w	r3, [r5], #4
 80059de:	4798      	blx	r3
 80059e0:	3601      	adds	r6, #1
 80059e2:	e7f2      	b.n	80059ca <__libc_init_array+0x1e>
 80059e4:	08005b38 	.word	0x08005b38
 80059e8:	08005b38 	.word	0x08005b38
 80059ec:	08005b38 	.word	0x08005b38
 80059f0:	08005b3c 	.word	0x08005b3c

080059f4 <memcpy>:
 80059f4:	440a      	add	r2, r1
 80059f6:	4291      	cmp	r1, r2
 80059f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059fc:	d100      	bne.n	8005a00 <memcpy+0xc>
 80059fe:	4770      	bx	lr
 8005a00:	b510      	push	{r4, lr}
 8005a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	d1f9      	bne.n	8005a02 <memcpy+0xe>
 8005a0e:	bd10      	pop	{r4, pc}

08005a10 <memset>:
 8005a10:	4402      	add	r2, r0
 8005a12:	4603      	mov	r3, r0
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d100      	bne.n	8005a1a <memset+0xa>
 8005a18:	4770      	bx	lr
 8005a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1e:	e7f9      	b.n	8005a14 <memset+0x4>

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
