
RTOS-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006784  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a70  08006a70  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006a70  08006a70  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a70  08006a70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001a5c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ad0  20001ad0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f8a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eee  00000000  00000000  0003802e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0003af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  0003c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ccd  00000000  00000000  0003d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016236  00000000  00000000  00040145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc07e  00000000  00000000  0005637b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001223f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054ac  00000000  00000000  0012244c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068fc 	.word	0x080068fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080068fc 	.word	0x080068fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fb62 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f840 	bl	800030c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f8b0 	bl	80003f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f87e 	bl	8000390 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000294:	f002 ff20 	bl	80030d8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ToGreen */
  ToGreenHandle = osMessageQueueNew (16, sizeof(uint16_t), &ToGreen_attributes);
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <main+0x60>)
 800029a:	2102      	movs	r1, #2
 800029c:	2010      	movs	r0, #16
 800029e:	f003 f85b 	bl	8003358 <osMessageQueueNew>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <main+0x64>)
 80002a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DefaultTask */
  DefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &DefaultTask_attributes);
 80002a8:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <main+0x68>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	480f      	ldr	r0, [pc, #60]	; (80002ec <main+0x6c>)
 80002ae:	f002 ff7b 	bl	80031a8 <osThreadNew>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <main+0x70>)
 80002b6:	6013      	str	r3, [r2, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(StartGreenTask, NULL, &GreenTask_attributes);
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <main+0x74>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	480e      	ldr	r0, [pc, #56]	; (80002f8 <main+0x78>)
 80002be:	f002 ff73 	bl	80031a8 <osThreadNew>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <main+0x7c>)
 80002c6:	6013      	str	r3, [r2, #0]

  /* creation of YellowTask */
  YellowTaskHandle = osThreadNew(StartYellowTask, NULL, &YellowTask_attributes);
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <main+0x80>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <main+0x84>)
 80002ce:	f002 ff6b 	bl	80031a8 <osThreadNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <main+0x88>)
 80002d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002d8:	f002 ff32 	bl	8003140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0x5c>
 80002de:	bf00      	nop
 80002e0:	080069ec 	.word	0x080069ec
 80002e4:	20000120 	.word	0x20000120
 80002e8:	08006980 	.word	0x08006980
 80002ec:	0800055d 	.word	0x0800055d
 80002f0:	20000114 	.word	0x20000114
 80002f4:	080069a4 	.word	0x080069a4
 80002f8:	080005b9 	.word	0x080005b9
 80002fc:	20000118 	.word	0x20000118
 8000300:	080069c8 	.word	0x080069c8
 8000304:	08000605 	.word	0x08000605
 8000308:	2000011c 	.word	0x2000011c

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b090      	sub	sp, #64	; 0x40
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	f107 0318 	add.w	r3, r7, #24
 8000316:	2228      	movs	r2, #40	; 0x28
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f005 fe86 	bl	800602c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032e:	2302      	movs	r3, #2
 8000330:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	2301      	movs	r3, #1
 8000334:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000336:	2310      	movs	r3, #16
 8000338:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000342:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000346:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	f107 0318 	add.w	r3, r7, #24
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fdb9 	bl	8000ec4 <HAL_RCC_OscConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000358:	f000 f97c 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035c:	230f      	movs	r3, #15
 800035e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000360:	2302      	movs	r3, #2
 8000362:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2102      	movs	r1, #2
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fde2 	bl	8001f40 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000382:	f000 f967 	bl	8000654 <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3740      	adds	r7, #64	; 0x40
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <MX_USART2_UART_Init+0x5c>)
 8000398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 800039c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003d4:	f002 fab8 	bl	8002948 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003de:	f000 f939 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000090 	.word	0x20000090
 80003ec:	40004400 	.word	0x40004400

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a35      	ldr	r2, [pc, #212]	; (80004e0 <MX_GPIO_Init+0xf0>)
 800040c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a2f      	ldr	r2, [pc, #188]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <MX_GPIO_Init+0xf0>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a29      	ldr	r2, [pc, #164]	; (80004e0 <MX_GPIO_Init+0xf0>)
 800043c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <MX_GPIO_Init+0xf0>)
 8000454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_GPIO_Init+0xf0>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7108 	mov.w	r1, #544	; 0x220
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f000 fcf6 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	481a      	ldr	r0, [pc, #104]	; (80004e4 <MX_GPIO_Init+0xf4>)
 800047a:	f000 fcf1 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800047e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000484:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	4814      	ldr	r0, [pc, #80]	; (80004e8 <MX_GPIO_Init+0xf8>)
 8000496:	f000 fb71 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800049a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 fb61 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ba:	2320      	movs	r3, #32
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	4619      	mov	r1, r3
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_GPIO_Init+0xf4>)
 80004d2:	f000 fb53 	bl	8000b7c <HAL_GPIO_Init>

}
 80004d6:	bf00      	nop
 80004d8:	3728      	adds	r7, #40	; 0x28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400
 80004e8:	48000800 	.word	0x48000800

080004ec <display>:

/* USER CODE BEGIN 4 */

// function that will send messages through UART and can be seen on USB
void display(char *message)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff fe6b 	bl	80001d0 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <display+0x28>)
 8000506:	f002 fa6d 	bl	80029e4 <HAL_UART_Transmit>
	//38400
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000090 	.word	0x20000090

08000518 <display_num>:
void display_num(uint8_t num)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	char buf[10];
	sprintf(buf, "%li \r\n", num);
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	490a      	ldr	r1, [pc, #40]	; (8000554 <display_num+0x3c>)
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fd86 	bl	800603c <siprintf>
	HAL_UART_Transmit(&huart2, &buf, strlen(buf), HAL_MAX_DELAY);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe4b 	bl	80001d0 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	b29a      	uxth	r2, r3
 800053e:	f107 010c 	add.w	r1, r7, #12
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <display_num+0x40>)
 8000548:	f002 fa4c 	bl	80029e4 <HAL_UART_Transmit>
	//38400
}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	08006940 	.word	0x08006940
 8000558:	20000090 	.word	0x20000090

0800055c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	char *m = "Default\r\n";
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <StartDefaultTask+0x54>)
 8000566:	60fb      	str	r3, [r7, #12]
	uint8_t x = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	72fb      	strb	r3, [r7, #11]
	// char m[5] = {'H', 'i', '\r', '\n', '\0'};

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f7ff ffbd 	bl	80004ec <display>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000572:	2120      	movs	r1, #32
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fc8a 	bl	8000e90 <HAL_GPIO_TogglePin>

	  display_num(x);
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffca 	bl	8000518 <display_num>

	  osMessageQueuePut(ToGreenHandle, &x, 0, 200);
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <StartDefaultTask+0x58>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f107 010b 	add.w	r1, r7, #11
 800058c:	23c8      	movs	r3, #200	; 0xc8
 800058e:	2200      	movs	r2, #0
 8000590:	f002 ff68 	bl	8003464 <osMessageQueuePut>

	  if(++x>9)
 8000594:	7afb      	ldrb	r3, [r7, #11]
 8000596:	3301      	adds	r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	72fb      	strb	r3, [r7, #11]
 800059c:	7afb      	ldrb	r3, [r7, #11]
 800059e:	2b09      	cmp	r3, #9
 80005a0:	d901      	bls.n	80005a6 <StartDefaultTask+0x4a>
	  {
		  x = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	72fb      	strb	r3, [r7, #11]
	  }

	  osDelay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f002 fea7 	bl	80032fc <osDelay>
	  display(m);
 80005ae:	e7dd      	b.n	800056c <StartDefaultTask+0x10>
 80005b0:	08006948 	.word	0x08006948
 80005b4:	20000120 	.word	0x20000120

080005b8 <StartGreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenTask */
void StartGreenTask(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGreenTask */

	char *m = "Green\r\n";
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <StartGreenTask+0x44>)
 80005c2:	60fb      	str	r3, [r7, #12]
	uint8_t res = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	72fb      	strb	r3, [r7, #11]

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f7ff ff8f 	bl	80004ec <display>

	  osMessageQueueGet(ToGreenHandle, &res, NULL, 1000);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <StartGreenTask+0x48>)
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	f107 010b 	add.w	r1, r7, #11
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	2200      	movs	r2, #0
 80005dc:	f002 ffb6 	bl	800354c <osMessageQueueGet>
	  // wait forever if you want to block the task when there is no data in the queue

	  if(res % 2 == 0)
 80005e0:	7afb      	ldrb	r3, [r7, #11]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1ed      	bne.n	80005c8 <StartGreenTask+0x10>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f000 fc4c 	bl	8000e90 <HAL_GPIO_TogglePin>
	  display(m);
 80005f8:	e7e6      	b.n	80005c8 <StartGreenTask+0x10>
 80005fa:	bf00      	nop
 80005fc:	08006954 	.word	0x08006954
 8000600:	20000120 	.word	0x20000120

08000604 <StartYellowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYellowTask */
void StartYellowTask(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYellowTask */

	char *m = "Yellow\r\n";
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <StartYellowTask+0x24>)
 800060e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  display(m);
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f7ff ff6b 	bl	80004ec <display>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000616:	2120      	movs	r1, #32
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <StartYellowTask+0x28>)
 800061a:	f000 fc39 	bl	8000e90 <HAL_GPIO_TogglePin>

	  osDelay(4000);
 800061e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000622:	f002 fe6b 	bl	80032fc <osDelay>
	  display(m);
 8000626:	e7f3      	b.n	8000610 <StartYellowTask+0xc>
 8000628:	0800695c 	.word	0x0800695c
 800062c:	48000400 	.word	0x48000400

08000630 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d101      	bne.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000642:	f000 f999 	bl	8000978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40001000 	.word	0x40001000

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	e7fe      	b.n	800065c <Error_Handler+0x8>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_MspInit+0x4c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <HAL_MspInit+0x4c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_MspInit+0x4c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_MspInit+0x4c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <HAL_MspInit+0x4c>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_MspInit+0x4c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	210f      	movs	r1, #15
 800069a:	f06f 0001 	mvn.w	r0, #1
 800069e:	f000 fa43 	bl	8000b28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <HAL_UART_MspInit+0x7c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d128      	bne.n	8000724 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_UART_MspInit+0x80>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <HAL_UART_MspInit+0x80>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_UART_MspInit+0x80>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_UART_MspInit+0x80>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <HAL_UART_MspInit+0x80>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <HAL_UART_MspInit+0x80>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000702:	230c      	movs	r3, #12
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000712:	2307      	movs	r3, #7
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 fa2c 	bl	8000b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40004400 	.word	0x40004400
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	; 0x38
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <HAL_InitTick+0xe0>)
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	4a32      	ldr	r2, [pc, #200]	; (8000814 <HAL_InitTick+0xe0>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	61d3      	str	r3, [r2, #28]
 8000750:	4b30      	ldr	r3, [pc, #192]	; (8000814 <HAL_InitTick+0xe0>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800075c:	f107 0210 	add.w	r2, r7, #16
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fe20 	bl	80023ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000772:	2b00      	cmp	r3, #0
 8000774:	d103      	bne.n	800077e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000776:	f001 fdd5 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 800077a:	6378      	str	r0, [r7, #52]	; 0x34
 800077c:	e004      	b.n	8000788 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800077e:	f001 fdd1 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8000782:	4603      	mov	r3, r0
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <HAL_InitTick+0xe4>)
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
 8000790:	0c9b      	lsrs	r3, r3, #18
 8000792:	3b01      	subs	r3, #1
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <HAL_InitTick+0xe8>)
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <HAL_InitTick+0xec>)
 800079a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <HAL_InitTick+0xe8>)
 800079e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007a4:	4a1d      	ldr	r2, [pc, #116]	; (800081c <HAL_InitTick+0xe8>)
 80007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_InitTick+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_InitTick+0xe8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_InitTick+0xe8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007bc:	4817      	ldr	r0, [pc, #92]	; (800081c <HAL_InitTick+0xe8>)
 80007be:	f001 fe27 	bl	8002410 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d11b      	bne.n	8000808 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <HAL_InitTick+0xe8>)
 80007d2:	f001 fe7f 	bl	80024d4 <HAL_TIM_Base_Start_IT>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d111      	bne.n	8000808 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80007e4:	2036      	movs	r0, #54	; 0x36
 80007e6:	f000 f9bb 	bl	8000b60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d808      	bhi.n	8000802 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	2036      	movs	r0, #54	; 0x36
 80007f6:	f000 f997 	bl	8000b28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_InitTick+0xf0>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	e002      	b.n	8000808 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800080c:	4618      	mov	r0, r3
 800080e:	3738      	adds	r7, #56	; 0x38
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	431bde83 	.word	0x431bde83
 800081c:	20000124 	.word	0x20000124
 8000820:	40001000 	.word	0x40001000
 8000824:	20000004 	.word	0x20000004

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <TIM6_DAC1_IRQHandler+0x10>)
 800085a:	f001 fe97 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000124 	.word	0x20000124

08000868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <_sbrk+0x5c>)
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_sbrk+0x60>)
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x64>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <_sbrk+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000898:	f005 fb90 	bl	8005fbc <__errno>
 800089c:	4603      	mov	r3, r0
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20003000 	.word	0x20003000
 80008c8:	00000400 	.word	0x00000400
 80008cc:	20000170 	.word	0x20000170
 80008d0:	20001ad0 	.word	0x20001ad0

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000930 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff ffd7 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f005 fb4f 	bl	8005fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fca9 	bl	8000280 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000930:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800093c:	08006a78 	.word	0x08006a78
  ldr r2, =_sbss
 8000940:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000944:	20001ad0 	.word	0x20001ad0

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f8d8 	bl	8000b12 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f7ff fee6 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff fe7a 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000174 	.word	0x20000174

080009a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000174 	.word	0x20000174

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff4c 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3a:	f7ff ff61 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	6978      	ldr	r0, [r7, #20]
 8000b46:	f7ff ffb1 	bl	8000aac <NVIC_EncodePriority>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff80 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff54 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8a:	e14e      	b.n	8000e2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8140 	beq.w	8000e24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d005      	beq.n	8000bbc <HAL_GPIO_Init+0x40>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 0201 	and.w	r2, r3, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d017      	beq.n	8000c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d123      	bne.n	8000cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 809a 	beq.w	8000e24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <HAL_GPIO_Init+0x2cc>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a54      	ldr	r2, [pc, #336]	; (8000e48 <HAL_GPIO_Init+0x2cc>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d08:	4a50      	ldr	r2, [pc, #320]	; (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d32:	d013      	beq.n	8000d5c <HAL_GPIO_Init+0x1e0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a46      	ldr	r2, [pc, #280]	; (8000e50 <HAL_GPIO_Init+0x2d4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1dc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a45      	ldr	r2, [pc, #276]	; (8000e54 <HAL_GPIO_Init+0x2d8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1d8>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_GPIO_Init+0x2dc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1d4>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d50:	2305      	movs	r3, #5
 8000d52:	e004      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4093      	lsls	r3, r2
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6e:	4937      	ldr	r1, [pc, #220]	; (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da0:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dca:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f47f aea9 	bne.w	8000b8c <HAL_GPIO_Init+0x10>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	48000400 	.word	0x48000400
 8000e54:	48000800 	.word	0x48000800
 8000e58:	48000c00 	.word	0x48000c00
 8000e5c:	40010400 	.word	0x40010400

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e70:	787b      	ldrb	r3, [r7, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	041a      	lsls	r2, r3, #16
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43d9      	mvns	r1, r3
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	619a      	str	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f001 b823 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 817d 	beq.w	80011fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f00:	4bbc      	ldr	r3, [pc, #752]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d00c      	beq.n	8000f26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f0c:	4bb9      	ldr	r3, [pc, #740]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d15c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x10e>
 8000f18:	4bb6      	ldr	r3, [pc, #728]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f24:	d155      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x10e>
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	095b      	lsrs	r3, r3, #5
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_OscConfig+0x94>
 8000f52:	4ba8      	ldr	r3, [pc, #672]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	e015      	b.n	8000f84 <HAL_RCC_OscConfig+0xc0>
 8000f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f80:	4b9c      	ldr	r3, [pc, #624]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f90:	fa92 f2a2 	rbit	r2, r2
 8000f94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	f042 0220 	orr.w	r2, r2, #32
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f002 021f 	and.w	r2, r2, #31
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 811f 	beq.w	80011f8 <HAL_RCC_OscConfig+0x334>
 8000fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 8116 	bne.w	80011f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f000 bfaf 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12e>
 8000fe4:	4b83      	ldr	r3, [pc, #524]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a82      	ldr	r2, [pc, #520]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e036      	b.n	8001060 <HAL_RCC_OscConfig+0x19c>
 8000ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x158>
 8001002:	4b7c      	ldr	r3, [pc, #496]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a7b      	ldr	r2, [pc, #492]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b79      	ldr	r3, [pc, #484]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a78      	ldr	r2, [pc, #480]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e021      	b.n	8001060 <HAL_RCC_OscConfig+0x19c>
 800101c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x184>
 800102e:	4b71      	ldr	r3, [pc, #452]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a70      	ldr	r2, [pc, #448]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6d      	ldr	r2, [pc, #436]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0x19c>
 8001048:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a69      	ldr	r2, [pc, #420]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a66      	ldr	r2, [pc, #408]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001060:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	f023 020f 	bic.w	r2, r3, #15
 8001068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	495f      	ldr	r1, [pc, #380]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001076:	4313      	orrs	r3, r2
 8001078:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800107a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d059      	beq.n	800113e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108a:	f7ff fc89 	bl	80009a0 <HAL_GetTick>
 800108e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	e00a      	b.n	80010aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fc84 	bl	80009a0 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b64      	cmp	r3, #100	; 0x64
 80010a2:	d902      	bls.n	80010aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f000 bf43 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 80010aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	095b      	lsrs	r3, r3, #5
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x218>
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	e015      	b.n	8001108 <HAL_RCC_OscConfig+0x244>
 80010dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001104:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800110c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001110:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001114:	fa92 f2a2 	rbit	r2, r2
 8001118:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800111c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001120:	fab2 f282 	clz	r2, r2
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	f042 0220 	orr.w	r2, r2, #32
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f002 021f 	and.w	r2, r2, #31
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f202 	lsl.w	r2, r1, r2
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0ab      	beq.n	8001094 <HAL_RCC_OscConfig+0x1d0>
 800113c:	e05d      	b.n	80011fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc2f 	bl	80009a0 <HAL_GetTick>
 8001142:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e00a      	b.n	800115e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fc2a 	bl	80009a0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d902      	bls.n	800115e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	f000 bee9 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001162:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001172:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	095b      	lsrs	r3, r3, #5
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d102      	bne.n	8001190 <HAL_RCC_OscConfig+0x2cc>
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	e015      	b.n	80011bc <HAL_RCC_OscConfig+0x2f8>
 8001190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001194:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011b0:	fa93 f3a3 	rbit	r3, r3
 80011b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_RCC_OscConfig+0x330>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011c8:	fa92 f2a2 	rbit	r2, r2
 80011cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011d4:	fab2 f282 	clz	r2, r2
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	f042 0220 	orr.w	r2, r2, #32
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	f002 021f 	and.w	r2, r2, #31
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1ab      	bne.n	8001148 <HAL_RCC_OscConfig+0x284>
 80011f0:	e003      	b.n	80011fa <HAL_RCC_OscConfig+0x336>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 817d 	beq.w	800150a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001210:	4ba6      	ldr	r3, [pc, #664]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800121c:	4ba3      	ldr	r3, [pc, #652]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d172      	bne.n	800130e <HAL_RCC_OscConfig+0x44a>
 8001228:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d16c      	bne.n	800130e <HAL_RCC_OscConfig+0x44a>
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001246:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x3a0>
 800125e:	4b93      	ldr	r3, [pc, #588]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x3c8>
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800127c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001288:	4b88      	ldr	r3, [pc, #544]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	2202      	movs	r2, #2
 800128e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001292:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001296:	fa92 f2a2 	rbit	r2, r2
 800129a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800129e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012a2:	fab2 f282 	clz	r2, r2
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	f002 021f 	and.w	r2, r2, #31
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00a      	beq.n	80012d4 <HAL_RCC_OscConfig+0x410>
 80012be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d002      	beq.n	80012d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f000 be2e 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b75      	ldr	r3, [pc, #468]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	21f8      	movs	r1, #248	; 0xf8
 80012ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012f2:	fa91 f1a1 	rbit	r1, r1
 80012f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012fe:	fab1 f181 	clz	r1, r1
 8001302:	b2c9      	uxtb	r1, r1
 8001304:	408b      	lsls	r3, r1
 8001306:	4969      	ldr	r1, [pc, #420]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130c:	e0fd      	b.n	800150a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8088 	beq.w	8001430 <HAL_RCC_OscConfig+0x56c>
 8001320:	2301      	movs	r3, #1
 8001322:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001332:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	461a      	mov	r2, r3
 8001348:	2301      	movs	r3, #1
 800134a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fb28 	bl	80009a0 <HAL_GetTick>
 8001350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fb23 	bl	80009a0 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d902      	bls.n	800136c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	f000 bde2 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800137e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	095b      	lsrs	r3, r3, #5
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <HAL_RCC_OscConfig+0x4d8>
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	e013      	b.n	80013c4 <HAL_RCC_OscConfig+0x500>
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	2202      	movs	r2, #2
 80013c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013ce:	fa92 f2a2 	rbit	r2, r2
 80013d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013da:	fab2 f282 	clz	r2, r2
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	f042 0220 	orr.w	r2, r2, #32
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	f002 021f 	and.w	r2, r2, #31
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0af      	beq.n	8001356 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	21f8      	movs	r1, #248	; 0xf8
 800140c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001414:	fa91 f1a1 	rbit	r1, r1
 8001418:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800141c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001420:	fab1 f181 	clz	r1, r1
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	408b      	lsls	r3, r1
 8001428:	4920      	ldr	r1, [pc, #128]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
 800142e:	e06c      	b.n	800150a <HAL_RCC_OscConfig+0x646>
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001442:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001450:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	461a      	mov	r2, r3
 8001458:	2300      	movs	r3, #0
 800145a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff faa0 	bl	80009a0 <HAL_GetTick>
 8001460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fa9b 	bl	80009a0 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d902      	bls.n	800147c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	f000 bd5a 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800148e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d104      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5ec>
 80014a6:	4b01      	ldr	r3, [pc, #4]	; (80014ac <HAL_RCC_OscConfig+0x5e8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	e015      	b.n	80014d8 <HAL_RCC_OscConfig+0x614>
 80014ac:	40021000 	.word	0x40021000
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014d4:	4bc8      	ldr	r3, [pc, #800]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2202      	movs	r2, #2
 80014da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014e2:	fa92 f2a2 	rbit	r2, r2
 80014e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	f002 021f 	and.w	r2, r2, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ad      	bne.n	8001466 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8110 	beq.w	8001740 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d079      	beq.n	8001624 <HAL_RCC_OscConfig+0x760>
 8001530:	2301      	movs	r3, #1
 8001532:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4bab      	ldr	r3, [pc, #684]	; (80017fc <HAL_RCC_OscConfig+0x938>)
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	461a      	mov	r2, r3
 8001556:	2301      	movs	r3, #1
 8001558:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fa21 	bl	80009a0 <HAL_GetTick>
 800155e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fa1c 	bl	80009a0 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d902      	bls.n	800157a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	f000 bcdb 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f2a3 	rbit	r2, r3
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015b8:	2202      	movs	r2, #2
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	fa93 f2a3 	rbit	r2, r3
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d4:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 80015d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015e0:	2102      	movs	r1, #2
 80015e2:	6019      	str	r1, [r3, #0]
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	fa93 f1a3 	rbit	r1, r3
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015fa:	6019      	str	r1, [r3, #0]
  return result;
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0a0      	beq.n	8001564 <HAL_RCC_OscConfig+0x6a0>
 8001622:	e08d      	b.n	8001740 <HAL_RCC_OscConfig+0x87c>
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001646:	601a      	str	r2, [r3, #0]
  return result;
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001650:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_OscConfig+0x938>)
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	461a      	mov	r2, r3
 8001662:	2300      	movs	r3, #0
 8001664:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff f99b 	bl	80009a0 <HAL_GetTick>
 800166a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff f996 	bl	80009a0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d902      	bls.n	8001686 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	f000 bc55 	b.w	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 80016f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016fe:	2102      	movs	r1, #2
 8001700:	6019      	str	r1, [r3, #0]
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fa93 f1a3 	rbit	r1, r3
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001718:	6019      	str	r1, [r3, #0]
  return result;
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d197      	bne.n	8001670 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 81a1 	beq.w	8001a98 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d116      	bne.n	8001796 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	61d3      	str	r3, [r2, #28]
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800178e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_RCC_OscConfig+0x93c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_RCC_OscConfig+0x93c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_RCC_OscConfig+0x93c>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f8f7 	bl	80009a0 <HAL_GetTick>
 80017b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	e009      	b.n	80017cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b8:	f7ff f8f2 	bl	80009a0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	; 0x64
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e3b1      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_RCC_OscConfig+0x93c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ef      	beq.n	80017b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10d      	bne.n	8001804 <HAL_RCC_OscConfig+0x940>
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a02      	ldr	r2, [pc, #8]	; (80017f8 <HAL_RCC_OscConfig+0x934>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e03c      	b.n	8001870 <HAL_RCC_OscConfig+0x9ac>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	10908120 	.word	0x10908120
 8001800:	40007000 	.word	0x40007000
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x96a>
 8001814:	4bc1      	ldr	r3, [pc, #772]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4ac0      	ldr	r2, [pc, #768]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6213      	str	r3, [r2, #32]
 8001820:	4bbe      	ldr	r3, [pc, #760]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4abd      	ldr	r2, [pc, #756]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	e020      	b.n	8001870 <HAL_RCC_OscConfig+0x9ac>
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x994>
 800183e:	4bb7      	ldr	r3, [pc, #732]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4ab6      	ldr	r2, [pc, #728]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4bb4      	ldr	r3, [pc, #720]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4ab3      	ldr	r2, [pc, #716]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x9ac>
 8001858:	4bb0      	ldr	r3, [pc, #704]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4aaf      	ldr	r2, [pc, #700]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	4bad      	ldr	r3, [pc, #692]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4aac      	ldr	r2, [pc, #688]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8081 	beq.w	8001984 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff f88d 	bl	80009a0 <HAL_GetTick>
 8001886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff f888 	bl	80009a0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	; 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e345      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018ac:	2202      	movs	r2, #2
 80018ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018ea:	601a      	str	r2, [r3, #0]
  return result;
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d102      	bne.n	8001910 <HAL_RCC_OscConfig+0xa4c>
 800190a:	4b84      	ldr	r3, [pc, #528]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	e013      	b.n	8001938 <HAL_RCC_OscConfig+0xa74>
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001918:	2202      	movs	r2, #2
 800191a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001940:	2102      	movs	r1, #2
 8001942:	6011      	str	r1, [r2, #0]
 8001944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001948:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	fa92 f1a2 	rbit	r1, r2
 8001952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001956:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800195a:	6011      	str	r1, [r2, #0]
  return result;
 800195c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001960:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d084      	beq.n	800188c <HAL_RCC_OscConfig+0x9c8>
 8001982:	e07f      	b.n	8001a84 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f80c 	bl	80009a0 <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff f807 	bl	80009a0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e2c4      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019ae:	2202      	movs	r2, #2
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019ec:	601a      	str	r2, [r3, #0]
  return result;
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_OscConfig+0xb4e>
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	e013      	b.n	8001a3a <HAL_RCC_OscConfig+0xb76>
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a42:	2102      	movs	r1, #2
 8001a44:	6011      	str	r1, [r2, #0]
 8001a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fa92 f1a2 	rbit	r1, r2
 8001a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a5c:	6011      	str	r1, [r2, #0]
  return result;
 8001a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a62:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d184      	bne.n	800198e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8242 	beq.w	8001f2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_RCC_OscConfig+0xc58>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	f000 8213 	beq.w	8001ede <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	f040 8162 	bne.w	8001d8e <HAL_RCC_OscConfig+0xeca>
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aee:	601a      	str	r2, [r3, #0]
  return result;
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001af8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe ff46 	bl	80009a0 <HAL_GetTick>
 8001b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_OscConfig+0xc70>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe ff3e 	bl	80009a0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1fd      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	fa93 f2a3 	rbit	r2, r3
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b58:	601a      	str	r2, [r3, #0]
  return result;
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_OscConfig+0xcba>
 8001b78:	4bb0      	ldr	r3, [pc, #704]	; (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_OscConfig+0xd0a>
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4b9c      	ldr	r3, [pc, #624]	; (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bda:	6011      	str	r1, [r2, #0]
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	fa92 f1a2 	rbit	r1, r2
 8001bea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bf2:	6011      	str	r1, [r2, #0]
  return result;
 8001bf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	fab2 f282 	clz	r2, r2
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f042 0220 	orr.w	r2, r2, #32
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	f002 021f 	and.w	r2, r2, #31
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d182      	bne.n	8001b20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1a:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	497f      	ldr	r1, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c66:	601a      	str	r2, [r3, #0]
  return result;
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	2301      	movs	r3, #1
 8001c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe fe8a 	bl	80009a0 <HAL_GetTick>
 8001c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe fe85 	bl	80009a0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e144      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	fa93 f2a3 	rbit	r2, r3
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cca:	601a      	str	r2, [r3, #0]
  return result;
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe2c>
 8001cea:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e027      	b.n	8001d40 <HAL_RCC_OscConfig+0xe7c>
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d4c:	6011      	str	r1, [r2, #0]
 8001d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fa92 f1a2 	rbit	r1, r2
 8001d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d64:	6011      	str	r1, [r2, #0]
  return result;
 8001d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f042 0220 	orr.w	r2, r2, #32
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f002 021f 	and.w	r2, r2, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d082      	beq.n	8001c92 <HAL_RCC_OscConfig+0xdce>
 8001d8c:	e0cf      	b.n	8001f2e <HAL_RCC_OscConfig+0x106a>
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001db2:	601a      	str	r2, [r3, #0]
  return result;
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dbc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fde4 	bl	80009a0 <HAL_GetTick>
 8001dd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	e009      	b.n	8001df2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fddf 	bl	80009a0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e09e      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e16:	601a      	str	r2, [r3, #0]
  return result;
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d104      	bne.n	8001e40 <HAL_RCC_OscConfig+0xf7c>
 8001e36:	4b01      	ldr	r3, [pc, #4]	; (8001e3c <HAL_RCC_OscConfig+0xf78>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e029      	b.n	8001e90 <HAL_RCC_OscConfig+0xfcc>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x1078>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fa92 f1a2 	rbit	r1, r2
 8001eac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eb0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001eb4:	6011      	str	r1, [r2, #0]
  return result;
 8001eb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d180      	bne.n	8001dde <HAL_RCC_OscConfig+0xf1a>
 8001edc:	e027      	b.n	8001f2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e01e      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_OscConfig+0x1078>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001efa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001efe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09e      	sub	sp, #120	; 0x78
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e162      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b90      	ldr	r3, [pc, #576]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b8d      	ldr	r3, [pc, #564]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	498b      	ldr	r1, [pc, #556]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b89      	ldr	r3, [pc, #548]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e14a      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b82      	ldr	r3, [pc, #520]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	497f      	ldr	r1, [pc, #508]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80dc 	beq.w	800216c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d13c      	bne.n	8002036 <HAL_RCC_ClockConfig+0xf6>
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xa6>
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	e00f      	b.n	8002006 <HAL_RCC_ClockConfig+0xc6>
 8001fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8001ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002002:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800200a:	65ba      	str	r2, [r7, #88]	; 0x58
 800200c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800200e:	fa92 f2a2 	rbit	r2, r2
 8002012:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f002 021f 	and.w	r2, r2, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d17b      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0f3      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d13c      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x178>
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800204c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_RCC_ClockConfig+0x128>
 8002062:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	e00f      	b.n	8002088 <HAL_RCC_ClockConfig+0x148>
 8002068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	647b      	str	r3, [r7, #68]	; 0x44
 8002076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207a:	643b      	str	r3, [r7, #64]	; 0x40
 800207c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002084:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800208c:	63ba      	str	r2, [r7, #56]	; 0x38
 800208e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d13a      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b2      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
 80020b8:	2302      	movs	r3, #2
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x1a0>
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e00d      	b.n	80020fc <HAL_RCC_ClockConfig+0x1bc>
 80020e0:	2302      	movs	r3, #2
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	2202      	movs	r2, #2
 80020fe:	61ba      	str	r2, [r7, #24]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	617a      	str	r2, [r7, #20]
  return result;
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	fab2 f282 	clz	r2, r2
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f042 0220 	orr.w	r2, r2, #32
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f002 021f 	and.w	r2, r2, #31
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f202 	lsl.w	r2, r1, r2
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e079      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	491a      	ldr	r1, [pc, #104]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800213c:	f7fe fc30 	bl	80009a0 <HAL_GetTick>
 8002140:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe fc2c 	bl	80009a0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e061      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d214      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4906      	ldr	r1, [pc, #24]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <HAL_RCC_ClockConfig+0x25c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e040      	b.n	800221e <HAL_RCC_ClockConfig+0x2de>
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	491a      	ldr	r1, [pc, #104]	; (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4912      	ldr	r1, [pc, #72]	; (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021e2:	f000 f829 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021e6:	4601      	mov	r1, r0
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_RCC_ClockConfig+0x2e8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	22f0      	movs	r2, #240	; 0xf0
 80021f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	fa92 f2a2 	rbit	r2, r2
 80021fa:	60fa      	str	r2, [r7, #12]
  return result;
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	fab2 f282 	clz	r2, r2
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	40d3      	lsrs	r3, r2
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x2ec>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	fa21 f303 	lsr.w	r3, r1, r3
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_RCC_ClockConfig+0x2f0>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_RCC_ClockConfig+0x2f4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fa8c 	bl	8000734 <HAL_InitTick>
  
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3778      	adds	r7, #120	; 0x78
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	08006a04 	.word	0x08006a04
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b08b      	sub	sp, #44	; 0x2c
 800223c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b04      	cmp	r3, #4
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x30>
 8002262:	2b08      	cmp	r3, #8
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x36>
 8002266:	e03c      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800226a:	623b      	str	r3, [r7, #32]
      break;
 800226c:	e03c      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002274:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002278:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	fa92 f2a2 	rbit	r2, r2
 8002280:	607a      	str	r2, [r7, #4]
  return result;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	fab2 f282 	clz	r2, r2
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	40d3      	lsrs	r3, r2
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc8>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	220f      	movs	r2, #15
 800229c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	fa92 f2a2 	rbit	r2, r2
 80022a4:	60fa      	str	r2, [r7, #12]
  return result;
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	fab2 f282 	clz	r2, r2
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	40d3      	lsrs	r3, r2
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
 80022d0:	e004      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	623b      	str	r3, [r7, #32]
      break;
 80022e0:	e002      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80022e4:	623b      	str	r3, [r7, #32]
      break;
 80022e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	372c      	adds	r7, #44	; 0x2c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	007a1200 	.word	0x007a1200
 8002300:	08006a1c 	.word	0x08006a1c
 8002304:	08006a2c 	.word	0x08006a2c
 8002308:	003d0900 	.word	0x003d0900

0800230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800232a:	f7ff ffef 	bl	800230c <HAL_RCC_GetHCLKFreq>
 800232e:	4601      	mov	r1, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002338:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800233c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	603a      	str	r2, [r7, #0]
  return result;
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	40d3      	lsrs	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	08006a14 	.word	0x08006a14

08002368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800236e:	f7ff ffcd 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002372:	4601      	mov	r1, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800237c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002380:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	fa92 f2a2 	rbit	r2, r2
 8002388:	603a      	str	r2, [r7, #0]
  return result;
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	40d3      	lsrs	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08006a14 	.word	0x08006a14

080023ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	220f      	movs	r2, #15
 80023ba:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_RCC_GetClockConfig+0x60>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0207 	and.w	r2, r3, #7
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	40022000 	.word	0x40022000

08002410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e049      	b.n	80024b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f841 	bl	80024be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f000 f9e4 	bl	800281c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d001      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e040      	b.n	800256e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_TIM_Base_Start_IT+0xa8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00e      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x58>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d009      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x58>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a18      	ldr	r2, [pc, #96]	; (8002580 <HAL_TIM_Base_Start_IT+0xac>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x58>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_TIM_Base_Start_IT+0xb0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d115      	bne.n	8002558 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_TIM_Base_Start_IT+0xb4>)
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b06      	cmp	r3, #6
 800253c:	d015      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x96>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d011      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002556:	e008      	b.n	800256a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e000      	b.n	800256c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40000400 	.word	0x40000400
 8002584:	40014000 	.word	0x40014000
 8002588:	00010007 	.word	0x00010007

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f905 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8f7 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f908 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8db 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8cd 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8de 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0208 	mvn.w	r2, #8
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8b1 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8a3 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8b4 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0210 	mvn.w	r2, #16
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2208      	movs	r2, #8
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f887 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f879 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f88a 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0201 	mvn.w	r2, #1
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fd ff90 	bl	8000630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8f2 	bl	8002920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274a:	d10e      	bne.n	800276a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d107      	bne.n	800276a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f8e5 	bl	8002934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d10e      	bne.n	8002796 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d107      	bne.n	8002796 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800278e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f838 	bl	8002806 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d10e      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d107      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f06f 0220 	mvn.w	r2, #32
 80027ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f8a5 	bl	800290c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a32      	ldr	r2, [pc, #200]	; (80028f8 <TIM_Base_SetConfig+0xdc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <TIM_Base_SetConfig+0x28>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0x28>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <TIM_Base_SetConfig+0xe0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <TIM_Base_SetConfig+0xdc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <TIM_Base_SetConfig+0x6a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d00f      	beq.n	8002886 <TIM_Base_SetConfig+0x6a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a24      	ldr	r2, [pc, #144]	; (80028fc <TIM_Base_SetConfig+0xe0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00b      	beq.n	8002886 <TIM_Base_SetConfig+0x6a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <TIM_Base_SetConfig+0xe4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <TIM_Base_SetConfig+0x6a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <TIM_Base_SetConfig+0xe8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d003      	beq.n	8002886 <TIM_Base_SetConfig+0x6a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a21      	ldr	r2, [pc, #132]	; (8002908 <TIM_Base_SetConfig+0xec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d108      	bne.n	8002898 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <TIM_Base_SetConfig+0xdc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00b      	beq.n	80028dc <TIM_Base_SetConfig+0xc0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <TIM_Base_SetConfig+0xe4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0xc0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <TIM_Base_SetConfig+0xe8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0xc0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <TIM_Base_SetConfig+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d103      	bne.n	80028e4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	615a      	str	r2, [r3, #20]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40000400 	.word	0x40000400
 8002900:	40014000 	.word	0x40014000
 8002904:	40014400 	.word	0x40014400
 8002908:	40014800 	.word	0x40014800

0800290c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e040      	b.n	80029dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fd fea0 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8c0 	bl	8002b0c <UART_SetConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e022      	b.n	80029dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9ea 	bl	8002d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fa71 	bl	8002ebc <UART_CheckIdleState>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 8082 	bne.w	8002b02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_UART_Transmit+0x26>
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07a      	b.n	8002b04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_UART_Transmit+0x38>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e073      	b.n	8002b04 <HAL_UART_Transmit+0x120>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2221      	movs	r2, #33	; 0x21
 8002a30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a32:	f7fd ffb5 	bl	80009a0 <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x80>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a74:	e02d      	b.n	8002ad2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fa64 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e039      	b.n	8002b04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e008      	b.n	8002ac0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3301      	adds	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1cb      	bne.n	8002a76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2140      	movs	r1, #64	; 0x40
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fa30 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e005      	b.n	8002b04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b8a      	ldr	r3, [pc, #552]	; (8002d60 <UART_SetConfig+0x254>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	6979      	ldr	r1, [r7, #20]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a78      	ldr	r2, [pc, #480]	; (8002d64 <UART_SetConfig+0x258>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d120      	bne.n	8002bca <UART_SetConfig+0xbe>
 8002b88:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <UART_SetConfig+0x25c>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d817      	bhi.n	8002bc4 <UART_SetConfig+0xb8>
 8002b94:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <UART_SetConfig+0x90>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bb9 	.word	0x08002bb9
 8002ba4:	08002bbf 	.word	0x08002bbf
 8002ba8:	08002bb3 	.word	0x08002bb3
 8002bac:	2300      	movs	r3, #0
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e01d      	b.n	8002bee <UART_SetConfig+0xe2>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e01a      	b.n	8002bee <UART_SetConfig+0xe2>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e017      	b.n	8002bee <UART_SetConfig+0xe2>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e014      	b.n	8002bee <UART_SetConfig+0xe2>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e011      	b.n	8002bee <UART_SetConfig+0xe2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <UART_SetConfig+0x260>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d102      	bne.n	8002bda <UART_SetConfig+0xce>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	e009      	b.n	8002bee <UART_SetConfig+0xe2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a64      	ldr	r2, [pc, #400]	; (8002d70 <UART_SetConfig+0x264>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <UART_SetConfig+0xde>
 8002be4:	2300      	movs	r3, #0
 8002be6:	77fb      	strb	r3, [r7, #31]
 8002be8:	e001      	b.n	8002bee <UART_SetConfig+0xe2>
 8002bea:	2310      	movs	r3, #16
 8002bec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf6:	d15b      	bne.n	8002cb0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d827      	bhi.n	8002c4e <UART_SetConfig+0x142>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <UART_SetConfig+0xf8>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c29 	.word	0x08002c29
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	08002c39 	.word	0x08002c39
 8002c10:	08002c4f 	.word	0x08002c4f
 8002c14:	08002c3f 	.word	0x08002c3f
 8002c18:	08002c4f 	.word	0x08002c4f
 8002c1c:	08002c4f 	.word	0x08002c4f
 8002c20:	08002c4f 	.word	0x08002c4f
 8002c24:	08002c47 	.word	0x08002c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c28:	f7ff fb7c 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	61b8      	str	r0, [r7, #24]
        break;
 8002c2e:	e013      	b.n	8002c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff fb9a 	bl	8002368 <HAL_RCC_GetPCLK2Freq>
 8002c34:	61b8      	str	r0, [r7, #24]
        break;
 8002c36:	e00f      	b.n	8002c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c38:	4b4e      	ldr	r3, [pc, #312]	; (8002d74 <UART_SetConfig+0x268>)
 8002c3a:	61bb      	str	r3, [r7, #24]
        break;
 8002c3c:	e00c      	b.n	8002c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3e:	f7ff fafb 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002c42:	61b8      	str	r0, [r7, #24]
        break;
 8002c44:	e008      	b.n	8002c58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4a:	61bb      	str	r3, [r7, #24]
        break;
 8002c4c:	e004      	b.n	8002c58 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77bb      	strb	r3, [r7, #30]
        break;
 8002c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d074      	beq.n	8002d48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	005a      	lsls	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b0f      	cmp	r3, #15
 8002c7a:	d916      	bls.n	8002caa <UART_SetConfig+0x19e>
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d212      	bcs.n	8002caa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f023 030f 	bic.w	r3, r3, #15
 8002c8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	085b      	lsrs	r3, r3, #1
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	89fa      	ldrh	r2, [r7, #14]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e04e      	b.n	8002d48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	77bb      	strb	r3, [r7, #30]
 8002cae:	e04b      	b.n	8002d48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb0:	7ffb      	ldrb	r3, [r7, #31]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d827      	bhi.n	8002d06 <UART_SetConfig+0x1fa>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x1b0>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002d07 	.word	0x08002d07
 8002ccc:	08002cf7 	.word	0x08002cf7
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d07 	.word	0x08002d07
 8002cd8:	08002d07 	.word	0x08002d07
 8002cdc:	08002cff 	.word	0x08002cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7ff fb20 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	61b8      	str	r0, [r7, #24]
        break;
 8002ce6:	e013      	b.n	8002d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff fb3e 	bl	8002368 <HAL_RCC_GetPCLK2Freq>
 8002cec:	61b8      	str	r0, [r7, #24]
        break;
 8002cee:	e00f      	b.n	8002d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf0:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <UART_SetConfig+0x268>)
 8002cf2:	61bb      	str	r3, [r7, #24]
        break;
 8002cf4:	e00c      	b.n	8002d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf6:	f7ff fa9f 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002cfa:	61b8      	str	r0, [r7, #24]
        break;
 8002cfc:	e008      	b.n	8002d10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d02:	61bb      	str	r3, [r7, #24]
        break;
 8002d04:	e004      	b.n	8002d10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d018      	beq.n	8002d48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	085a      	lsrs	r2, r3, #1
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	d908      	bls.n	8002d44 <UART_SetConfig+0x238>
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d204      	bcs.n	8002d44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e001      	b.n	8002d48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d54:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	efff69f3 	.word	0xefff69f3
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40004400 	.word	0x40004400
 8002d70:	40004800 	.word	0x40004800
 8002d74:	007a1200 	.word	0x007a1200

08002d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01a      	beq.n	8002e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e76:	d10a      	bne.n	8002e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ecc:	f7fd fd68 	bl	80009a0 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d10e      	bne.n	8002efe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f82d 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e023      	b.n	8002f46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d10e      	bne.n	8002f2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f817 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e00d      	b.n	8002f46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b09c      	sub	sp, #112	; 0x70
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5e:	e0a5      	b.n	80030ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	f000 80a1 	beq.w	80030ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fd fd19 	bl	80009a0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d13e      	bne.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f94:	667b      	str	r3, [r7, #100]	; 0x64
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fa0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fa6:	e841 2300 	strex	r3, r2, [r1]
 8002faa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e6      	bne.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbc:	e853 3f00 	ldrex	r3, [r3]
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e5      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e067      	b.n	80030ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d04f      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301a:	d147      	bne.n	80030ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003024:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800303a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800304a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e6      	bne.n	8003026 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3308      	adds	r3, #8
 800305e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	613b      	str	r3, [r7, #16]
   return(result);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003078:	623a      	str	r2, [r7, #32]
 800307a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	69f9      	ldr	r1, [r7, #28]
 800307e:	6a3a      	ldr	r2, [r7, #32]
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	61bb      	str	r3, [r7, #24]
   return(result);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e010      	b.n	80030ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	f43f af4a 	beq.w	8002f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3770      	adds	r7, #112	; 0x70
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030de:	f3ef 8305 	mrs	r3, IPSR
 80030e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	607b      	str	r3, [r7, #4]
  return(result);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <osKernelInitialize+0x32>
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <osKernelInitialize+0x64>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d109      	bne.n	8003112 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003102:	603b      	str	r3, [r7, #0]
  return(result);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800310a:	f06f 0305 	mvn.w	r3, #5
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e00c      	b.n	800312c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <osKernelInitialize+0x64>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <osKernelInitialize+0x64>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e002      	b.n	800312c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000178 	.word	0x20000178

08003140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003146:	f3ef 8305 	mrs	r3, IPSR
 800314a:	60bb      	str	r3, [r7, #8]
  return(result);
 800314c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003152:	f3ef 8310 	mrs	r3, PRIMASK
 8003156:	607b      	str	r3, [r7, #4]
  return(result);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <osKernelStart+0x32>
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <osKernelStart+0x64>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d109      	bne.n	800317a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003166:	f3ef 8311 	mrs	r3, BASEPRI
 800316a:	603b      	str	r3, [r7, #0]
  return(result);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003172:	f06f 0305 	mvn.w	r3, #5
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e00e      	b.n	8003198 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <osKernelStart+0x64>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d107      	bne.n	8003192 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <osKernelStart+0x64>)
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003188:	f001 faaa 	bl	80046e0 <vTaskStartScheduler>
      stat = osOK;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e002      	b.n	8003198 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003198:	68fb      	ldr	r3, [r7, #12]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000178 	.word	0x20000178

080031a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b092      	sub	sp, #72	; 0x48
 80031ac:	af04      	add	r7, sp, #16
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b8:	f3ef 8305 	mrs	r3, IPSR
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8094 	bne.w	80032ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ca:	623b      	str	r3, [r7, #32]
  return(result);
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 808d 	bne.w	80032ee <osThreadNew+0x146>
 80031d4:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <osThreadNew+0x150>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d106      	bne.n	80031ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031dc:	f3ef 8311 	mrs	r3, BASEPRI
 80031e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 8082 	bne.w	80032ee <osThreadNew+0x146>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d07e      	beq.n	80032ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80031f4:	2318      	movs	r3, #24
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80031f8:	2300      	movs	r3, #0
 80031fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80031fc:	f107 031b 	add.w	r3, r7, #27
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d045      	beq.n	800329a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <osThreadNew+0x74>
        name = attr->name;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <osThreadNew+0x9a>
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	2b38      	cmp	r3, #56	; 0x38
 8003234:	d805      	bhi.n	8003242 <osThreadNew+0x9a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <osThreadNew+0x9e>
        return (NULL);
 8003242:	2300      	movs	r3, #0
 8003244:	e054      	b.n	80032f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00e      	beq.n	800327c <osThreadNew+0xd4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b5b      	cmp	r3, #91	; 0x5b
 8003264:	d90a      	bls.n	800327c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <osThreadNew+0xd4>
        mem = 1;
 8003276:	2301      	movs	r3, #1
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
 800327a:	e010      	b.n	800329e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10c      	bne.n	800329e <osThreadNew+0xf6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d108      	bne.n	800329e <osThreadNew+0xf6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <osThreadNew+0xf6>
          mem = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
 8003298:	e001      	b.n	800329e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d110      	bne.n	80032c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032ac:	9202      	str	r2, [sp, #8]
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f001 f844 	bl	8004348 <xTaskCreateStatic>
 80032c0:	4603      	mov	r3, r0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e013      	b.n	80032ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d110      	bne.n	80032ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f001 f88e 	bl	8004400 <xTaskCreate>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <osThreadNew+0x146>
          hTask = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032ee:	697b      	ldr	r3, [r7, #20]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3738      	adds	r7, #56	; 0x38
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000178 	.word	0x20000178

080032fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003304:	f3ef 8305 	mrs	r3, IPSR
 8003308:	613b      	str	r3, [r7, #16]
  return(result);
 800330a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	60fb      	str	r3, [r7, #12]
  return(result);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <osDelay+0x34>
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <osDelay+0x58>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d109      	bne.n	8003338 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003324:	f3ef 8311 	mrs	r3, BASEPRI
 8003328:	60bb      	str	r3, [r7, #8]
  return(result);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <osDelay+0x3c>
    stat = osErrorISR;
 8003330:	f06f 0305 	mvn.w	r3, #5
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e007      	b.n	8003348 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f001 f998 	bl	8004678 <vTaskDelay>
    }
  }

  return (stat);
 8003348:	697b      	ldr	r3, [r7, #20]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000178 	.word	0x20000178

08003358 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003368:	f3ef 8305 	mrs	r3, IPSR
 800336c:	61bb      	str	r3, [r7, #24]
  return(result);
 800336e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003370:	2b00      	cmp	r3, #0
 8003372:	d16f      	bne.n	8003454 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	617b      	str	r3, [r7, #20]
  return(result);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d169      	bne.n	8003454 <osMessageQueueNew+0xfc>
 8003380:	4b37      	ldr	r3, [pc, #220]	; (8003460 <osMessageQueueNew+0x108>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d105      	bne.n	8003394 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003388:	f3ef 8311 	mrs	r3, BASEPRI
 800338c:	613b      	str	r3, [r7, #16]
  return(result);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d15f      	bne.n	8003454 <osMessageQueueNew+0xfc>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d05c      	beq.n	8003454 <osMessageQueueNew+0xfc>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d059      	beq.n	8003454 <osMessageQueueNew+0xfc>
    mem = -1;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d029      	beq.n	8003400 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <osMessageQueueNew+0x82>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b4f      	cmp	r3, #79	; 0x4f
 80033ba:	d90e      	bls.n	80033da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <osMessageQueueNew+0x82>
        mem = 1;
 80033d4:	2301      	movs	r3, #1
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	e014      	b.n	8003404 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d110      	bne.n	8003404 <osMessageQueueNew+0xac>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d108      	bne.n	8003404 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d104      	bne.n	8003404 <osMessageQueueNew+0xac>
          mem = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	e001      	b.n	8003404 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10b      	bne.n	8003422 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2100      	movs	r1, #0
 8003414:	9100      	str	r1, [sp, #0]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fa59 	bl	80038d0 <xQueueGenericCreateStatic>
 800341e:	6278      	str	r0, [r7, #36]	; 0x24
 8003420:	e008      	b.n	8003434 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003428:	2200      	movs	r2, #0
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fac6 	bl	80039be <xQueueGenericCreate>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e001      	b.n	800344c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800344c:	69f9      	ldr	r1, [r7, #28]
 800344e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003450:	f000 ff1c 	bl	800428c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003456:	4618      	mov	r0, r3
 8003458:	3728      	adds	r7, #40	; 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000178 	.word	0x20000178

08003464 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800347c:	f3ef 8305 	mrs	r3, IPSR
 8003480:	61fb      	str	r3, [r7, #28]
  return(result);
 8003482:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003488:	f3ef 8310 	mrs	r3, PRIMASK
 800348c:	61bb      	str	r3, [r7, #24]
  return(result);
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <osMessageQueuePut+0x44>
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <osMessageQueuePut+0xe0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d12e      	bne.n	80034fa <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800349c:	f3ef 8311 	mrs	r3, BASEPRI
 80034a0:	617b      	str	r3, [r7, #20]
  return(result);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d028      	beq.n	80034fa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <osMessageQueuePut+0x56>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <osMessageQueuePut+0x56>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80034ba:	f06f 0303 	mvn.w	r3, #3
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034c0:	e039      	b.n	8003536 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034c6:	f107 0210 	add.w	r2, r7, #16
 80034ca:	2300      	movs	r3, #0
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6a38      	ldr	r0, [r7, #32]
 80034d0:	f000 fbd4 	bl	8003c7c <xQueueGenericSendFromISR>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d003      	beq.n	80034e2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80034da:	f06f 0302 	mvn.w	r3, #2
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034e0:	e029      	b.n	8003536 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d026      	beq.n	8003536 <osMessageQueuePut+0xd2>
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <osMessageQueuePut+0xe4>)
 80034ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034f8:	e01d      	b.n	8003536 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <osMessageQueuePut+0xa2>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003506:	f06f 0303 	mvn.w	r3, #3
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
 800350c:	e014      	b.n	8003538 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800350e:	2300      	movs	r3, #0
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	6a38      	ldr	r0, [r7, #32]
 8003516:	f000 fab3 	bl	8003a80 <xQueueGenericSend>
 800351a:	4603      	mov	r3, r0
 800351c:	2b01      	cmp	r3, #1
 800351e:	d00b      	beq.n	8003538 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003526:	f06f 0301 	mvn.w	r3, #1
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	e004      	b.n	8003538 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800352e:	f06f 0302 	mvn.w	r3, #2
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	e000      	b.n	8003538 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003536:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800353a:	4618      	mov	r0, r3
 800353c:	3728      	adds	r7, #40	; 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000178 	.word	0x20000178
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003562:	f3ef 8305 	mrs	r3, IPSR
 8003566:	61fb      	str	r3, [r7, #28]
  return(result);
 8003568:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356e:	f3ef 8310 	mrs	r3, PRIMASK
 8003572:	61bb      	str	r3, [r7, #24]
  return(result);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <osMessageQueueGet+0x42>
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <osMessageQueueGet+0xdc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d12e      	bne.n	80035e0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003582:	f3ef 8311 	mrs	r3, BASEPRI
 8003586:	617b      	str	r3, [r7, #20]
  return(result);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <osMessageQueueGet+0x54>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <osMessageQueueGet+0x54>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80035a0:	f06f 0303 	mvn.w	r3, #3
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035a6:	e038      	b.n	800361a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80035ac:	f107 0310 	add.w	r3, r7, #16
 80035b0:	461a      	mov	r2, r3
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	6a38      	ldr	r0, [r7, #32]
 80035b6:	f000 fcd9 	bl	8003f6c <xQueueReceiveFromISR>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d003      	beq.n	80035c8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80035c0:	f06f 0302 	mvn.w	r3, #2
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035c6:	e028      	b.n	800361a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d025      	beq.n	800361a <osMessageQueueGet+0xce>
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <osMessageQueueGet+0xe0>)
 80035d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035de:	e01c      	b.n	800361a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <osMessageQueueGet+0xa0>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80035ec:	f06f 0303 	mvn.w	r3, #3
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	e013      	b.n	800361c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	6a38      	ldr	r0, [r7, #32]
 80035fa:	f000 fbd7 	bl	8003dac <xQueueReceive>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00b      	beq.n	800361c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800360a:	f06f 0301 	mvn.w	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	e004      	b.n	800361c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003612:	f06f 0302 	mvn.w	r3, #2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	e000      	b.n	800361c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800361a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800361e:	4618      	mov	r0, r3
 8003620:	3728      	adds	r7, #40	; 0x28
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000178 	.word	0x20000178
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a07      	ldr	r2, [pc, #28]	; (800365c <vApplicationGetIdleTaskMemory+0x2c>)
 8003640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4a06      	ldr	r2, [pc, #24]	; (8003660 <vApplicationGetIdleTaskMemory+0x30>)
 8003646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	2000017c 	.word	0x2000017c
 8003660:	200001d8 	.word	0x200001d8

08003664 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <vApplicationGetTimerTaskMemory+0x2c>)
 8003674:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4a06      	ldr	r2, [pc, #24]	; (8003694 <vApplicationGetTimerTaskMemory+0x30>)
 800367a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	200003d8 	.word	0x200003d8
 8003694:	20000434 	.word	0x20000434

08003698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0208 	add.w	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f103 0208 	add.w	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f103 0208 	add.w	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d103      	bne.n	800375a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e00c      	b.n	8003774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3308      	adds	r3, #8
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e002      	b.n	8003768 <vListInsert+0x2e>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d2f6      	bcs.n	8003762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6852      	ldr	r2, [r2, #4]
 80037cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d103      	bne.n	80037e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800382a:	f002 f8cb 	bl	80059c4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	441a      	add	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	3b01      	subs	r3, #1
 800385c:	68f9      	ldr	r1, [r7, #12]
 800385e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	441a      	add	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	22ff      	movs	r2, #255	; 0xff
 800386e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d114      	bne.n	80038aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01a      	beq.n	80038be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3310      	adds	r3, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f001 f9b5 	bl	8004bfc <xTaskRemoveFromEventList>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d012      	beq.n	80038be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <xQueueGenericReset+0xcc>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	e009      	b.n	80038be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3310      	adds	r3, #16
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fef2 	bl	8003698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff feed 	bl	8003698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038be:	f002 f8b1 	bl	8005a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038c2:	2301      	movs	r3, #1
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	; 0x38
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <xQueueGenericCreateStatic+0x52>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <xQueueGenericCreateStatic+0x56>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <xQueueGenericCreateStatic+0x58>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	623b      	str	r3, [r7, #32]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <xQueueGenericCreateStatic+0x7e>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <xQueueGenericCreateStatic+0x82>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericCreateStatic+0x84>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	61fb      	str	r3, [r7, #28]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800396e:	2350      	movs	r3, #80	; 0x50
 8003970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b50      	cmp	r3, #80	; 0x50
 8003976:	d00a      	beq.n	800398e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61bb      	str	r3, [r7, #24]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f843 	bl	8003a3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3730      	adds	r7, #48	; 0x30
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b08a      	sub	sp, #40	; 0x28
 80039c2:	af02      	add	r7, sp, #8
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10a      	bne.n	80039e8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	613b      	str	r3, [r7, #16]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e004      	b.n	80039fe <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3350      	adds	r3, #80	; 0x50
 8003a02:	4618      	mov	r0, r3
 8003a04:	f002 f900 	bl	8005c08 <pvPortMalloc>
 8003a08:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00f      	beq.n	8003a30 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	3350      	adds	r3, #80	; 0x50
 8003a14:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a1e:	79fa      	ldrb	r2, [r7, #7]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f805 	bl	8003a3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a30:	69bb      	ldr	r3, [r7, #24]
	}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e002      	b.n	8003a5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a68:	2101      	movs	r1, #1
 8003a6a:	69b8      	ldr	r0, [r7, #24]
 8003a6c:	f7ff fec8 	bl	8003800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueGenericSend+0x32>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d103      	bne.n	8003ac0 <xQueueGenericSend+0x40>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <xQueueGenericSend+0x44>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <xQueueGenericSend+0x46>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <xQueueGenericSend+0x60>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSend+0x6e>
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <xQueueGenericSend+0x72>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <xQueueGenericSend+0x74>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <xQueueGenericSend+0x8e>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	623b      	str	r3, [r7, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b0e:	f001 fa39 	bl	8004f84 <xTaskGetSchedulerState>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <xQueueGenericSend+0x9e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <xQueueGenericSend+0xa2>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericSend+0xa4>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	61fb      	str	r3, [r7, #28]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b3e:	f001 ff41 	bl	80059c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <xQueueGenericSend+0xd4>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d129      	bne.n	8003ba8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5a:	f000 fa87 	bl	800406c <prvCopyDataToQueue>
 8003b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f845 	bl	8004bfc <xTaskRemoveFromEventList>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b78:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	e00a      	b.n	8003ba0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ba0:	f001 ff40 	bl	8005a24 <vPortExitCritical>
				return pdPASS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e063      	b.n	8003c70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bae:	f001 ff39 	bl	8005a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e05c      	b.n	8003c70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f001 f87f 	bl	8004cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bca:	f001 ff2b 	bl	8005a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bce:	f000 fded 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd2:	f001 fef7 	bl	80059c4 <vPortEnterCritical>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d103      	bne.n	8003bec <xQueueGenericSend+0x16c>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d103      	bne.n	8003c02 <xQueueGenericSend+0x182>
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c02:	f001 ff0f 	bl	8005a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c06:	1d3a      	adds	r2, r7, #4
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f86e 	bl	8004cf0 <xTaskCheckForTimeOut>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d124      	bne.n	8003c64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c1c:	f000 fb1e 	bl	800425c <prvIsQueueFull>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d018      	beq.n	8003c58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	3310      	adds	r3, #16
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ff94 	bl	8004b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c36:	f000 faa9 	bl	800418c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c3a:	f000 fdc5 	bl	80047c8 <xTaskResumeAll>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f47f af7c 	bne.w	8003b3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	e772      	b.n	8003b3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5a:	f000 fa97 	bl	800418c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c5e:	f000 fdb3 	bl	80047c8 <xTaskResumeAll>
 8003c62:	e76c      	b.n	8003b3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f000 fa91 	bl	800418c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6a:	f000 fdad 	bl	80047c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c6e:	2300      	movs	r3, #0
		}
	}
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3738      	adds	r7, #56	; 0x38
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08e      	sub	sp, #56	; 0x38
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <xQueueGenericSendFromISR+0x3c>
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <xQueueGenericSendFromISR+0x40>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <xQueueGenericSendFromISR+0x42>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	623b      	str	r3, [r7, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d103      	bne.n	8003ce6 <xQueueGenericSendFromISR+0x6a>
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <xQueueGenericSendFromISR+0x6e>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <xQueueGenericSendFromISR+0x70>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61fb      	str	r3, [r7, #28]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d06:	f001 ff3f 	bl	8005b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	61ba      	str	r2, [r7, #24]
 8003d20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <xQueueGenericSendFromISR+0xbc>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d12c      	bne.n	8003d92 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d48:	f000 f990 	bl	800406c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d112      	bne.n	8003d7c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	3324      	adds	r3, #36	; 0x24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 ff4a 	bl	8004bfc <xTaskRemoveFromEventList>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e007      	b.n	8003d8c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d90:	e001      	b.n	8003d96 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3738      	adds	r7, #56	; 0x38
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <xQueueReceive+0x30>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	623b      	str	r3, [r7, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <xQueueReceive+0x3e>
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <xQueueReceive+0x42>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <xQueueReceive+0x44>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <xQueueReceive+0x5e>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	61fb      	str	r3, [r7, #28]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0a:	f001 f8bb 	bl	8004f84 <xTaskGetSchedulerState>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueReceive+0x6e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <xQueueReceive+0x72>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueReceive+0x74>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueReceive+0x8e>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61bb      	str	r3, [r7, #24]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3a:	f001 fdc3 	bl	80059c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01f      	beq.n	8003e8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4e:	f000 f977 	bl	8004140 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	3310      	adds	r3, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fec8 	bl	8004bfc <xTaskRemoveFromEventList>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <xQueueReceive+0x1bc>)
 8003e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e82:	f001 fdcf 	bl	8005a24 <vPortExitCritical>
				return pdPASS;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e069      	b.n	8003f5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e90:	f001 fdc8 	bl	8005a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e062      	b.n	8003f5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e9e:	f107 0310 	add.w	r3, r7, #16
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 ff0e 	bl	8004cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eac:	f001 fdba 	bl	8005a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eb0:	f000 fc7c 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb4:	f001 fd86 	bl	80059c4 <vPortEnterCritical>
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <xQueueReceive+0x122>
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <xQueueReceive+0x138>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee4:	f001 fd9e 	bl	8005a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee8:	1d3a      	adds	r2, r7, #4
 8003eea:	f107 0310 	add.w	r3, r7, #16
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fefd 	bl	8004cf0 <xTaskCheckForTimeOut>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d123      	bne.n	8003f44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efe:	f000 f997 	bl	8004230 <prvIsQueueEmpty>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d017      	beq.n	8003f38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	3324      	adds	r3, #36	; 0x24
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe23 	bl	8004b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f18:	f000 f938 	bl	800418c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f1c:	f000 fc54 	bl	80047c8 <xTaskResumeAll>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d189      	bne.n	8003e3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <xQueueReceive+0x1bc>)
 8003f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	e780      	b.n	8003e3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3a:	f000 f927 	bl	800418c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3e:	f000 fc43 	bl	80047c8 <xTaskResumeAll>
 8003f42:	e77a      	b.n	8003e3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f46:	f000 f921 	bl	800418c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f4a:	f000 fc3d 	bl	80047c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 f96e 	bl	8004230 <prvIsQueueEmpty>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f43f af6f 	beq.w	8003e3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3730      	adds	r7, #48	; 0x30
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08e      	sub	sp, #56	; 0x38
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	623b      	str	r3, [r7, #32]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <xQueueReceiveFromISR+0x3a>
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <xQueueReceiveFromISR+0x3e>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <xQueueReceiveFromISR+0x40>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	61fb      	str	r3, [r7, #28]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fc6:	f001 fddf 	bl	8005b88 <vPortValidateInterruptPriority>
	__asm volatile
 8003fca:	f3ef 8211 	mrs	r2, BASEPRI
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	61ba      	str	r2, [r7, #24]
 8003fe0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003fe2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d02f      	beq.n	8004052 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004000:	f000 f89e 	bl	8004140 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800400c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d112      	bne.n	800403c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	3310      	adds	r3, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fdea 	bl	8004bfc <xTaskRemoveFromEventList>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00e      	beq.n	800404c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e007      	b.n	800404c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800403c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004040:	3301      	adds	r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	b25a      	sxtb	r2, r3
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800404c:	2301      	movs	r3, #1
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	e001      	b.n	8004056 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	613b      	str	r3, [r7, #16]
	__asm volatile
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f383 8811 	msr	BASEPRI, r3
}
 8004060:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004064:	4618      	mov	r0, r3
 8004066:	3738      	adds	r7, #56	; 0x38
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d14d      	bne.n	800412e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 ff92 	bl	8004fc0 <xTaskPriorityDisinherit>
 800409c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
 80040a4:	e043      	b.n	800412e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d119      	bne.n	80040e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6898      	ldr	r0, [r3, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	461a      	mov	r2, r3
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	f001 ffaa 	bl	8006010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d32b      	bcc.n	800412e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	e026      	b.n	800412e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68d8      	ldr	r0, [r3, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	461a      	mov	r2, r3
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	f001 ff90 	bl	8006010 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	425b      	negs	r3, r3
 80040fa:	441a      	add	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	425b      	negs	r3, r3
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d105      	bne.n	800412e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3b01      	subs	r3, #1
 800412c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004136:	697b      	ldr	r3, [r7, #20]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	441a      	add	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d303      	bcc.n	8004174 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68d9      	ldr	r1, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	461a      	mov	r2, r3
 800417e:	6838      	ldr	r0, [r7, #0]
 8004180:	f001 ff46 	bl	8006010 <memcpy>
	}
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004194:	f001 fc16 	bl	80059c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a0:	e011      	b.n	80041c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d012      	beq.n	80041d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3324      	adds	r3, #36	; 0x24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fd24 	bl	8004bfc <xTaskRemoveFromEventList>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041ba:	f000 fdfb 	bl	8004db4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	dce9      	bgt.n	80041a2 <prvUnlockQueue+0x16>
 80041ce:	e000      	b.n	80041d2 <prvUnlockQueue+0x46>
					break;
 80041d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041da:	f001 fc23 	bl	8005a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041de:	f001 fbf1 	bl	80059c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ea:	e011      	b.n	8004210 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d012      	beq.n	800421a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3310      	adds	r3, #16
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fcff 	bl	8004bfc <xTaskRemoveFromEventList>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004204:	f000 fdd6 	bl	8004db4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004208:	7bbb      	ldrb	r3, [r7, #14]
 800420a:	3b01      	subs	r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004214:	2b00      	cmp	r3, #0
 8004216:	dce9      	bgt.n	80041ec <prvUnlockQueue+0x60>
 8004218:	e000      	b.n	800421c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800421a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	22ff      	movs	r2, #255	; 0xff
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004224:	f001 fbfe 	bl	8005a24 <vPortExitCritical>
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004238:	f001 fbc4 	bl	80059c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e001      	b.n	800424e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800424e:	f001 fbe9 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004264:	f001 fbae 	bl	80059c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	429a      	cmp	r2, r3
 8004272:	d102      	bne.n	800427a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e001      	b.n	800427e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800427e:	f001 fbd1 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e014      	b.n	80042c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800429c:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <vQueueAddToRegistry+0x50>)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042a8:	490c      	ldr	r1, [pc, #48]	; (80042dc <vQueueAddToRegistry+0x50>)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <vQueueAddToRegistry+0x50>)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042be:	e006      	b.n	80042ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	d9e7      	bls.n	800429c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000834 	.word	0x20000834

080042e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042f0:	f001 fb68 	bl	80059c4 <vPortEnterCritical>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d103      	bne.n	800430a <vQueueWaitForMessageRestricted+0x2a>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004310:	b25b      	sxtb	r3, r3
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d103      	bne.n	8004320 <vQueueWaitForMessageRestricted+0x40>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004320:	f001 fb80 	bl	8005a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3324      	adds	r3, #36	; 0x24
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fc35 	bl	8004ba4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ff26 	bl	800418c <prvUnlockQueue>
	}
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	; 0x38
 800434c:	af04      	add	r7, sp, #16
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xTaskCreateStatic+0x2a>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	623b      	str	r3, [r7, #32]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xTaskCreateStatic+0x46>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	61fb      	str	r3, [r7, #28]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800438e:	235c      	movs	r3, #92	; 0x5c
 8004390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b5c      	cmp	r3, #92	; 0x5c
 8004396:	d00a      	beq.n	80043ae <xTaskCreateStatic+0x66>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	61bb      	str	r3, [r7, #24]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01e      	beq.n	80043f2 <xTaskCreateStatic+0xaa>
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01b      	beq.n	80043f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043cc:	2300      	movs	r3, #0
 80043ce:	9303      	str	r3, [sp, #12]
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f850 	bl	800448a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ec:	f000 f8d4 	bl	8004598 <prvAddNewTaskToReadyList>
 80043f0:	e001      	b.n	80043f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043f6:	697b      	ldr	r3, [r7, #20]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	; 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af04      	add	r7, sp, #16
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4618      	mov	r0, r3
 8004416:	f001 fbf7 	bl	8005c08 <pvPortMalloc>
 800441a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004422:	205c      	movs	r0, #92	; 0x5c
 8004424:	f001 fbf0 	bl	8005c08 <pvPortMalloc>
 8004428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
 8004436:	e005      	b.n	8004444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004438:	6978      	ldr	r0, [r7, #20]
 800443a:	f001 fca9 	bl	8005d90 <vPortFree>
 800443e:	e001      	b.n	8004444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	2300      	movs	r3, #0
 8004456:	9303      	str	r3, [sp, #12]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f80e 	bl	800448a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800446e:	69f8      	ldr	r0, [r7, #28]
 8004470:	f000 f892 	bl	8004598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004474:	2301      	movs	r3, #1
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e002      	b.n	8004480 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004480:	69bb      	ldr	r3, [r7, #24]
	}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b088      	sub	sp, #32
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	461a      	mov	r2, r3
 80044a2:	21a5      	movs	r1, #165	; 0xa5
 80044a4:	f001 fdc2 	bl	800602c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044b2:	3b01      	subs	r3, #1
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f023 0307 	bic.w	r3, r3, #7
 80044c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	617b      	str	r3, [r7, #20]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	e012      	b.n	800450e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	7819      	ldrb	r1, [r3, #0]
 80044f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	3334      	adds	r3, #52	; 0x34
 80044f8:	460a      	mov	r2, r1
 80044fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d006      	beq.n	8004516 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d9e9      	bls.n	80044e8 <prvInitialiseNewTask+0x5e>
 8004514:	e000      	b.n	8004518 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004516:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	2b37      	cmp	r3, #55	; 0x37
 8004524:	d901      	bls.n	800452a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004526:	2337      	movs	r3, #55	; 0x37
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004534:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2200      	movs	r2, #0
 800453a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff f8c9 	bl	80036d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	3318      	adds	r3, #24
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f8c4 	bl	80036d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004554:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004564:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	69b8      	ldr	r0, [r7, #24]
 800457a:	f001 f8f5 	bl	8005768 <pxPortInitialiseStack>
 800457e:	4602      	mov	r2, r0
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004590:	bf00      	nop
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045a0:	f001 fa10 	bl	80059c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045a4:	4b2d      	ldr	r3, [pc, #180]	; (800465c <prvAddNewTaskToReadyList+0xc4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	4a2c      	ldr	r2, [pc, #176]	; (800465c <prvAddNewTaskToReadyList+0xc4>)
 80045ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045b6:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045bc:	4b27      	ldr	r3, [pc, #156]	; (800465c <prvAddNewTaskToReadyList+0xc4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d110      	bne.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045c4:	f000 fc1a 	bl	8004dfc <prvInitialiseTaskLists>
 80045c8:	e00d      	b.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <prvAddNewTaskToReadyList+0xcc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	429a      	cmp	r2, r3
 80045de:	d802      	bhi.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <prvAddNewTaskToReadyList+0xd0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <prvAddNewTaskToReadyList+0xd0>)
 80045ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045f0:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <prvAddNewTaskToReadyList+0xd0>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <prvAddNewTaskToReadyList+0xd4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d903      	bls.n	800460c <prvAddNewTaskToReadyList+0x74>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4a18      	ldr	r2, [pc, #96]	; (800466c <prvAddNewTaskToReadyList+0xd4>)
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4a15      	ldr	r2, [pc, #84]	; (8004670 <prvAddNewTaskToReadyList+0xd8>)
 800461a:	441a      	add	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7ff f865 	bl	80036f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004628:	f001 f9fc 	bl	8005a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <prvAddNewTaskToReadyList+0xcc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	429a      	cmp	r2, r3
 8004640:	d207      	bcs.n	8004652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <prvAddNewTaskToReadyList+0xdc>)
 8004644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000d48 	.word	0x20000d48
 8004660:	20000874 	.word	0x20000874
 8004664:	20000d54 	.word	0x20000d54
 8004668:	20000d64 	.word	0x20000d64
 800466c:	20000d50 	.word	0x20000d50
 8004670:	20000878 	.word	0x20000878
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <vTaskDelay+0x60>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <vTaskDelay+0x30>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60bb      	str	r3, [r7, #8]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046a8:	f000 f880 	bl	80047ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ac:	2100      	movs	r1, #0
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fcf4 	bl	800509c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046b4:	f000 f888 	bl	80047c8 <xTaskResumeAll>
 80046b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <vTaskDelay+0x64>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000d70 	.word	0x20000d70
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046ee:	463a      	mov	r2, r7
 80046f0:	1d39      	adds	r1, r7, #4
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe ff9a 	bl	8003630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	9202      	str	r2, [sp, #8]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	2300      	movs	r3, #0
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	460a      	mov	r2, r1
 800470e:	4921      	ldr	r1, [pc, #132]	; (8004794 <vTaskStartScheduler+0xb4>)
 8004710:	4821      	ldr	r0, [pc, #132]	; (8004798 <vTaskStartScheduler+0xb8>)
 8004712:	f7ff fe19 	bl	8004348 <xTaskCreateStatic>
 8004716:	4603      	mov	r3, r0
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <vTaskStartScheduler+0xbc>)
 800471a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <vTaskStartScheduler+0xbc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e001      	b.n	800472e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004734:	f000 fd06 	bl	8005144 <xTimerCreateTimerTask>
 8004738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d116      	bne.n	800476e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
}
 8004752:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <vTaskStartScheduler+0xc0>)
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <vTaskStartScheduler+0xc4>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004762:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <vTaskStartScheduler+0xc8>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004768:	f001 f88a 	bl	8005880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800476c:	e00e      	b.n	800478c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d10a      	bne.n	800478c <vTaskStartScheduler+0xac>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <vTaskStartScheduler+0xaa>
}
 800478c:	bf00      	nop
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	08006968 	.word	0x08006968
 8004798:	08004dcd 	.word	0x08004dcd
 800479c:	20000d6c 	.word	0x20000d6c
 80047a0:	20000d68 	.word	0x20000d68
 80047a4:	20000d54 	.word	0x20000d54
 80047a8:	20000d4c 	.word	0x20000d4c

080047ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000d70 	.word	0x20000d70

080047c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047d6:	4b42      	ldr	r3, [pc, #264]	; (80048e0 <xTaskResumeAll+0x118>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	603b      	str	r3, [r7, #0]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047f4:	f001 f8e6 	bl	80059c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047f8:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <xTaskResumeAll+0x118>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <xTaskResumeAll+0x118>)
 8004800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <xTaskResumeAll+0x118>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d162      	bne.n	80048d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <xTaskResumeAll+0x11c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d05e      	beq.n	80048d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004812:	e02f      	b.n	8004874 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <xTaskResumeAll+0x120>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3318      	adds	r3, #24
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe ffc3 	bl	80037ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe ffbe 	bl	80037ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <xTaskResumeAll+0x124>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d903      	bls.n	8004844 <xTaskResumeAll+0x7c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <xTaskResumeAll+0x124>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <xTaskResumeAll+0x128>)
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7fe ff49 	bl	80036f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <xTaskResumeAll+0x12c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <xTaskResumeAll+0x130>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <xTaskResumeAll+0x120>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1cb      	bne.n	8004814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004882:	f000 fb59 	bl	8004f38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004886:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <xTaskResumeAll+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004892:	f000 f847 	bl	8004924 <xTaskIncrementTick>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <xTaskResumeAll+0x130>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f1      	bne.n	8004892 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <xTaskResumeAll+0x134>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <xTaskResumeAll+0x130>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <xTaskResumeAll+0x138>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d0:	f001 f8a8 	bl	8005a24 <vPortExitCritical>

	return xAlreadyYielded;
 80048d4:	68bb      	ldr	r3, [r7, #8]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000d70 	.word	0x20000d70
 80048e4:	20000d48 	.word	0x20000d48
 80048e8:	20000d08 	.word	0x20000d08
 80048ec:	20000d50 	.word	0x20000d50
 80048f0:	20000878 	.word	0x20000878
 80048f4:	20000874 	.word	0x20000874
 80048f8:	20000d5c 	.word	0x20000d5c
 80048fc:	20000d58 	.word	0x20000d58
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <xTaskGetTickCount+0x1c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004910:	687b      	ldr	r3, [r7, #4]
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000d4c 	.word	0x20000d4c

08004924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492e:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <xTaskIncrementTick+0x150>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 808e 	bne.w	8004a54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004938:	4b4f      	ldr	r3, [pc, #316]	; (8004a78 <xTaskIncrementTick+0x154>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004940:	4a4d      	ldr	r2, [pc, #308]	; (8004a78 <xTaskIncrementTick+0x154>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d120      	bne.n	800498e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800494c:	4b4b      	ldr	r3, [pc, #300]	; (8004a7c <xTaskIncrementTick+0x158>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <xTaskIncrementTick+0x48>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	603b      	str	r3, [r7, #0]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <xTaskIncrementTick+0x46>
 800496c:	4b43      	ldr	r3, [pc, #268]	; (8004a7c <xTaskIncrementTick+0x158>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <xTaskIncrementTick+0x15c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a41      	ldr	r2, [pc, #260]	; (8004a7c <xTaskIncrementTick+0x158>)
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4a41      	ldr	r2, [pc, #260]	; (8004a80 <xTaskIncrementTick+0x15c>)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b40      	ldr	r3, [pc, #256]	; (8004a84 <xTaskIncrementTick+0x160>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a3f      	ldr	r2, [pc, #252]	; (8004a84 <xTaskIncrementTick+0x160>)
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	f000 fad5 	bl	8004f38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800498e:	4b3e      	ldr	r3, [pc, #248]	; (8004a88 <xTaskIncrementTick+0x164>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	429a      	cmp	r2, r3
 8004996:	d34e      	bcc.n	8004a36 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004998:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <xTaskIncrementTick+0x158>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <xTaskIncrementTick+0x82>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <xTaskIncrementTick+0x84>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ac:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <xTaskIncrementTick+0x164>)
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	601a      	str	r2, [r3, #0]
					break;
 80049b4:	e03f      	b.n	8004a36 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049b6:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <xTaskIncrementTick+0x158>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d203      	bcs.n	80049d6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049ce:	4a2e      	ldr	r2, [pc, #184]	; (8004a88 <xTaskIncrementTick+0x164>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
						break;
 80049d4:	e02f      	b.n	8004a36 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3304      	adds	r3, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fee6 	bl	80037ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	3318      	adds	r3, #24
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fedd 	bl	80037ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <xTaskIncrementTick+0x168>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d903      	bls.n	8004a06 <xTaskIncrementTick+0xe2>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	4a22      	ldr	r2, [pc, #136]	; (8004a8c <xTaskIncrementTick+0x168>)
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <xTaskIncrementTick+0x16c>)
 8004a14:	441a      	add	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fe fe68 	bl	80036f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a26:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <xTaskIncrementTick+0x170>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d3b3      	bcc.n	8004998 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a34:	e7b0      	b.n	8004998 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <xTaskIncrementTick+0x170>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	4914      	ldr	r1, [pc, #80]	; (8004a90 <xTaskIncrementTick+0x16c>)
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d907      	bls.n	8004a5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e004      	b.n	8004a5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <xTaskIncrementTick+0x174>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <xTaskIncrementTick+0x174>)
 8004a5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <xTaskIncrementTick+0x178>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a6a:	697b      	ldr	r3, [r7, #20]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000d70 	.word	0x20000d70
 8004a78:	20000d4c 	.word	0x20000d4c
 8004a7c:	20000d00 	.word	0x20000d00
 8004a80:	20000d04 	.word	0x20000d04
 8004a84:	20000d60 	.word	0x20000d60
 8004a88:	20000d68 	.word	0x20000d68
 8004a8c:	20000d50 	.word	0x20000d50
 8004a90:	20000878 	.word	0x20000878
 8004a94:	20000874 	.word	0x20000874
 8004a98:	20000d58 	.word	0x20000d58
 8004a9c:	20000d5c 	.word	0x20000d5c

08004aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aa6:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <vTaskSwitchContext+0xa8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aae:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <vTaskSwitchContext+0xac>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ab4:	e041      	b.n	8004b3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004ab6:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <vTaskSwitchContext+0xac>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <vTaskSwitchContext+0xb0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e010      	b.n	8004ae6 <vTaskSwitchContext+0x46>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <vTaskSwitchContext+0x40>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	607b      	str	r3, [r7, #4]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <vTaskSwitchContext+0x3e>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	491b      	ldr	r1, [pc, #108]	; (8004b54 <vTaskSwitchContext+0xb4>)
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0e4      	beq.n	8004ac4 <vTaskSwitchContext+0x24>
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <vTaskSwitchContext+0xb4>)
 8004b06:	4413      	add	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	605a      	str	r2, [r3, #4]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d104      	bne.n	8004b2a <vTaskSwitchContext+0x8a>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <vTaskSwitchContext+0xb8>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <vTaskSwitchContext+0xb0>)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6013      	str	r3, [r2, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000d70 	.word	0x20000d70
 8004b4c:	20000d5c 	.word	0x20000d5c
 8004b50:	20000d50 	.word	0x20000d50
 8004b54:	20000878 	.word	0x20000878
 8004b58:	20000874 	.word	0x20000874

08004b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <vTaskPlaceOnEventList+0x44>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3318      	adds	r3, #24
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fe fdd5 	bl	800373a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b90:	2101      	movs	r1, #1
 8004b92:	6838      	ldr	r0, [r7, #0]
 8004b94:	f000 fa82 	bl	800509c <prvAddCurrentTaskToDelayedList>
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000874 	.word	0x20000874

08004ba4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	617b      	str	r3, [r7, #20]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3318      	adds	r3, #24
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7fe fd8c 	bl	80036f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	68b8      	ldr	r0, [r7, #8]
 8004bea:	f000 fa57 	bl	800509c <prvAddCurrentTaskToDelayedList>
	}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000874 	.word	0x20000874

08004bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60fb      	str	r3, [r7, #12]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fdbd 	bl	80037ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c32:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <xTaskRemoveFromEventList+0xb0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fdb4 	bl	80037ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <xTaskRemoveFromEventList+0xb4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d903      	bls.n	8004c58 <xTaskRemoveFromEventList+0x5c>
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <xTaskRemoveFromEventList+0xb4>)
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <xTaskRemoveFromEventList+0xb8>)
 8004c66:	441a      	add	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f7fe fd3f 	bl	80036f2 <vListInsertEnd>
 8004c74:	e005      	b.n	8004c82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3318      	adds	r3, #24
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	480e      	ldr	r0, [pc, #56]	; (8004cb8 <xTaskRemoveFromEventList+0xbc>)
 8004c7e:	f7fe fd38 	bl	80036f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <xTaskRemoveFromEventList+0xc0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d905      	bls.n	8004c9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <xTaskRemoveFromEventList+0xc4>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e001      	b.n	8004ca0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ca0:	697b      	ldr	r3, [r7, #20]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000d70 	.word	0x20000d70
 8004cb0:	20000d50 	.word	0x20000d50
 8004cb4:	20000878 	.word	0x20000878
 8004cb8:	20000d08 	.word	0x20000d08
 8004cbc:	20000874 	.word	0x20000874
 8004cc0:	20000d5c 	.word	0x20000d5c

08004cc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <vTaskInternalSetTimeOutState+0x24>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <vTaskInternalSetTimeOutState+0x28>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	605a      	str	r2, [r3, #4]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	20000d60 	.word	0x20000d60
 8004cec:	20000d4c 	.word	0x20000d4c

08004cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60fb      	str	r3, [r7, #12]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d32:	f000 fe47 	bl	80059c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <xTaskCheckForTimeOut+0xbc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d102      	bne.n	8004d56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e023      	b.n	8004d9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <xTaskCheckForTimeOut+0xc0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d007      	beq.n	8004d72 <xTaskCheckForTimeOut+0x82>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	e015      	b.n	8004d9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d20b      	bcs.n	8004d94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff ff9b 	bl	8004cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	e004      	b.n	8004d9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d9e:	f000 fe41 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 8004da2:	69fb      	ldr	r3, [r7, #28]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000d4c 	.word	0x20000d4c
 8004db0:	20000d60 	.word	0x20000d60

08004db4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004db8:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <vTaskMissedYield+0x14>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	20000d5c 	.word	0x20000d5c

08004dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dd4:	f000 f852 	bl	8004e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <prvIdleTask+0x28>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d9f9      	bls.n	8004dd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <prvIdleTask+0x2c>)
 8004de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004df0:	e7f0      	b.n	8004dd4 <prvIdleTask+0x8>
 8004df2:	bf00      	nop
 8004df4:	20000878 	.word	0x20000878
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	e00c      	b.n	8004e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <prvInitialiseTaskLists+0x60>)
 8004e14:	4413      	add	r3, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fc3e 	bl	8003698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b37      	cmp	r3, #55	; 0x37
 8004e26:	d9ef      	bls.n	8004e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e28:	480d      	ldr	r0, [pc, #52]	; (8004e60 <prvInitialiseTaskLists+0x64>)
 8004e2a:	f7fe fc35 	bl	8003698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e2e:	480d      	ldr	r0, [pc, #52]	; (8004e64 <prvInitialiseTaskLists+0x68>)
 8004e30:	f7fe fc32 	bl	8003698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e34:	480c      	ldr	r0, [pc, #48]	; (8004e68 <prvInitialiseTaskLists+0x6c>)
 8004e36:	f7fe fc2f 	bl	8003698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e3a:	480c      	ldr	r0, [pc, #48]	; (8004e6c <prvInitialiseTaskLists+0x70>)
 8004e3c:	f7fe fc2c 	bl	8003698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e40:	480b      	ldr	r0, [pc, #44]	; (8004e70 <prvInitialiseTaskLists+0x74>)
 8004e42:	f7fe fc29 	bl	8003698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <prvInitialiseTaskLists+0x78>)
 8004e48:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <prvInitialiseTaskLists+0x64>)
 8004e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <prvInitialiseTaskLists+0x7c>)
 8004e4e:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <prvInitialiseTaskLists+0x68>)
 8004e50:	601a      	str	r2, [r3, #0]
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000878 	.word	0x20000878
 8004e60:	20000cd8 	.word	0x20000cd8
 8004e64:	20000cec 	.word	0x20000cec
 8004e68:	20000d08 	.word	0x20000d08
 8004e6c:	20000d1c 	.word	0x20000d1c
 8004e70:	20000d34 	.word	0x20000d34
 8004e74:	20000d00 	.word	0x20000d00
 8004e78:	20000d04 	.word	0x20000d04

08004e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e82:	e019      	b.n	8004eb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e84:	f000 fd9e 	bl	80059c4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <prvCheckTasksWaitingTermination+0x50>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe fc89 	bl	80037ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <prvCheckTasksWaitingTermination+0x54>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <prvCheckTasksWaitingTermination+0x54>)
 8004ea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004eac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eae:	f000 fdb9 	bl	8005a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f810 	bl	8004ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e1      	bne.n	8004e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000d1c 	.word	0x20000d1c
 8004ed0:	20000d48 	.word	0x20000d48
 8004ed4:	20000d30 	.word	0x20000d30

08004ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 ff4e 	bl	8005d90 <vPortFree>
				vPortFree( pxTCB );
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 ff4b 	bl	8005d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004efa:	e018      	b.n	8004f2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d103      	bne.n	8004f0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 ff42 	bl	8005d90 <vPortFree>
	}
 8004f0c:	e00f      	b.n	8004f2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d00a      	beq.n	8004f2e <prvDeleteTCB+0x56>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60fb      	str	r3, [r7, #12]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <prvDeleteTCB+0x54>
	}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <prvResetNextTaskUnblockTime+0x44>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <prvResetNextTaskUnblockTime+0x14>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <prvResetNextTaskUnblockTime+0x16>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <prvResetNextTaskUnblockTime+0x48>)
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f5a:	e008      	b.n	8004f6e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f5c:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <prvResetNextTaskUnblockTime+0x44>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4a05      	ldr	r2, [pc, #20]	; (8004f80 <prvResetNextTaskUnblockTime+0x48>)
 8004f6c:	6013      	str	r3, [r2, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000d00 	.word	0x20000d00
 8004f80:	20000d68 	.word	0x20000d68

08004f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <xTaskGetSchedulerState+0x34>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f92:	2301      	movs	r3, #1
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	e008      	b.n	8004faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <xTaskGetSchedulerState+0x38>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e001      	b.n	8004faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004faa:	687b      	ldr	r3, [r7, #4]
	}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	20000d54 	.word	0x20000d54
 8004fbc:	20000d70 	.word	0x20000d70

08004fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d056      	beq.n	8005084 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fd6:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <xTaskPriorityDisinherit+0xd0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d00a      	beq.n	8004ff6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60fb      	str	r3, [r7, #12]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60bb      	str	r3, [r7, #8]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	1e5a      	subs	r2, r3, #1
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	429a      	cmp	r2, r3
 8005028:	d02c      	beq.n	8005084 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502e:	2b00      	cmp	r3, #0
 8005030:	d128      	bne.n	8005084 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3304      	adds	r3, #4
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fbb8 	bl	80037ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <xTaskPriorityDisinherit+0xd4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d903      	bls.n	8005064 <xTaskPriorityDisinherit+0xa4>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	4a0c      	ldr	r2, [pc, #48]	; (8005094 <xTaskPriorityDisinherit+0xd4>)
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4a09      	ldr	r2, [pc, #36]	; (8005098 <xTaskPriorityDisinherit+0xd8>)
 8005072:	441a      	add	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fe fb39 	bl	80036f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005084:	697b      	ldr	r3, [r7, #20]
	}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000874 	.word	0x20000874
 8005094:	20000d50 	.word	0x20000d50
 8005098:	20000878 	.word	0x20000878

0800509c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050a6:	4b21      	ldr	r3, [pc, #132]	; (800512c <prvAddCurrentTaskToDelayedList+0x90>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ac:	4b20      	ldr	r3, [pc, #128]	; (8005130 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fb7a 	bl	80037ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d10a      	bne.n	80050d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4819      	ldr	r0, [pc, #100]	; (8005134 <prvAddCurrentTaskToDelayedList+0x98>)
 80050d0:	f7fe fb0f 	bl	80036f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050d4:	e026      	b.n	8005124 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d209      	bcs.n	8005102 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fe fb1d 	bl	800373a <vListInsert>
}
 8005100:	e010      	b.n	8005124 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005102:	4b0e      	ldr	r3, [pc, #56]	; (800513c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <prvAddCurrentTaskToDelayedList+0x94>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f7fe fb13 	bl	800373a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d202      	bcs.n	8005124 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800511e:	4a08      	ldr	r2, [pc, #32]	; (8005140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000d4c 	.word	0x20000d4c
 8005130:	20000874 	.word	0x20000874
 8005134:	20000d34 	.word	0x20000d34
 8005138:	20000d04 	.word	0x20000d04
 800513c:	20000d00 	.word	0x20000d00
 8005140:	20000d68 	.word	0x20000d68

08005144 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800514e:	f000 facb 	bl	80056e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005152:	4b1c      	ldr	r3, [pc, #112]	; (80051c4 <xTimerCreateTimerTask+0x80>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d021      	beq.n	800519e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005162:	1d3a      	adds	r2, r7, #4
 8005164:	f107 0108 	add.w	r1, r7, #8
 8005168:	f107 030c 	add.w	r3, r7, #12
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe fa79 	bl	8003664 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	9202      	str	r2, [sp, #8]
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	2302      	movs	r3, #2
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	460a      	mov	r2, r1
 8005184:	4910      	ldr	r1, [pc, #64]	; (80051c8 <xTimerCreateTimerTask+0x84>)
 8005186:	4811      	ldr	r0, [pc, #68]	; (80051cc <xTimerCreateTimerTask+0x88>)
 8005188:	f7ff f8de 	bl	8004348 <xTaskCreateStatic>
 800518c:	4603      	mov	r3, r0
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <xTimerCreateTimerTask+0x8c>)
 8005190:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <xTimerCreateTimerTask+0x8c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800519a:	2301      	movs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051ba:	697b      	ldr	r3, [r7, #20]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000da4 	.word	0x20000da4
 80051c8:	08006970 	.word	0x08006970
 80051cc:	080052f1 	.word	0x080052f1
 80051d0:	20000da8 	.word	0x20000da8

080051d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <xTimerGenericCommand+0x2e>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	623b      	str	r3, [r7, #32]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <xTimerGenericCommand+0x98>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02a      	beq.n	8005260 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b05      	cmp	r3, #5
 800521a:	dc18      	bgt.n	800524e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800521c:	f7ff feb2 	bl	8004f84 <xTaskGetSchedulerState>
 8005220:	4603      	mov	r3, r0
 8005222:	2b02      	cmp	r3, #2
 8005224:	d109      	bne.n	800523a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <xTimerGenericCommand+0x98>)
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	f107 0110 	add.w	r1, r7, #16
 800522e:	2300      	movs	r3, #0
 8005230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005232:	f7fe fc25 	bl	8003a80 <xQueueGenericSend>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24
 8005238:	e012      	b.n	8005260 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <xTimerGenericCommand+0x98>)
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	f107 0110 	add.w	r1, r7, #16
 8005242:	2300      	movs	r3, #0
 8005244:	2200      	movs	r2, #0
 8005246:	f7fe fc1b 	bl	8003a80 <xQueueGenericSend>
 800524a:	6278      	str	r0, [r7, #36]	; 0x24
 800524c:	e008      	b.n	8005260 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <xTimerGenericCommand+0x98>)
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	f107 0110 	add.w	r1, r7, #16
 8005256:	2300      	movs	r3, #0
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	f7fe fd0f 	bl	8003c7c <xQueueGenericSendFromISR>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005262:	4618      	mov	r0, r3
 8005264:	3728      	adds	r7, #40	; 0x28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000da4 	.word	0x20000da4

08005270 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800527a:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <prvProcessExpiredTimer+0x7c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3304      	adds	r3, #4
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fa8f 	bl	80037ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d122      	bne.n	80052dc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	18d1      	adds	r1, r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f000 f8c8 	bl	8005438 <prvInsertTimerInActiveList>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052ae:	2300      	movs	r3, #0
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	2100      	movs	r1, #0
 80052b8:	6978      	ldr	r0, [r7, #20]
 80052ba:	f7ff ff8b 	bl	80051d4 <xTimerGenericCommand>
 80052be:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	4798      	blx	r3
}
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20000d9c 	.word	0x20000d9c

080052f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052f8:	f107 0308 	add.w	r3, r7, #8
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f857 	bl	80053b0 <prvGetNextExpireTime>
 8005302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4619      	mov	r1, r3
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f803 	bl	8005314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800530e:	f000 f8d5 	bl	80054bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005312:	e7f1      	b.n	80052f8 <prvTimerTask+0x8>

08005314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800531e:	f7ff fa45 	bl	80047ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f866 	bl	80053f8 <prvSampleTimeNow>
 800532c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d130      	bne.n	8005396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <prvProcessTimerOrBlockTask+0x3c>
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	429a      	cmp	r2, r3
 8005340:	d806      	bhi.n	8005350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005342:	f7ff fa41 	bl	80047c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ff91 	bl	8005270 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800534e:	e024      	b.n	800539a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <prvProcessTimerOrBlockTask+0x90>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <prvProcessTimerOrBlockTask+0x94>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	4619      	mov	r1, r3
 8005376:	f7fe ffb3 	bl	80042e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800537a:	f7ff fa25 	bl	80047c8 <xTaskResumeAll>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <prvProcessTimerOrBlockTask+0x98>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
}
 8005394:	e001      	b.n	800539a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005396:	f7ff fa17 	bl	80047c8 <xTaskResumeAll>
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000da0 	.word	0x20000da0
 80053a8:	20000da4 	.word	0x20000da4
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053b8:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <prvGetNextExpireTime+0x44>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <prvGetNextExpireTime+0x44>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	e001      	b.n	80053e6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053e6:	68fb      	ldr	r3, [r7, #12]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20000d9c 	.word	0x20000d9c

080053f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005400:	f7ff fa80 	bl	8004904 <xTaskGetTickCount>
 8005404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <prvSampleTimeNow+0x3c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d205      	bcs.n	800541c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005410:	f000 f908 	bl	8005624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e002      	b.n	8005422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005422:	4a04      	ldr	r2, [pc, #16]	; (8005434 <prvSampleTimeNow+0x3c>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000dac 	.word	0x20000dac

08005438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	d812      	bhi.n	8005484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	1ad2      	subs	r2, r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e01b      	b.n	80054aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <prvInsertTimerInActiveList+0x7c>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe f95c 	bl	800373a <vListInsert>
 8005482:	e012      	b.n	80054aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d206      	bcs.n	800549a <prvInsertTimerInActiveList+0x62>
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e007      	b.n	80054aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <prvInsertTimerInActiveList+0x80>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fe f948 	bl	800373a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054aa:	697b      	ldr	r3, [r7, #20]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000da0 	.word	0x20000da0
 80054b8:	20000d9c 	.word	0x20000d9c

080054bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08e      	sub	sp, #56	; 0x38
 80054c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054c2:	e09d      	b.n	8005600 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	da18      	bge.n	80054fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	3304      	adds	r3, #4
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	61fb      	str	r3, [r7, #28]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f2:	6850      	ldr	r0, [r2, #4]
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	6892      	ldr	r2, [r2, #8]
 80054f8:	4611      	mov	r1, r2
 80054fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	db7d      	blt.n	80055fe <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	3304      	adds	r3, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe f94a 	bl	80037ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005518:	463b      	mov	r3, r7
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff ff6c 	bl	80053f8 <prvSampleTimeNow>
 8005520:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b09      	cmp	r3, #9
 8005526:	d86b      	bhi.n	8005600 <prvProcessReceivedCommands+0x144>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <prvProcessReceivedCommands+0x74>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005559 	.word	0x08005559
 8005534:	08005559 	.word	0x08005559
 8005538:	08005559 	.word	0x08005559
 800553c:	08005601 	.word	0x08005601
 8005540:	080055b5 	.word	0x080055b5
 8005544:	080055ed 	.word	0x080055ed
 8005548:	08005559 	.word	0x08005559
 800554c:	08005559 	.word	0x08005559
 8005550:	08005601 	.word	0x08005601
 8005554:	080055b5 	.word	0x080055b5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	18d1      	adds	r1, r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005566:	f7ff ff67 	bl	8005438 <prvInsertTimerInActiveList>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d047      	beq.n	8005600 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005576:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d13f      	bne.n	8005600 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	441a      	add	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2300      	movs	r3, #0
 800558e:	2100      	movs	r1, #0
 8005590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005592:	f7ff fe1f 	bl	80051d4 <xTimerGenericCommand>
 8005596:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d130      	bne.n	8005600 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	61bb      	str	r3, [r7, #24]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	617b      	str	r3, [r7, #20]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	18d1      	adds	r1, r2, r3
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e6:	f7ff ff27 	bl	8005438 <prvInsertTimerInActiveList>
					break;
 80055ea:	e009      	b.n	8005600 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80055f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f8:	f000 fbca 	bl	8005d90 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055fc:	e000      	b.n	8005600 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055fe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <prvProcessReceivedCommands+0x164>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	1d39      	adds	r1, r7, #4
 8005606:	2200      	movs	r2, #0
 8005608:	4618      	mov	r0, r3
 800560a:	f7fe fbcf 	bl	8003dac <xQueueReceive>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	f47f af57 	bne.w	80054c4 <prvProcessReceivedCommands+0x8>
	}
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	3730      	adds	r7, #48	; 0x30
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000da4 	.word	0x20000da4

08005624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800562a:	e045      	b.n	80056b8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562c:	4b2c      	ldr	r3, [pc, #176]	; (80056e0 <prvSwitchTimerLists+0xbc>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005636:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <prvSwitchTimerLists+0xbc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe f8b1 	bl	80037ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d12e      	bne.n	80056b8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	429a      	cmp	r2, r3
 800566a:	d90e      	bls.n	800568a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <prvSwitchTimerLists+0xbc>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe f859 	bl	800373a <vListInsert>
 8005688:	e016      	b.n	80056b8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800568a:	2300      	movs	r3, #0
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	2300      	movs	r3, #0
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	2100      	movs	r1, #0
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff fd9d 	bl	80051d4 <xTimerGenericCommand>
 800569a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	603b      	str	r3, [r7, #0]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <prvSwitchTimerLists+0xbc>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1b4      	bne.n	800562c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <prvSwitchTimerLists+0xbc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <prvSwitchTimerLists+0xc0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <prvSwitchTimerLists+0xbc>)
 80056ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056d0:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <prvSwitchTimerLists+0xc0>)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	6013      	str	r3, [r2, #0]
}
 80056d6:	bf00      	nop
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000d9c 	.word	0x20000d9c
 80056e4:	20000da0 	.word	0x20000da0

080056e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056ee:	f000 f969 	bl	80059c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <prvCheckForValidListAndQueue+0x60>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d120      	bne.n	800573c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056fa:	4814      	ldr	r0, [pc, #80]	; (800574c <prvCheckForValidListAndQueue+0x64>)
 80056fc:	f7fd ffcc 	bl	8003698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005700:	4813      	ldr	r0, [pc, #76]	; (8005750 <prvCheckForValidListAndQueue+0x68>)
 8005702:	f7fd ffc9 	bl	8003698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005706:	4b13      	ldr	r3, [pc, #76]	; (8005754 <prvCheckForValidListAndQueue+0x6c>)
 8005708:	4a10      	ldr	r2, [pc, #64]	; (800574c <prvCheckForValidListAndQueue+0x64>)
 800570a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800570c:	4b12      	ldr	r3, [pc, #72]	; (8005758 <prvCheckForValidListAndQueue+0x70>)
 800570e:	4a10      	ldr	r2, [pc, #64]	; (8005750 <prvCheckForValidListAndQueue+0x68>)
 8005710:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005712:	2300      	movs	r3, #0
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4b11      	ldr	r3, [pc, #68]	; (800575c <prvCheckForValidListAndQueue+0x74>)
 8005718:	4a11      	ldr	r2, [pc, #68]	; (8005760 <prvCheckForValidListAndQueue+0x78>)
 800571a:	2110      	movs	r1, #16
 800571c:	200a      	movs	r0, #10
 800571e:	f7fe f8d7 	bl	80038d0 <xQueueGenericCreateStatic>
 8005722:	4603      	mov	r3, r0
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <prvCheckForValidListAndQueue+0x60>)
 8005726:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005728:	4b07      	ldr	r3, [pc, #28]	; (8005748 <prvCheckForValidListAndQueue+0x60>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <prvCheckForValidListAndQueue+0x60>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	490b      	ldr	r1, [pc, #44]	; (8005764 <prvCheckForValidListAndQueue+0x7c>)
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe fda8 	bl	800428c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800573c:	f000 f972 	bl	8005a24 <vPortExitCritical>
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000da4 	.word	0x20000da4
 800574c:	20000d74 	.word	0x20000d74
 8005750:	20000d88 	.word	0x20000d88
 8005754:	20000d9c 	.word	0x20000d9c
 8005758:	20000da0 	.word	0x20000da0
 800575c:	20000e50 	.word	0x20000e50
 8005760:	20000db0 	.word	0x20000db0
 8005764:	08006978 	.word	0x08006978

08005768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b04      	subs	r3, #4
 8005778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b04      	subs	r3, #4
 8005786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3b04      	subs	r3, #4
 8005796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005798:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <pxPortInitialiseStack+0x64>)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b14      	subs	r3, #20
 80057a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b04      	subs	r3, #4
 80057ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f06f 0202 	mvn.w	r2, #2
 80057b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3b20      	subs	r3, #32
 80057bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057be:	68fb      	ldr	r3, [r7, #12]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	080057d1 	.word	0x080057d1

080057d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <prvTaskExitError+0x54>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d00a      	beq.n	80057fa <prvTaskExitError+0x2a>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	60fb      	str	r3, [r7, #12]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <prvTaskExitError+0x28>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	60bb      	str	r3, [r7, #8]
}
 800580c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800580e:	bf00      	nop
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0fc      	beq.n	8005810 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005816:	bf00      	nop
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	2000000c 	.word	0x2000000c
	...

08005830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <pxCurrentTCBConst2>)
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	6808      	ldr	r0, [r1, #0]
 8005836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583a:	f380 8809 	msr	PSP, r0
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8811 	msr	BASEPRI, r0
 800584a:	4770      	bx	lr
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst2>:
 8005850:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005858:	4808      	ldr	r0, [pc, #32]	; (800587c <prvPortStartFirstTask+0x24>)
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	6800      	ldr	r0, [r0, #0]
 800585e:	f380 8808 	msr	MSP, r0
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8814 	msr	CONTROL, r0
 800586a:	b662      	cpsie	i
 800586c:	b661      	cpsie	f
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	df00      	svc	0
 8005878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800587a:	bf00      	nop
 800587c:	e000ed08 	.word	0xe000ed08

08005880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005886:	4b46      	ldr	r3, [pc, #280]	; (80059a0 <xPortStartScheduler+0x120>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a46      	ldr	r2, [pc, #280]	; (80059a4 <xPortStartScheduler+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d10a      	bne.n	80058a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	613b      	str	r3, [r7, #16]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058a6:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <xPortStartScheduler+0x120>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a3f      	ldr	r2, [pc, #252]	; (80059a8 <xPortStartScheduler+0x128>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10a      	bne.n	80058c6 <xPortStartScheduler+0x46>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60fb      	str	r3, [r7, #12]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058c6:	4b39      	ldr	r3, [pc, #228]	; (80059ac <xPortStartScheduler+0x12c>)
 80058c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <xPortStartScheduler+0x130>)
 80058ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <xPortStartScheduler+0x134>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058f4:	e009      	b.n	800590a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80058f6:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <xPortStartScheduler+0x134>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	4a2d      	ldr	r2, [pc, #180]	; (80059b4 <xPortStartScheduler+0x134>)
 80058fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b80      	cmp	r3, #128	; 0x80
 8005914:	d0ef      	beq.n	80058f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005916:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <xPortStartScheduler+0x134>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1c3 0307 	rsb	r3, r3, #7
 800591e:	2b04      	cmp	r3, #4
 8005920:	d00a      	beq.n	8005938 <xPortStartScheduler+0xb8>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60bb      	str	r3, [r7, #8]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005938:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <xPortStartScheduler+0x134>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <xPortStartScheduler+0x134>)
 8005940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <xPortStartScheduler+0x134>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800594a:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <xPortStartScheduler+0x134>)
 800594c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <xPortStartScheduler+0x138>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <xPortStartScheduler+0x138>)
 800595c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <xPortStartScheduler+0x138>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <xPortStartScheduler+0x138>)
 8005968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800596c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800596e:	f000 f8dd 	bl	8005b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <xPortStartScheduler+0x13c>)
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005978:	f000 f8fc 	bl	8005b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <xPortStartScheduler+0x140>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a0f      	ldr	r2, [pc, #60]	; (80059c0 <xPortStartScheduler+0x140>)
 8005982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005988:	f7ff ff66 	bl	8005858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800598c:	f7ff f888 	bl	8004aa0 <vTaskSwitchContext>
	prvTaskExitError();
 8005990:	f7ff ff1e 	bl	80057d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	e000ed00 	.word	0xe000ed00
 80059a4:	410fc271 	.word	0x410fc271
 80059a8:	410fc270 	.word	0x410fc270
 80059ac:	e000e400 	.word	0xe000e400
 80059b0:	20000ea0 	.word	0x20000ea0
 80059b4:	20000ea4 	.word	0x20000ea4
 80059b8:	e000ed20 	.word	0xe000ed20
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	e000ef34 	.word	0xe000ef34

080059c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	607b      	str	r3, [r7, #4]
}
 80059dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059de:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <vPortEnterCritical+0x58>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a0d      	ldr	r2, [pc, #52]	; (8005a1c <vPortEnterCritical+0x58>)
 80059e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <vPortEnterCritical+0x58>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d10f      	bne.n	8005a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <vPortEnterCritical+0x5c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	603b      	str	r3, [r7, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <vPortEnterCritical+0x4a>
	}
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <vPortExitCritical+0x50>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <vPortExitCritical+0x24>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	607b      	str	r3, [r7, #4]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <vPortExitCritical+0x50>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <vPortExitCritical+0x50>)
 8005a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <vPortExitCritical+0x50>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <vPortExitCritical+0x42>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f383 8811 	msr	BASEPRI, r3
}
 8005a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	2000000c 	.word	0x2000000c
	...

08005a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a80:	f3ef 8009 	mrs	r0, PSP
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <pxCurrentTCBConst>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f01e 0f10 	tst.w	lr, #16
 8005a90:	bf08      	it	eq
 8005a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	6010      	str	r0, [r2, #0]
 8005a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aa4:	f380 8811 	msr	BASEPRI, r0
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f7fe fff6 	bl	8004aa0 <vTaskSwitchContext>
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f380 8811 	msr	BASEPRI, r0
 8005abc:	bc09      	pop	{r0, r3}
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	6808      	ldr	r0, [r1, #0]
 8005ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac6:	f01e 0f10 	tst.w	lr, #16
 8005aca:	bf08      	it	eq
 8005acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ad0:	f380 8809 	msr	PSP, r0
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w

08005ae0 <pxCurrentTCBConst>:
 8005ae0:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop

08005ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
}
 8005b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b02:	f7fe ff0f 	bl	8004924 <xTaskIncrementTick>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <SysTick_Handler+0x40>)
 8005b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
}
 8005b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <vPortSetupTimerInterrupt+0x34>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <vPortSetupTimerInterrupt+0x38>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <vPortSetupTimerInterrupt+0x3c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <vPortSetupTimerInterrupt+0x40>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	099b      	lsrs	r3, r3, #6
 8005b48:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <vPortSetupTimerInterrupt+0x44>)
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b4e:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <vPortSetupTimerInterrupt+0x34>)
 8005b50:	2207      	movs	r2, #7
 8005b52:	601a      	str	r2, [r3, #0]
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	e000e010 	.word	0xe000e010
 8005b64:	e000e018 	.word	0xe000e018
 8005b68:	20000000 	.word	0x20000000
 8005b6c:	10624dd3 	.word	0x10624dd3
 8005b70:	e000e014 	.word	0xe000e014

08005b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b84 <vPortEnableVFP+0x10>
 8005b78:	6801      	ldr	r1, [r0, #0]
 8005b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b7e:	6001      	str	r1, [r0, #0]
 8005b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b82:	bf00      	nop
 8005b84:	e000ed88 	.word	0xe000ed88

08005b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b8e:	f3ef 8305 	mrs	r3, IPSR
 8005b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d914      	bls.n	8005bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <vPortValidateInterruptPriority+0x70>)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ba4:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <vPortValidateInterruptPriority+0x74>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	7afa      	ldrb	r2, [r7, #11]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d20a      	bcs.n	8005bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	607b      	str	r3, [r7, #4]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <vPortValidateInterruptPriority+0x78>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <vPortValidateInterruptPriority+0x7c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d90a      	bls.n	8005bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	603b      	str	r3, [r7, #0]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <vPortValidateInterruptPriority+0x60>
	}
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	e000e3f0 	.word	0xe000e3f0
 8005bfc:	20000ea0 	.word	0x20000ea0
 8005c00:	e000ed0c 	.word	0xe000ed0c
 8005c04:	20000ea4 	.word	0x20000ea4

08005c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	; 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c14:	f7fe fdca 	bl	80047ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c18:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <pvPortMalloc+0x174>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c20:	f000 f910 	bl	8005e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c24:	4b56      	ldr	r3, [pc, #344]	; (8005d80 <pvPortMalloc+0x178>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f040 808e 	bne.w	8005d4e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01d      	beq.n	8005c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c38:	2208      	movs	r2, #8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d014      	beq.n	8005c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f023 0307 	bic.w	r3, r3, #7
 8005c50:	3308      	adds	r3, #8
 8005c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <pvPortMalloc+0x6c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	617b      	str	r3, [r7, #20]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d069      	beq.n	8005d4e <pvPortMalloc+0x146>
 8005c7a:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <pvPortMalloc+0x17c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d864      	bhi.n	8005d4e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c84:	4b40      	ldr	r3, [pc, #256]	; (8005d88 <pvPortMalloc+0x180>)
 8005c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c88:	4b3f      	ldr	r3, [pc, #252]	; (8005d88 <pvPortMalloc+0x180>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c8e:	e004      	b.n	8005c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d903      	bls.n	8005cac <pvPortMalloc+0xa4>
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f1      	bne.n	8005c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cac:	4b33      	ldr	r3, [pc, #204]	; (8005d7c <pvPortMalloc+0x174>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d04b      	beq.n	8005d4e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2208      	movs	r2, #8
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d91f      	bls.n	8005d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <pvPortMalloc+0xf8>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	613b      	str	r3, [r7, #16]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d12:	69b8      	ldr	r0, [r7, #24]
 8005d14:	f000 f8f8 	bl	8005f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d18:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <pvPortMalloc+0x17c>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <pvPortMalloc+0x17c>)
 8005d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d26:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <pvPortMalloc+0x17c>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <pvPortMalloc+0x184>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d203      	bcs.n	8005d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <pvPortMalloc+0x17c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <pvPortMalloc+0x184>)
 8005d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <pvPortMalloc+0x178>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d4e:	f7fe fd3b 	bl	80047c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <pvPortMalloc+0x16a>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60fb      	str	r3, [r7, #12]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <pvPortMalloc+0x168>
	return pvReturn;
 8005d72:	69fb      	ldr	r3, [r7, #28]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3728      	adds	r7, #40	; 0x28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20001ab0 	.word	0x20001ab0
 8005d80:	20001abc 	.word	0x20001abc
 8005d84:	20001ab4 	.word	0x20001ab4
 8005d88:	20001aa8 	.word	0x20001aa8
 8005d8c:	20001ab8 	.word	0x20001ab8

08005d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d048      	beq.n	8005e34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005da2:	2308      	movs	r3, #8
 8005da4:	425b      	negs	r3, r3
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4b21      	ldr	r3, [pc, #132]	; (8005e3c <vPortFree+0xac>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <vPortFree+0x44>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60fb      	str	r3, [r7, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <vPortFree+0x62>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60bb      	str	r3, [r7, #8]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <vPortFree+0xac>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d019      	beq.n	8005e34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d115      	bne.n	8005e34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <vPortFree+0xac>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	43db      	mvns	r3, r3
 8005e12:	401a      	ands	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e18:	f7fe fcc8 	bl	80047ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <vPortFree+0xb0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <vPortFree+0xb0>)
 8005e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e2a:	6938      	ldr	r0, [r7, #16]
 8005e2c:	f000 f86c 	bl	8005f08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e30:	f7fe fcca 	bl	80047c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20001abc 	.word	0x20001abc
 8005e40:	20001ab4 	.word	0x20001ab4

08005e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <prvHeapInit+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3307      	adds	r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0307 	bic.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <prvHeapInit+0xac>)
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <prvHeapInit+0xb0>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <prvHeapInit+0xb0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e90:	2208      	movs	r2, #8
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <prvHeapInit+0xb4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <prvHeapInit+0xb8>)
 8005ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <prvHeapInit+0xbc>)
 8005eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <prvHeapInit+0xc0>)
 8005ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ee2:	601a      	str	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000ea8 	.word	0x20000ea8
 8005ef4:	20001aa8 	.word	0x20001aa8
 8005ef8:	20001ab0 	.word	0x20001ab0
 8005efc:	20001ab8 	.word	0x20001ab8
 8005f00:	20001ab4 	.word	0x20001ab4
 8005f04:	20001abc 	.word	0x20001abc

08005f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f10:	4b28      	ldr	r3, [pc, #160]	; (8005fb4 <prvInsertBlockIntoFreeList+0xac>)
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e002      	b.n	8005f1c <prvInsertBlockIntoFreeList+0x14>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d8f7      	bhi.n	8005f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4413      	add	r3, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d108      	bne.n	8005f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	441a      	add	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d118      	bne.n	8005f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d00d      	beq.n	8005f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e008      	b.n	8005f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f86:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e003      	b.n	8005f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d002      	beq.n	8005fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20001aa8 	.word	0x20001aa8
 8005fb8:	20001ab0 	.word	0x20001ab0

08005fbc <__errno>:
 8005fbc:	4b01      	ldr	r3, [pc, #4]	; (8005fc4 <__errno+0x8>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000010 	.word	0x20000010

08005fc8 <__libc_init_array>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4d0d      	ldr	r5, [pc, #52]	; (8006000 <__libc_init_array+0x38>)
 8005fcc:	4c0d      	ldr	r4, [pc, #52]	; (8006004 <__libc_init_array+0x3c>)
 8005fce:	1b64      	subs	r4, r4, r5
 8005fd0:	10a4      	asrs	r4, r4, #2
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	42a6      	cmp	r6, r4
 8005fd6:	d109      	bne.n	8005fec <__libc_init_array+0x24>
 8005fd8:	4d0b      	ldr	r5, [pc, #44]	; (8006008 <__libc_init_array+0x40>)
 8005fda:	4c0c      	ldr	r4, [pc, #48]	; (800600c <__libc_init_array+0x44>)
 8005fdc:	f000 fc8e 	bl	80068fc <_init>
 8005fe0:	1b64      	subs	r4, r4, r5
 8005fe2:	10a4      	asrs	r4, r4, #2
 8005fe4:	2600      	movs	r6, #0
 8005fe6:	42a6      	cmp	r6, r4
 8005fe8:	d105      	bne.n	8005ff6 <__libc_init_array+0x2e>
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff0:	4798      	blx	r3
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7ee      	b.n	8005fd4 <__libc_init_array+0xc>
 8005ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffa:	4798      	blx	r3
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	e7f2      	b.n	8005fe6 <__libc_init_array+0x1e>
 8006000:	08006a70 	.word	0x08006a70
 8006004:	08006a70 	.word	0x08006a70
 8006008:	08006a70 	.word	0x08006a70
 800600c:	08006a74 	.word	0x08006a74

08006010 <memcpy>:
 8006010:	440a      	add	r2, r1
 8006012:	4291      	cmp	r1, r2
 8006014:	f100 33ff 	add.w	r3, r0, #4294967295
 8006018:	d100      	bne.n	800601c <memcpy+0xc>
 800601a:	4770      	bx	lr
 800601c:	b510      	push	{r4, lr}
 800601e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006026:	4291      	cmp	r1, r2
 8006028:	d1f9      	bne.n	800601e <memcpy+0xe>
 800602a:	bd10      	pop	{r4, pc}

0800602c <memset>:
 800602c:	4402      	add	r2, r0
 800602e:	4603      	mov	r3, r0
 8006030:	4293      	cmp	r3, r2
 8006032:	d100      	bne.n	8006036 <memset+0xa>
 8006034:	4770      	bx	lr
 8006036:	f803 1b01 	strb.w	r1, [r3], #1
 800603a:	e7f9      	b.n	8006030 <memset+0x4>

0800603c <siprintf>:
 800603c:	b40e      	push	{r1, r2, r3}
 800603e:	b500      	push	{lr}
 8006040:	b09c      	sub	sp, #112	; 0x70
 8006042:	ab1d      	add	r3, sp, #116	; 0x74
 8006044:	9002      	str	r0, [sp, #8]
 8006046:	9006      	str	r0, [sp, #24]
 8006048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800604c:	4809      	ldr	r0, [pc, #36]	; (8006074 <siprintf+0x38>)
 800604e:	9107      	str	r1, [sp, #28]
 8006050:	9104      	str	r1, [sp, #16]
 8006052:	4909      	ldr	r1, [pc, #36]	; (8006078 <siprintf+0x3c>)
 8006054:	f853 2b04 	ldr.w	r2, [r3], #4
 8006058:	9105      	str	r1, [sp, #20]
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	a902      	add	r1, sp, #8
 8006060:	f000 f868 	bl	8006134 <_svfiprintf_r>
 8006064:	9b02      	ldr	r3, [sp, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	b01c      	add	sp, #112	; 0x70
 800606c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006070:	b003      	add	sp, #12
 8006072:	4770      	bx	lr
 8006074:	20000010 	.word	0x20000010
 8006078:	ffff0208 	.word	0xffff0208

0800607c <__ssputs_r>:
 800607c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006080:	688e      	ldr	r6, [r1, #8]
 8006082:	429e      	cmp	r6, r3
 8006084:	4682      	mov	sl, r0
 8006086:	460c      	mov	r4, r1
 8006088:	4690      	mov	r8, r2
 800608a:	461f      	mov	r7, r3
 800608c:	d838      	bhi.n	8006100 <__ssputs_r+0x84>
 800608e:	898a      	ldrh	r2, [r1, #12]
 8006090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006094:	d032      	beq.n	80060fc <__ssputs_r+0x80>
 8006096:	6825      	ldr	r5, [r4, #0]
 8006098:	6909      	ldr	r1, [r1, #16]
 800609a:	eba5 0901 	sub.w	r9, r5, r1
 800609e:	6965      	ldr	r5, [r4, #20]
 80060a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060a8:	3301      	adds	r3, #1
 80060aa:	444b      	add	r3, r9
 80060ac:	106d      	asrs	r5, r5, #1
 80060ae:	429d      	cmp	r5, r3
 80060b0:	bf38      	it	cc
 80060b2:	461d      	movcc	r5, r3
 80060b4:	0553      	lsls	r3, r2, #21
 80060b6:	d531      	bpl.n	800611c <__ssputs_r+0xa0>
 80060b8:	4629      	mov	r1, r5
 80060ba:	f000 fb55 	bl	8006768 <_malloc_r>
 80060be:	4606      	mov	r6, r0
 80060c0:	b950      	cbnz	r0, 80060d8 <__ssputs_r+0x5c>
 80060c2:	230c      	movs	r3, #12
 80060c4:	f8ca 3000 	str.w	r3, [sl]
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	464a      	mov	r2, r9
 80060dc:	f7ff ff98 	bl	8006010 <memcpy>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	6126      	str	r6, [r4, #16]
 80060ee:	6165      	str	r5, [r4, #20]
 80060f0:	444e      	add	r6, r9
 80060f2:	eba5 0509 	sub.w	r5, r5, r9
 80060f6:	6026      	str	r6, [r4, #0]
 80060f8:	60a5      	str	r5, [r4, #8]
 80060fa:	463e      	mov	r6, r7
 80060fc:	42be      	cmp	r6, r7
 80060fe:	d900      	bls.n	8006102 <__ssputs_r+0x86>
 8006100:	463e      	mov	r6, r7
 8006102:	6820      	ldr	r0, [r4, #0]
 8006104:	4632      	mov	r2, r6
 8006106:	4641      	mov	r1, r8
 8006108:	f000 faa8 	bl	800665c <memmove>
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	1b9b      	subs	r3, r3, r6
 8006110:	60a3      	str	r3, [r4, #8]
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	4433      	add	r3, r6
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2000      	movs	r0, #0
 800611a:	e7db      	b.n	80060d4 <__ssputs_r+0x58>
 800611c:	462a      	mov	r2, r5
 800611e:	f000 fb97 	bl	8006850 <_realloc_r>
 8006122:	4606      	mov	r6, r0
 8006124:	2800      	cmp	r0, #0
 8006126:	d1e1      	bne.n	80060ec <__ssputs_r+0x70>
 8006128:	6921      	ldr	r1, [r4, #16]
 800612a:	4650      	mov	r0, sl
 800612c:	f000 fab0 	bl	8006690 <_free_r>
 8006130:	e7c7      	b.n	80060c2 <__ssputs_r+0x46>
	...

08006134 <_svfiprintf_r>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	4698      	mov	r8, r3
 800613a:	898b      	ldrh	r3, [r1, #12]
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	b09d      	sub	sp, #116	; 0x74
 8006140:	4607      	mov	r7, r0
 8006142:	460d      	mov	r5, r1
 8006144:	4614      	mov	r4, r2
 8006146:	d50e      	bpl.n	8006166 <_svfiprintf_r+0x32>
 8006148:	690b      	ldr	r3, [r1, #16]
 800614a:	b963      	cbnz	r3, 8006166 <_svfiprintf_r+0x32>
 800614c:	2140      	movs	r1, #64	; 0x40
 800614e:	f000 fb0b 	bl	8006768 <_malloc_r>
 8006152:	6028      	str	r0, [r5, #0]
 8006154:	6128      	str	r0, [r5, #16]
 8006156:	b920      	cbnz	r0, 8006162 <_svfiprintf_r+0x2e>
 8006158:	230c      	movs	r3, #12
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	e0d1      	b.n	8006306 <_svfiprintf_r+0x1d2>
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	616b      	str	r3, [r5, #20]
 8006166:	2300      	movs	r3, #0
 8006168:	9309      	str	r3, [sp, #36]	; 0x24
 800616a:	2320      	movs	r3, #32
 800616c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006170:	f8cd 800c 	str.w	r8, [sp, #12]
 8006174:	2330      	movs	r3, #48	; 0x30
 8006176:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006320 <_svfiprintf_r+0x1ec>
 800617a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800617e:	f04f 0901 	mov.w	r9, #1
 8006182:	4623      	mov	r3, r4
 8006184:	469a      	mov	sl, r3
 8006186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618a:	b10a      	cbz	r2, 8006190 <_svfiprintf_r+0x5c>
 800618c:	2a25      	cmp	r2, #37	; 0x25
 800618e:	d1f9      	bne.n	8006184 <_svfiprintf_r+0x50>
 8006190:	ebba 0b04 	subs.w	fp, sl, r4
 8006194:	d00b      	beq.n	80061ae <_svfiprintf_r+0x7a>
 8006196:	465b      	mov	r3, fp
 8006198:	4622      	mov	r2, r4
 800619a:	4629      	mov	r1, r5
 800619c:	4638      	mov	r0, r7
 800619e:	f7ff ff6d 	bl	800607c <__ssputs_r>
 80061a2:	3001      	adds	r0, #1
 80061a4:	f000 80aa 	beq.w	80062fc <_svfiprintf_r+0x1c8>
 80061a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061aa:	445a      	add	r2, fp
 80061ac:	9209      	str	r2, [sp, #36]	; 0x24
 80061ae:	f89a 3000 	ldrb.w	r3, [sl]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 80a2 	beq.w	80062fc <_svfiprintf_r+0x1c8>
 80061b8:	2300      	movs	r3, #0
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c2:	f10a 0a01 	add.w	sl, sl, #1
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	9307      	str	r3, [sp, #28]
 80061ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ce:	931a      	str	r3, [sp, #104]	; 0x68
 80061d0:	4654      	mov	r4, sl
 80061d2:	2205      	movs	r2, #5
 80061d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d8:	4851      	ldr	r0, [pc, #324]	; (8006320 <_svfiprintf_r+0x1ec>)
 80061da:	f7fa f801 	bl	80001e0 <memchr>
 80061de:	9a04      	ldr	r2, [sp, #16]
 80061e0:	b9d8      	cbnz	r0, 800621a <_svfiprintf_r+0xe6>
 80061e2:	06d0      	lsls	r0, r2, #27
 80061e4:	bf44      	itt	mi
 80061e6:	2320      	movmi	r3, #32
 80061e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ec:	0711      	lsls	r1, r2, #28
 80061ee:	bf44      	itt	mi
 80061f0:	232b      	movmi	r3, #43	; 0x2b
 80061f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061f6:	f89a 3000 	ldrb.w	r3, [sl]
 80061fa:	2b2a      	cmp	r3, #42	; 0x2a
 80061fc:	d015      	beq.n	800622a <_svfiprintf_r+0xf6>
 80061fe:	9a07      	ldr	r2, [sp, #28]
 8006200:	4654      	mov	r4, sl
 8006202:	2000      	movs	r0, #0
 8006204:	f04f 0c0a 	mov.w	ip, #10
 8006208:	4621      	mov	r1, r4
 800620a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800620e:	3b30      	subs	r3, #48	; 0x30
 8006210:	2b09      	cmp	r3, #9
 8006212:	d94e      	bls.n	80062b2 <_svfiprintf_r+0x17e>
 8006214:	b1b0      	cbz	r0, 8006244 <_svfiprintf_r+0x110>
 8006216:	9207      	str	r2, [sp, #28]
 8006218:	e014      	b.n	8006244 <_svfiprintf_r+0x110>
 800621a:	eba0 0308 	sub.w	r3, r0, r8
 800621e:	fa09 f303 	lsl.w	r3, r9, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	46a2      	mov	sl, r4
 8006228:	e7d2      	b.n	80061d0 <_svfiprintf_r+0x9c>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	1d19      	adds	r1, r3, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	9103      	str	r1, [sp, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	bfbb      	ittet	lt
 8006236:	425b      	neglt	r3, r3
 8006238:	f042 0202 	orrlt.w	r2, r2, #2
 800623c:	9307      	strge	r3, [sp, #28]
 800623e:	9307      	strlt	r3, [sp, #28]
 8006240:	bfb8      	it	lt
 8006242:	9204      	strlt	r2, [sp, #16]
 8006244:	7823      	ldrb	r3, [r4, #0]
 8006246:	2b2e      	cmp	r3, #46	; 0x2e
 8006248:	d10c      	bne.n	8006264 <_svfiprintf_r+0x130>
 800624a:	7863      	ldrb	r3, [r4, #1]
 800624c:	2b2a      	cmp	r3, #42	; 0x2a
 800624e:	d135      	bne.n	80062bc <_svfiprintf_r+0x188>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	9203      	str	r2, [sp, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	bfb8      	it	lt
 800625c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006260:	3402      	adds	r4, #2
 8006262:	9305      	str	r3, [sp, #20]
 8006264:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006330 <_svfiprintf_r+0x1fc>
 8006268:	7821      	ldrb	r1, [r4, #0]
 800626a:	2203      	movs	r2, #3
 800626c:	4650      	mov	r0, sl
 800626e:	f7f9 ffb7 	bl	80001e0 <memchr>
 8006272:	b140      	cbz	r0, 8006286 <_svfiprintf_r+0x152>
 8006274:	2340      	movs	r3, #64	; 0x40
 8006276:	eba0 000a 	sub.w	r0, r0, sl
 800627a:	fa03 f000 	lsl.w	r0, r3, r0
 800627e:	9b04      	ldr	r3, [sp, #16]
 8006280:	4303      	orrs	r3, r0
 8006282:	3401      	adds	r4, #1
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628a:	4826      	ldr	r0, [pc, #152]	; (8006324 <_svfiprintf_r+0x1f0>)
 800628c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006290:	2206      	movs	r2, #6
 8006292:	f7f9 ffa5 	bl	80001e0 <memchr>
 8006296:	2800      	cmp	r0, #0
 8006298:	d038      	beq.n	800630c <_svfiprintf_r+0x1d8>
 800629a:	4b23      	ldr	r3, [pc, #140]	; (8006328 <_svfiprintf_r+0x1f4>)
 800629c:	bb1b      	cbnz	r3, 80062e6 <_svfiprintf_r+0x1b2>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	3307      	adds	r3, #7
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	3308      	adds	r3, #8
 80062a8:	9303      	str	r3, [sp, #12]
 80062aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ac:	4433      	add	r3, r6
 80062ae:	9309      	str	r3, [sp, #36]	; 0x24
 80062b0:	e767      	b.n	8006182 <_svfiprintf_r+0x4e>
 80062b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80062b6:	460c      	mov	r4, r1
 80062b8:	2001      	movs	r0, #1
 80062ba:	e7a5      	b.n	8006208 <_svfiprintf_r+0xd4>
 80062bc:	2300      	movs	r3, #0
 80062be:	3401      	adds	r4, #1
 80062c0:	9305      	str	r3, [sp, #20]
 80062c2:	4619      	mov	r1, r3
 80062c4:	f04f 0c0a 	mov.w	ip, #10
 80062c8:	4620      	mov	r0, r4
 80062ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ce:	3a30      	subs	r2, #48	; 0x30
 80062d0:	2a09      	cmp	r2, #9
 80062d2:	d903      	bls.n	80062dc <_svfiprintf_r+0x1a8>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0c5      	beq.n	8006264 <_svfiprintf_r+0x130>
 80062d8:	9105      	str	r1, [sp, #20]
 80062da:	e7c3      	b.n	8006264 <_svfiprintf_r+0x130>
 80062dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e0:	4604      	mov	r4, r0
 80062e2:	2301      	movs	r3, #1
 80062e4:	e7f0      	b.n	80062c8 <_svfiprintf_r+0x194>
 80062e6:	ab03      	add	r3, sp, #12
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	462a      	mov	r2, r5
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <_svfiprintf_r+0x1f8>)
 80062ee:	a904      	add	r1, sp, #16
 80062f0:	4638      	mov	r0, r7
 80062f2:	f3af 8000 	nop.w
 80062f6:	1c42      	adds	r2, r0, #1
 80062f8:	4606      	mov	r6, r0
 80062fa:	d1d6      	bne.n	80062aa <_svfiprintf_r+0x176>
 80062fc:	89ab      	ldrh	r3, [r5, #12]
 80062fe:	065b      	lsls	r3, r3, #25
 8006300:	f53f af2c 	bmi.w	800615c <_svfiprintf_r+0x28>
 8006304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006306:	b01d      	add	sp, #116	; 0x74
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	462a      	mov	r2, r5
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <_svfiprintf_r+0x1f8>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4638      	mov	r0, r7
 8006318:	f000 f87a 	bl	8006410 <_printf_i>
 800631c:	e7eb      	b.n	80062f6 <_svfiprintf_r+0x1c2>
 800631e:	bf00      	nop
 8006320:	08006a3c 	.word	0x08006a3c
 8006324:	08006a46 	.word	0x08006a46
 8006328:	00000000 	.word	0x00000000
 800632c:	0800607d 	.word	0x0800607d
 8006330:	08006a42 	.word	0x08006a42

08006334 <_printf_common>:
 8006334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	4616      	mov	r6, r2
 800633a:	4699      	mov	r9, r3
 800633c:	688a      	ldr	r2, [r1, #8]
 800633e:	690b      	ldr	r3, [r1, #16]
 8006340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006344:	4293      	cmp	r3, r2
 8006346:	bfb8      	it	lt
 8006348:	4613      	movlt	r3, r2
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006350:	4607      	mov	r7, r0
 8006352:	460c      	mov	r4, r1
 8006354:	b10a      	cbz	r2, 800635a <_printf_common+0x26>
 8006356:	3301      	adds	r3, #1
 8006358:	6033      	str	r3, [r6, #0]
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	0699      	lsls	r1, r3, #26
 800635e:	bf42      	ittt	mi
 8006360:	6833      	ldrmi	r3, [r6, #0]
 8006362:	3302      	addmi	r3, #2
 8006364:	6033      	strmi	r3, [r6, #0]
 8006366:	6825      	ldr	r5, [r4, #0]
 8006368:	f015 0506 	ands.w	r5, r5, #6
 800636c:	d106      	bne.n	800637c <_printf_common+0x48>
 800636e:	f104 0a19 	add.w	sl, r4, #25
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	6832      	ldr	r2, [r6, #0]
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	42ab      	cmp	r3, r5
 800637a:	dc26      	bgt.n	80063ca <_printf_common+0x96>
 800637c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006380:	1e13      	subs	r3, r2, #0
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	bf18      	it	ne
 8006386:	2301      	movne	r3, #1
 8006388:	0692      	lsls	r2, r2, #26
 800638a:	d42b      	bmi.n	80063e4 <_printf_common+0xb0>
 800638c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006390:	4649      	mov	r1, r9
 8006392:	4638      	mov	r0, r7
 8006394:	47c0      	blx	r8
 8006396:	3001      	adds	r0, #1
 8006398:	d01e      	beq.n	80063d8 <_printf_common+0xa4>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	68e5      	ldr	r5, [r4, #12]
 800639e:	6832      	ldr	r2, [r6, #0]
 80063a0:	f003 0306 	and.w	r3, r3, #6
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	bf08      	it	eq
 80063a8:	1aad      	subeq	r5, r5, r2
 80063aa:	68a3      	ldr	r3, [r4, #8]
 80063ac:	6922      	ldr	r2, [r4, #16]
 80063ae:	bf0c      	ite	eq
 80063b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063b4:	2500      	movne	r5, #0
 80063b6:	4293      	cmp	r3, r2
 80063b8:	bfc4      	itt	gt
 80063ba:	1a9b      	subgt	r3, r3, r2
 80063bc:	18ed      	addgt	r5, r5, r3
 80063be:	2600      	movs	r6, #0
 80063c0:	341a      	adds	r4, #26
 80063c2:	42b5      	cmp	r5, r6
 80063c4:	d11a      	bne.n	80063fc <_printf_common+0xc8>
 80063c6:	2000      	movs	r0, #0
 80063c8:	e008      	b.n	80063dc <_printf_common+0xa8>
 80063ca:	2301      	movs	r3, #1
 80063cc:	4652      	mov	r2, sl
 80063ce:	4649      	mov	r1, r9
 80063d0:	4638      	mov	r0, r7
 80063d2:	47c0      	blx	r8
 80063d4:	3001      	adds	r0, #1
 80063d6:	d103      	bne.n	80063e0 <_printf_common+0xac>
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e0:	3501      	adds	r5, #1
 80063e2:	e7c6      	b.n	8006372 <_printf_common+0x3e>
 80063e4:	18e1      	adds	r1, r4, r3
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	2030      	movs	r0, #48	; 0x30
 80063ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ee:	4422      	add	r2, r4
 80063f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063f8:	3302      	adds	r3, #2
 80063fa:	e7c7      	b.n	800638c <_printf_common+0x58>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4622      	mov	r2, r4
 8006400:	4649      	mov	r1, r9
 8006402:	4638      	mov	r0, r7
 8006404:	47c0      	blx	r8
 8006406:	3001      	adds	r0, #1
 8006408:	d0e6      	beq.n	80063d8 <_printf_common+0xa4>
 800640a:	3601      	adds	r6, #1
 800640c:	e7d9      	b.n	80063c2 <_printf_common+0x8e>
	...

08006410 <_printf_i>:
 8006410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006414:	7e0f      	ldrb	r7, [r1, #24]
 8006416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006418:	2f78      	cmp	r7, #120	; 0x78
 800641a:	4691      	mov	r9, r2
 800641c:	4680      	mov	r8, r0
 800641e:	460c      	mov	r4, r1
 8006420:	469a      	mov	sl, r3
 8006422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006426:	d807      	bhi.n	8006438 <_printf_i+0x28>
 8006428:	2f62      	cmp	r7, #98	; 0x62
 800642a:	d80a      	bhi.n	8006442 <_printf_i+0x32>
 800642c:	2f00      	cmp	r7, #0
 800642e:	f000 80d8 	beq.w	80065e2 <_printf_i+0x1d2>
 8006432:	2f58      	cmp	r7, #88	; 0x58
 8006434:	f000 80a3 	beq.w	800657e <_printf_i+0x16e>
 8006438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800643c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006440:	e03a      	b.n	80064b8 <_printf_i+0xa8>
 8006442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006446:	2b15      	cmp	r3, #21
 8006448:	d8f6      	bhi.n	8006438 <_printf_i+0x28>
 800644a:	a101      	add	r1, pc, #4	; (adr r1, 8006450 <_printf_i+0x40>)
 800644c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006450:	080064a9 	.word	0x080064a9
 8006454:	080064bd 	.word	0x080064bd
 8006458:	08006439 	.word	0x08006439
 800645c:	08006439 	.word	0x08006439
 8006460:	08006439 	.word	0x08006439
 8006464:	08006439 	.word	0x08006439
 8006468:	080064bd 	.word	0x080064bd
 800646c:	08006439 	.word	0x08006439
 8006470:	08006439 	.word	0x08006439
 8006474:	08006439 	.word	0x08006439
 8006478:	08006439 	.word	0x08006439
 800647c:	080065c9 	.word	0x080065c9
 8006480:	080064ed 	.word	0x080064ed
 8006484:	080065ab 	.word	0x080065ab
 8006488:	08006439 	.word	0x08006439
 800648c:	08006439 	.word	0x08006439
 8006490:	080065eb 	.word	0x080065eb
 8006494:	08006439 	.word	0x08006439
 8006498:	080064ed 	.word	0x080064ed
 800649c:	08006439 	.word	0x08006439
 80064a0:	08006439 	.word	0x08006439
 80064a4:	080065b3 	.word	0x080065b3
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	1d1a      	adds	r2, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	602a      	str	r2, [r5, #0]
 80064b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0a3      	b.n	8006604 <_printf_i+0x1f4>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	6829      	ldr	r1, [r5, #0]
 80064c0:	0606      	lsls	r6, r0, #24
 80064c2:	f101 0304 	add.w	r3, r1, #4
 80064c6:	d50a      	bpl.n	80064de <_printf_i+0xce>
 80064c8:	680e      	ldr	r6, [r1, #0]
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	2e00      	cmp	r6, #0
 80064ce:	da03      	bge.n	80064d8 <_printf_i+0xc8>
 80064d0:	232d      	movs	r3, #45	; 0x2d
 80064d2:	4276      	negs	r6, r6
 80064d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d8:	485e      	ldr	r0, [pc, #376]	; (8006654 <_printf_i+0x244>)
 80064da:	230a      	movs	r3, #10
 80064dc:	e019      	b.n	8006512 <_printf_i+0x102>
 80064de:	680e      	ldr	r6, [r1, #0]
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064e6:	bf18      	it	ne
 80064e8:	b236      	sxthne	r6, r6
 80064ea:	e7ef      	b.n	80064cc <_printf_i+0xbc>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	6820      	ldr	r0, [r4, #0]
 80064f0:	1d19      	adds	r1, r3, #4
 80064f2:	6029      	str	r1, [r5, #0]
 80064f4:	0601      	lsls	r1, r0, #24
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0xec>
 80064f8:	681e      	ldr	r6, [r3, #0]
 80064fa:	e002      	b.n	8006502 <_printf_i+0xf2>
 80064fc:	0646      	lsls	r6, r0, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0xe8>
 8006500:	881e      	ldrh	r6, [r3, #0]
 8006502:	4854      	ldr	r0, [pc, #336]	; (8006654 <_printf_i+0x244>)
 8006504:	2f6f      	cmp	r7, #111	; 0x6f
 8006506:	bf0c      	ite	eq
 8006508:	2308      	moveq	r3, #8
 800650a:	230a      	movne	r3, #10
 800650c:	2100      	movs	r1, #0
 800650e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006512:	6865      	ldr	r5, [r4, #4]
 8006514:	60a5      	str	r5, [r4, #8]
 8006516:	2d00      	cmp	r5, #0
 8006518:	bfa2      	ittt	ge
 800651a:	6821      	ldrge	r1, [r4, #0]
 800651c:	f021 0104 	bicge.w	r1, r1, #4
 8006520:	6021      	strge	r1, [r4, #0]
 8006522:	b90e      	cbnz	r6, 8006528 <_printf_i+0x118>
 8006524:	2d00      	cmp	r5, #0
 8006526:	d04d      	beq.n	80065c4 <_printf_i+0x1b4>
 8006528:	4615      	mov	r5, r2
 800652a:	fbb6 f1f3 	udiv	r1, r6, r3
 800652e:	fb03 6711 	mls	r7, r3, r1, r6
 8006532:	5dc7      	ldrb	r7, [r0, r7]
 8006534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006538:	4637      	mov	r7, r6
 800653a:	42bb      	cmp	r3, r7
 800653c:	460e      	mov	r6, r1
 800653e:	d9f4      	bls.n	800652a <_printf_i+0x11a>
 8006540:	2b08      	cmp	r3, #8
 8006542:	d10b      	bne.n	800655c <_printf_i+0x14c>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	07de      	lsls	r6, r3, #31
 8006548:	d508      	bpl.n	800655c <_printf_i+0x14c>
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	6861      	ldr	r1, [r4, #4]
 800654e:	4299      	cmp	r1, r3
 8006550:	bfde      	ittt	le
 8006552:	2330      	movle	r3, #48	; 0x30
 8006554:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006558:	f105 35ff 	addle.w	r5, r5, #4294967295
 800655c:	1b52      	subs	r2, r2, r5
 800655e:	6122      	str	r2, [r4, #16]
 8006560:	f8cd a000 	str.w	sl, [sp]
 8006564:	464b      	mov	r3, r9
 8006566:	aa03      	add	r2, sp, #12
 8006568:	4621      	mov	r1, r4
 800656a:	4640      	mov	r0, r8
 800656c:	f7ff fee2 	bl	8006334 <_printf_common>
 8006570:	3001      	adds	r0, #1
 8006572:	d14c      	bne.n	800660e <_printf_i+0x1fe>
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	b004      	add	sp, #16
 800657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657e:	4835      	ldr	r0, [pc, #212]	; (8006654 <_printf_i+0x244>)
 8006580:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006584:	6829      	ldr	r1, [r5, #0]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	f851 6b04 	ldr.w	r6, [r1], #4
 800658c:	6029      	str	r1, [r5, #0]
 800658e:	061d      	lsls	r5, r3, #24
 8006590:	d514      	bpl.n	80065bc <_printf_i+0x1ac>
 8006592:	07df      	lsls	r7, r3, #31
 8006594:	bf44      	itt	mi
 8006596:	f043 0320 	orrmi.w	r3, r3, #32
 800659a:	6023      	strmi	r3, [r4, #0]
 800659c:	b91e      	cbnz	r6, 80065a6 <_printf_i+0x196>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f023 0320 	bic.w	r3, r3, #32
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	2310      	movs	r3, #16
 80065a8:	e7b0      	b.n	800650c <_printf_i+0xfc>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	f043 0320 	orr.w	r3, r3, #32
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	2378      	movs	r3, #120	; 0x78
 80065b4:	4828      	ldr	r0, [pc, #160]	; (8006658 <_printf_i+0x248>)
 80065b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ba:	e7e3      	b.n	8006584 <_printf_i+0x174>
 80065bc:	0659      	lsls	r1, r3, #25
 80065be:	bf48      	it	mi
 80065c0:	b2b6      	uxthmi	r6, r6
 80065c2:	e7e6      	b.n	8006592 <_printf_i+0x182>
 80065c4:	4615      	mov	r5, r2
 80065c6:	e7bb      	b.n	8006540 <_printf_i+0x130>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	6826      	ldr	r6, [r4, #0]
 80065cc:	6961      	ldr	r1, [r4, #20]
 80065ce:	1d18      	adds	r0, r3, #4
 80065d0:	6028      	str	r0, [r5, #0]
 80065d2:	0635      	lsls	r5, r6, #24
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	d501      	bpl.n	80065dc <_printf_i+0x1cc>
 80065d8:	6019      	str	r1, [r3, #0]
 80065da:	e002      	b.n	80065e2 <_printf_i+0x1d2>
 80065dc:	0670      	lsls	r0, r6, #25
 80065de:	d5fb      	bpl.n	80065d8 <_printf_i+0x1c8>
 80065e0:	8019      	strh	r1, [r3, #0]
 80065e2:	2300      	movs	r3, #0
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	4615      	mov	r5, r2
 80065e8:	e7ba      	b.n	8006560 <_printf_i+0x150>
 80065ea:	682b      	ldr	r3, [r5, #0]
 80065ec:	1d1a      	adds	r2, r3, #4
 80065ee:	602a      	str	r2, [r5, #0]
 80065f0:	681d      	ldr	r5, [r3, #0]
 80065f2:	6862      	ldr	r2, [r4, #4]
 80065f4:	2100      	movs	r1, #0
 80065f6:	4628      	mov	r0, r5
 80065f8:	f7f9 fdf2 	bl	80001e0 <memchr>
 80065fc:	b108      	cbz	r0, 8006602 <_printf_i+0x1f2>
 80065fe:	1b40      	subs	r0, r0, r5
 8006600:	6060      	str	r0, [r4, #4]
 8006602:	6863      	ldr	r3, [r4, #4]
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	2300      	movs	r3, #0
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660c:	e7a8      	b.n	8006560 <_printf_i+0x150>
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	462a      	mov	r2, r5
 8006612:	4649      	mov	r1, r9
 8006614:	4640      	mov	r0, r8
 8006616:	47d0      	blx	sl
 8006618:	3001      	adds	r0, #1
 800661a:	d0ab      	beq.n	8006574 <_printf_i+0x164>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	079b      	lsls	r3, r3, #30
 8006620:	d413      	bmi.n	800664a <_printf_i+0x23a>
 8006622:	68e0      	ldr	r0, [r4, #12]
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	4298      	cmp	r0, r3
 8006628:	bfb8      	it	lt
 800662a:	4618      	movlt	r0, r3
 800662c:	e7a4      	b.n	8006578 <_printf_i+0x168>
 800662e:	2301      	movs	r3, #1
 8006630:	4632      	mov	r2, r6
 8006632:	4649      	mov	r1, r9
 8006634:	4640      	mov	r0, r8
 8006636:	47d0      	blx	sl
 8006638:	3001      	adds	r0, #1
 800663a:	d09b      	beq.n	8006574 <_printf_i+0x164>
 800663c:	3501      	adds	r5, #1
 800663e:	68e3      	ldr	r3, [r4, #12]
 8006640:	9903      	ldr	r1, [sp, #12]
 8006642:	1a5b      	subs	r3, r3, r1
 8006644:	42ab      	cmp	r3, r5
 8006646:	dcf2      	bgt.n	800662e <_printf_i+0x21e>
 8006648:	e7eb      	b.n	8006622 <_printf_i+0x212>
 800664a:	2500      	movs	r5, #0
 800664c:	f104 0619 	add.w	r6, r4, #25
 8006650:	e7f5      	b.n	800663e <_printf_i+0x22e>
 8006652:	bf00      	nop
 8006654:	08006a4d 	.word	0x08006a4d
 8006658:	08006a5e 	.word	0x08006a5e

0800665c <memmove>:
 800665c:	4288      	cmp	r0, r1
 800665e:	b510      	push	{r4, lr}
 8006660:	eb01 0402 	add.w	r4, r1, r2
 8006664:	d902      	bls.n	800666c <memmove+0x10>
 8006666:	4284      	cmp	r4, r0
 8006668:	4623      	mov	r3, r4
 800666a:	d807      	bhi.n	800667c <memmove+0x20>
 800666c:	1e43      	subs	r3, r0, #1
 800666e:	42a1      	cmp	r1, r4
 8006670:	d008      	beq.n	8006684 <memmove+0x28>
 8006672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800667a:	e7f8      	b.n	800666e <memmove+0x12>
 800667c:	4402      	add	r2, r0
 800667e:	4601      	mov	r1, r0
 8006680:	428a      	cmp	r2, r1
 8006682:	d100      	bne.n	8006686 <memmove+0x2a>
 8006684:	bd10      	pop	{r4, pc}
 8006686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800668a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800668e:	e7f7      	b.n	8006680 <memmove+0x24>

08006690 <_free_r>:
 8006690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006692:	2900      	cmp	r1, #0
 8006694:	d044      	beq.n	8006720 <_free_r+0x90>
 8006696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800669a:	9001      	str	r0, [sp, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f1a1 0404 	sub.w	r4, r1, #4
 80066a2:	bfb8      	it	lt
 80066a4:	18e4      	addlt	r4, r4, r3
 80066a6:	f000 f913 	bl	80068d0 <__malloc_lock>
 80066aa:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <_free_r+0x94>)
 80066ac:	9801      	ldr	r0, [sp, #4]
 80066ae:	6813      	ldr	r3, [r2, #0]
 80066b0:	b933      	cbnz	r3, 80066c0 <_free_r+0x30>
 80066b2:	6063      	str	r3, [r4, #4]
 80066b4:	6014      	str	r4, [r2, #0]
 80066b6:	b003      	add	sp, #12
 80066b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066bc:	f000 b90e 	b.w	80068dc <__malloc_unlock>
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	d908      	bls.n	80066d6 <_free_r+0x46>
 80066c4:	6825      	ldr	r5, [r4, #0]
 80066c6:	1961      	adds	r1, r4, r5
 80066c8:	428b      	cmp	r3, r1
 80066ca:	bf01      	itttt	eq
 80066cc:	6819      	ldreq	r1, [r3, #0]
 80066ce:	685b      	ldreq	r3, [r3, #4]
 80066d0:	1949      	addeq	r1, r1, r5
 80066d2:	6021      	streq	r1, [r4, #0]
 80066d4:	e7ed      	b.n	80066b2 <_free_r+0x22>
 80066d6:	461a      	mov	r2, r3
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	b10b      	cbz	r3, 80066e0 <_free_r+0x50>
 80066dc:	42a3      	cmp	r3, r4
 80066de:	d9fa      	bls.n	80066d6 <_free_r+0x46>
 80066e0:	6811      	ldr	r1, [r2, #0]
 80066e2:	1855      	adds	r5, r2, r1
 80066e4:	42a5      	cmp	r5, r4
 80066e6:	d10b      	bne.n	8006700 <_free_r+0x70>
 80066e8:	6824      	ldr	r4, [r4, #0]
 80066ea:	4421      	add	r1, r4
 80066ec:	1854      	adds	r4, r2, r1
 80066ee:	42a3      	cmp	r3, r4
 80066f0:	6011      	str	r1, [r2, #0]
 80066f2:	d1e0      	bne.n	80066b6 <_free_r+0x26>
 80066f4:	681c      	ldr	r4, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	6053      	str	r3, [r2, #4]
 80066fa:	4421      	add	r1, r4
 80066fc:	6011      	str	r1, [r2, #0]
 80066fe:	e7da      	b.n	80066b6 <_free_r+0x26>
 8006700:	d902      	bls.n	8006708 <_free_r+0x78>
 8006702:	230c      	movs	r3, #12
 8006704:	6003      	str	r3, [r0, #0]
 8006706:	e7d6      	b.n	80066b6 <_free_r+0x26>
 8006708:	6825      	ldr	r5, [r4, #0]
 800670a:	1961      	adds	r1, r4, r5
 800670c:	428b      	cmp	r3, r1
 800670e:	bf04      	itt	eq
 8006710:	6819      	ldreq	r1, [r3, #0]
 8006712:	685b      	ldreq	r3, [r3, #4]
 8006714:	6063      	str	r3, [r4, #4]
 8006716:	bf04      	itt	eq
 8006718:	1949      	addeq	r1, r1, r5
 800671a:	6021      	streq	r1, [r4, #0]
 800671c:	6054      	str	r4, [r2, #4]
 800671e:	e7ca      	b.n	80066b6 <_free_r+0x26>
 8006720:	b003      	add	sp, #12
 8006722:	bd30      	pop	{r4, r5, pc}
 8006724:	20001ac0 	.word	0x20001ac0

08006728 <sbrk_aligned>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4e0e      	ldr	r6, [pc, #56]	; (8006764 <sbrk_aligned+0x3c>)
 800672c:	460c      	mov	r4, r1
 800672e:	6831      	ldr	r1, [r6, #0]
 8006730:	4605      	mov	r5, r0
 8006732:	b911      	cbnz	r1, 800673a <sbrk_aligned+0x12>
 8006734:	f000 f8bc 	bl	80068b0 <_sbrk_r>
 8006738:	6030      	str	r0, [r6, #0]
 800673a:	4621      	mov	r1, r4
 800673c:	4628      	mov	r0, r5
 800673e:	f000 f8b7 	bl	80068b0 <_sbrk_r>
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	d00a      	beq.n	800675c <sbrk_aligned+0x34>
 8006746:	1cc4      	adds	r4, r0, #3
 8006748:	f024 0403 	bic.w	r4, r4, #3
 800674c:	42a0      	cmp	r0, r4
 800674e:	d007      	beq.n	8006760 <sbrk_aligned+0x38>
 8006750:	1a21      	subs	r1, r4, r0
 8006752:	4628      	mov	r0, r5
 8006754:	f000 f8ac 	bl	80068b0 <_sbrk_r>
 8006758:	3001      	adds	r0, #1
 800675a:	d101      	bne.n	8006760 <sbrk_aligned+0x38>
 800675c:	f04f 34ff 	mov.w	r4, #4294967295
 8006760:	4620      	mov	r0, r4
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	20001ac4 	.word	0x20001ac4

08006768 <_malloc_r>:
 8006768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800676c:	1ccd      	adds	r5, r1, #3
 800676e:	f025 0503 	bic.w	r5, r5, #3
 8006772:	3508      	adds	r5, #8
 8006774:	2d0c      	cmp	r5, #12
 8006776:	bf38      	it	cc
 8006778:	250c      	movcc	r5, #12
 800677a:	2d00      	cmp	r5, #0
 800677c:	4607      	mov	r7, r0
 800677e:	db01      	blt.n	8006784 <_malloc_r+0x1c>
 8006780:	42a9      	cmp	r1, r5
 8006782:	d905      	bls.n	8006790 <_malloc_r+0x28>
 8006784:	230c      	movs	r3, #12
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	2600      	movs	r6, #0
 800678a:	4630      	mov	r0, r6
 800678c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006790:	4e2e      	ldr	r6, [pc, #184]	; (800684c <_malloc_r+0xe4>)
 8006792:	f000 f89d 	bl	80068d0 <__malloc_lock>
 8006796:	6833      	ldr	r3, [r6, #0]
 8006798:	461c      	mov	r4, r3
 800679a:	bb34      	cbnz	r4, 80067ea <_malloc_r+0x82>
 800679c:	4629      	mov	r1, r5
 800679e:	4638      	mov	r0, r7
 80067a0:	f7ff ffc2 	bl	8006728 <sbrk_aligned>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	4604      	mov	r4, r0
 80067a8:	d14d      	bne.n	8006846 <_malloc_r+0xde>
 80067aa:	6834      	ldr	r4, [r6, #0]
 80067ac:	4626      	mov	r6, r4
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	d140      	bne.n	8006834 <_malloc_r+0xcc>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	4631      	mov	r1, r6
 80067b6:	4638      	mov	r0, r7
 80067b8:	eb04 0803 	add.w	r8, r4, r3
 80067bc:	f000 f878 	bl	80068b0 <_sbrk_r>
 80067c0:	4580      	cmp	r8, r0
 80067c2:	d13a      	bne.n	800683a <_malloc_r+0xd2>
 80067c4:	6821      	ldr	r1, [r4, #0]
 80067c6:	3503      	adds	r5, #3
 80067c8:	1a6d      	subs	r5, r5, r1
 80067ca:	f025 0503 	bic.w	r5, r5, #3
 80067ce:	3508      	adds	r5, #8
 80067d0:	2d0c      	cmp	r5, #12
 80067d2:	bf38      	it	cc
 80067d4:	250c      	movcc	r5, #12
 80067d6:	4629      	mov	r1, r5
 80067d8:	4638      	mov	r0, r7
 80067da:	f7ff ffa5 	bl	8006728 <sbrk_aligned>
 80067de:	3001      	adds	r0, #1
 80067e0:	d02b      	beq.n	800683a <_malloc_r+0xd2>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	442b      	add	r3, r5
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	e00e      	b.n	8006808 <_malloc_r+0xa0>
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	1b52      	subs	r2, r2, r5
 80067ee:	d41e      	bmi.n	800682e <_malloc_r+0xc6>
 80067f0:	2a0b      	cmp	r2, #11
 80067f2:	d916      	bls.n	8006822 <_malloc_r+0xba>
 80067f4:	1961      	adds	r1, r4, r5
 80067f6:	42a3      	cmp	r3, r4
 80067f8:	6025      	str	r5, [r4, #0]
 80067fa:	bf18      	it	ne
 80067fc:	6059      	strne	r1, [r3, #4]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	bf08      	it	eq
 8006802:	6031      	streq	r1, [r6, #0]
 8006804:	5162      	str	r2, [r4, r5]
 8006806:	604b      	str	r3, [r1, #4]
 8006808:	4638      	mov	r0, r7
 800680a:	f104 060b 	add.w	r6, r4, #11
 800680e:	f000 f865 	bl	80068dc <__malloc_unlock>
 8006812:	f026 0607 	bic.w	r6, r6, #7
 8006816:	1d23      	adds	r3, r4, #4
 8006818:	1af2      	subs	r2, r6, r3
 800681a:	d0b6      	beq.n	800678a <_malloc_r+0x22>
 800681c:	1b9b      	subs	r3, r3, r6
 800681e:	50a3      	str	r3, [r4, r2]
 8006820:	e7b3      	b.n	800678a <_malloc_r+0x22>
 8006822:	6862      	ldr	r2, [r4, #4]
 8006824:	42a3      	cmp	r3, r4
 8006826:	bf0c      	ite	eq
 8006828:	6032      	streq	r2, [r6, #0]
 800682a:	605a      	strne	r2, [r3, #4]
 800682c:	e7ec      	b.n	8006808 <_malloc_r+0xa0>
 800682e:	4623      	mov	r3, r4
 8006830:	6864      	ldr	r4, [r4, #4]
 8006832:	e7b2      	b.n	800679a <_malloc_r+0x32>
 8006834:	4634      	mov	r4, r6
 8006836:	6876      	ldr	r6, [r6, #4]
 8006838:	e7b9      	b.n	80067ae <_malloc_r+0x46>
 800683a:	230c      	movs	r3, #12
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	4638      	mov	r0, r7
 8006840:	f000 f84c 	bl	80068dc <__malloc_unlock>
 8006844:	e7a1      	b.n	800678a <_malloc_r+0x22>
 8006846:	6025      	str	r5, [r4, #0]
 8006848:	e7de      	b.n	8006808 <_malloc_r+0xa0>
 800684a:	bf00      	nop
 800684c:	20001ac0 	.word	0x20001ac0

08006850 <_realloc_r>:
 8006850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	4680      	mov	r8, r0
 8006856:	4614      	mov	r4, r2
 8006858:	460e      	mov	r6, r1
 800685a:	b921      	cbnz	r1, 8006866 <_realloc_r+0x16>
 800685c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006860:	4611      	mov	r1, r2
 8006862:	f7ff bf81 	b.w	8006768 <_malloc_r>
 8006866:	b92a      	cbnz	r2, 8006874 <_realloc_r+0x24>
 8006868:	f7ff ff12 	bl	8006690 <_free_r>
 800686c:	4625      	mov	r5, r4
 800686e:	4628      	mov	r0, r5
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006874:	f000 f838 	bl	80068e8 <_malloc_usable_size_r>
 8006878:	4284      	cmp	r4, r0
 800687a:	4607      	mov	r7, r0
 800687c:	d802      	bhi.n	8006884 <_realloc_r+0x34>
 800687e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006882:	d812      	bhi.n	80068aa <_realloc_r+0x5a>
 8006884:	4621      	mov	r1, r4
 8006886:	4640      	mov	r0, r8
 8006888:	f7ff ff6e 	bl	8006768 <_malloc_r>
 800688c:	4605      	mov	r5, r0
 800688e:	2800      	cmp	r0, #0
 8006890:	d0ed      	beq.n	800686e <_realloc_r+0x1e>
 8006892:	42bc      	cmp	r4, r7
 8006894:	4622      	mov	r2, r4
 8006896:	4631      	mov	r1, r6
 8006898:	bf28      	it	cs
 800689a:	463a      	movcs	r2, r7
 800689c:	f7ff fbb8 	bl	8006010 <memcpy>
 80068a0:	4631      	mov	r1, r6
 80068a2:	4640      	mov	r0, r8
 80068a4:	f7ff fef4 	bl	8006690 <_free_r>
 80068a8:	e7e1      	b.n	800686e <_realloc_r+0x1e>
 80068aa:	4635      	mov	r5, r6
 80068ac:	e7df      	b.n	800686e <_realloc_r+0x1e>
	...

080068b0 <_sbrk_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4d06      	ldr	r5, [pc, #24]	; (80068cc <_sbrk_r+0x1c>)
 80068b4:	2300      	movs	r3, #0
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	f7f9 ffd4 	bl	8000868 <_sbrk>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_sbrk_r+0x1a>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_sbrk_r+0x1a>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20001ac8 	.word	0x20001ac8

080068d0 <__malloc_lock>:
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <__malloc_lock+0x8>)
 80068d2:	f000 b811 	b.w	80068f8 <__retarget_lock_acquire_recursive>
 80068d6:	bf00      	nop
 80068d8:	20001acc 	.word	0x20001acc

080068dc <__malloc_unlock>:
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <__malloc_unlock+0x8>)
 80068de:	f000 b80c 	b.w	80068fa <__retarget_lock_release_recursive>
 80068e2:	bf00      	nop
 80068e4:	20001acc 	.word	0x20001acc

080068e8 <_malloc_usable_size_r>:
 80068e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ec:	1f18      	subs	r0, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfbc      	itt	lt
 80068f2:	580b      	ldrlt	r3, [r1, r0]
 80068f4:	18c0      	addlt	r0, r0, r3
 80068f6:	4770      	bx	lr

080068f8 <__retarget_lock_acquire_recursive>:
 80068f8:	4770      	bx	lr

080068fa <__retarget_lock_release_recursive>:
 80068fa:	4770      	bx	lr

080068fc <_init>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

08006908 <_fini>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr
